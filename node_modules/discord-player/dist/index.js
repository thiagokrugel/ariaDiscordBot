"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target2, value) => __defProp(target2, "name", { value, configurable: true });
var __export = (target2, all) => {
  for (var name in all)
    __defProp(target2, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target2, mod, secondTarget) => (__copyProps(target2, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target2) => (target2 = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target2, "default", { value: mod, enumerable: true }) : target2,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var __privateWrapper = (obj, member, setter, getter) => ({
  set _(value) {
    __privateSet(obj, member, value, setter);
  },
  get _() {
    return __privateGet(obj, member, getter);
  }
});
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, "access private method");
  return method;
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AF_NIGHTCORE_RATE: () => import_equalizer3.AF_NIGHTCORE_RATE,
  AF_VAPORWAVE_RATE: () => import_equalizer3.AF_VAPORWAVE_RATE,
  AFilterGraph: () => AFilterGraph,
  AsyncQueue: () => AsyncQueue,
  AsyncQueueEntry: () => AsyncQueueEntry,
  AudioFilters: () => AudioFilters,
  AudioPlayer: () => import_discord_voip7.AudioPlayer,
  BASS_EQ_BANDS: () => import_equalizer3.BASS_EQ_BANDS,
  BaseExtractor: () => BaseExtractor,
  BiquadFilterType: () => import_equalizer3.FilterType,
  Context: () => Context,
  DiscordPlayerQueryResultCache: () => DiscordPlayerQueryResultCache,
  EqualizerConfigurationPreset: () => EqualizerConfigurationPreset,
  ExtractorExecutionContext: () => ExtractorExecutionContext,
  FFMPEG_ARGS_PIPED: () => FFMPEG_ARGS_PIPED,
  FFMPEG_ARGS_STRING: () => FFMPEG_ARGS_STRING,
  FFMPEG_SRATE_REGEX: () => FFMPEG_SRATE_REGEX,
  FFmpegFilterer: () => FFmpegFilterer,
  FiltersChain: () => import_equalizer3.FiltersChain,
  GuildNodeManager: () => GuildNodeManager,
  GuildQueue: () => GuildQueue5,
  GuildQueueAudioFilters: () => GuildQueueAudioFilters,
  GuildQueueEvent: () => GuildQueueEvent,
  GuildQueueHistory: () => GuildQueueHistory,
  GuildQueuePlayerNode: () => GuildQueuePlayerNode,
  GuildQueueStatistics: () => GuildQueueStatistics,
  IPBlock: () => IPBlock,
  IPRotator: () => IPRotator,
  LrcLib: () => LrcLib,
  PCMAudioFilters: () => import_equalizer3.AudioFilters,
  Player: () => Player,
  PlayerEvent: () => PlayerEvent,
  PlayerEventsEmitter: () => PlayerEventsEmitter,
  Playlist: () => Playlist,
  Q_BUTTERWORTH: () => import_equalizer3.Q_BUTTERWORTH,
  QueryCache: () => QueryCache,
  QueryResolver: () => QueryResolver,
  QueryType: () => QueryType,
  QueueRepeatMode: () => QueueRepeatMode,
  SearchResult: () => SearchResult,
  SequentialBucket: () => SequentialBucket,
  SerializedType: () => SerializedType,
  StreamDispatcher: () => StreamDispatcher,
  Track: () => Track,
  TrackSkipReason: () => TrackSkipReason,
  TypeUtil: () => TypeUtil,
  Util: () => Util,
  VALIDATE_QUEUE_CAP: () => VALIDATE_QUEUE_CAP,
  VoiceReceiverNode: () => VoiceReceiverNode,
  VoiceUtils: () => VoiceUtils,
  VolumeTransformer: () => import_equalizer3.VolumeTransformer,
  createAudioPlayer: () => import_discord_voip7.createAudioPlayer,
  createContext: () => createContext,
  createFFmpegStream: () => createFFmpegStream,
  createHook: () => createHook,
  decode: () => decode,
  deserialize: () => deserialize,
  encode: () => encode,
  onAfterCreateStream: () => onAfterCreateStream,
  onBeforeCreateStream: () => onBeforeCreateStream,
  serialize: () => serialize,
  tryIntoThumbnailString: () => tryIntoThumbnailString,
  useContext: () => useContext,
  useHistory: () => useHistory,
  useMainPlayer: () => useMainPlayer,
  useMasterPlayer: () => useMasterPlayer,
  useMetadata: () => useMetadata,
  usePlayer: () => usePlayer,
  useQueue: () => useQueue,
  useTimeline: () => useTimeline,
  useVolume: () => useVolume,
  version: () => version
});
module.exports = __toCommonJS(src_exports);
var import_discord6 = require("discord.js");

// src/utils/PlayerEventsEmitter.ts
var import_utils = require("@discord-player/utils");

// src/utils/Util.ts
var import_promises = require("timers/promises");

// src/fabric/Track.ts
var import_discord = require("discord.js");

// src/utils/TypeUtil.ts
var _TypeUtil = class _TypeUtil {
  constructor() {
    return _TypeUtil;
  }
  // eslint-disable-next-line @typescript-eslint/ban-types
  static isFunction(t) {
    return typeof t === "function";
  }
  static isNumber(t) {
    return typeof t === "number" && !isNaN(t);
  }
  static isString(t) {
    return typeof t === "string";
  }
  static isBoolean(t) {
    return typeof t === "boolean";
  }
  static isNullish(t) {
    return t == null;
  }
  static isArray(t) {
    return Array.isArray(t);
  }
  static isError(t) {
    return t instanceof Error;
  }
};
__name(_TypeUtil, "TypeUtil");
var TypeUtil = _TypeUtil;

// src/errors/index.ts
var DiscordPlayerErrors = {
  ERR_OUT_OF_SPACE: {
    name: "ERR_OUT_OF_SPACE",
    type: RangeError,
    createError(target2, capacity, total) {
      return `[${this.constructor.name}] Max capacity reached for ${target2} (Capacity ${capacity}/Total ${total})`;
    }
  },
  ERR_INVALID_ARG_TYPE: {
    name: "ERR_INVALID_ARG_TYPE",
    type: TypeError,
    createError(target2, expectation, found) {
      return `[${this.constructor.name}] Expected ${target2} to be "${expectation}", received "${found}"`;
    }
  },
  ERR_NO_RESULT: {
    name: "ERR_NO_RESULT",
    type: Error,
    createError(message) {
      return `[${this.constructor.name}] ${message}`;
    }
  },
  ERR_NOT_IMPLEMENTED: {
    name: "ERR_NOT_IMPLEMENTED",
    type: Error,
    createError(target2) {
      return `[${this.constructor.name}] ${target2} is not yet implemented`;
    }
  },
  ERR_NOT_EXISTING: {
    name: "ERR_NOT_EXISTING",
    type: Error,
    createError(target2) {
      return `[${this.constructor.name}] ${target2} does not exist`;
    }
  },
  ERR_OUT_OF_RANGE: {
    name: "ERR_OUT_OF_RANGE",
    type: RangeError,
    createError(target2, value, minimum, maximum) {
      return `[${this.constructor.name}] ${target2} is out of range (Expected minimum ${maximum} and maximum ${maximum}, got ${value})`;
    }
  },
  ERR_NO_VOICE_CONNECTION: {
    name: "ERR_NO_VOICE_CONNECTION",
    type: Error,
    createError(message) {
      return `[${this.constructor.name}] ` + (message || "No voice connection available, maybe connect to a voice channel first?");
    }
  },
  ERR_VOICE_CONNECTION_DESTROYED: {
    name: "ERR_VOICE_CONNECTION_DESTROYED",
    type: Error,
    createError() {
      return `[${this.constructor.name}] Cannot use destroyed voice connection`;
    }
  },
  ERR_NO_VOICE_CHANNEL: {
    name: "ERR_NO_VOICE_CHANNEL",
    type: Error,
    createError() {
      return `[${this.constructor.name}] Could not get the voice channel`;
    }
  },
  ERR_INVALID_VOICE_CHANNEL: {
    name: "ERR_INVALID_VOICE_CHANNEL",
    type: Error,
    createError() {
      return `[${this.constructor.name}] Expected a voice channel`;
    }
  },
  ERR_NO_RECEIVER: {
    name: "ERR_NO_RECEIVER",
    type: Error,
    createError(message) {
      return `[${this.constructor.name}] ` + (message || "No voice receiver is available, maybe connect to a voice channel first?");
    }
  },
  ERR_FFMPEG_LOCATOR: {
    name: "ERR_FFMPEG_LOCATOR",
    type: Error,
    createError(message) {
      return `[${this.constructor.name}] ` + message;
    }
  },
  ERR_NO_AUDIO_RESOURCE: {
    name: "ERR_NO_AUDIO_RESOURCE",
    type: Error,
    createError(message) {
      return `[${this.constructor.name}] ` + (message || "Expected an audio resource");
    }
  },
  ERR_NO_GUILD_QUEUE: {
    name: "ERR_NO_GUILD_QUEUE",
    type: Error,
    createError(message) {
      return `[${this.constructor.name}] ` + (message || "Expected a guild queue");
    }
  },
  ERR_NO_GUILD: {
    name: "ERR_NO_GUILD",
    type: Error,
    createError(message) {
      return `[${this.constructor.name}] ` + (message || "Expected a guild");
    }
  },
  ERR_INFO_REQUIRED: {
    name: "ERR_INFO_REQUIRED",
    type: Error,
    createError(target2, actual) {
      return `[${this.constructor.name}] Expected ${target2}, found "${actual}"`;
    }
  },
  ERR_SERIALIZATION_FAILED: {
    name: "ERR_SERIALIZATION_FAILED",
    type: Error,
    createError() {
      return `[${this.constructor.name}]Don't know how to serialize this data`;
    }
  },
  ERR_DESERIALIZATION_FAILED: {
    name: "ERR_DESERIALIZATION_FAILED",
    type: Error,
    createError() {
      return `[${this.constructor.name}]Don't know how to deserialize this data`;
    }
  },
  ERR_ILLEGAL_HOOK_INVOCATION: {
    name: "ERR_ILLEGAL_HOOK_INVOCATION",
    type: Error,
    createError(target2, message) {
      return `[${this.constructor.name}]Illegal invocation of ${target2} hook.${message ? ` ${message}` : ""}`;
    }
  },
  ERR_NOT_EXISTING_MODULE: {
    name: "ERR_NOT_EXISTING_MODULE",
    type: Error,
    createError(target2, description = "") {
      return `[${this.constructor.name}]${target2} module does not exist. Install it with \`npm install ${target2}\`.${description ? " " + description : ""}`;
    }
  }
};
var target = {};
var handler = {
  get(target2, p, receiver) {
    const err = DiscordPlayerErrors[p];
    if (!err)
      return Reflect.get(target2, p, receiver);
    return (...args) => {
      const exception = new err.type(err.createError(...args));
      const originalName = exception.name;
      exception.name = `${err.name} [${originalName}]`;
      return exception;
    };
  }
};
var ErrorCodes = (() => {
  const dict = {};
  for (const prop in DiscordPlayerErrors) {
    dict[prop] = prop;
  }
  return Object.freeze(dict);
})();
var Exceptions = new Proxy(target, handler);

// src/utils/serde.ts
var import_buffer = require("buffer");
var SerializedType = /* @__PURE__ */ ((SerializedType2) => {
  SerializedType2["Track"] = "track";
  SerializedType2["Playlist"] = "playlist";
  return SerializedType2;
})(SerializedType || {});
var isTrack = /* @__PURE__ */ __name((data) => data.$type === "track" /* Track */, "isTrack");
var isPlaylist = /* @__PURE__ */ __name((data) => data.$type === "playlist" /* Playlist */, "isPlaylist");
function serialize(data) {
  if (data instanceof Track)
    return data.serialize();
  if (data instanceof Playlist)
    return data.serialize();
  try {
    return data.toJSON();
  } catch {
    throw Exceptions.ERR_SERIALIZATION_FAILED();
  }
}
__name(serialize, "serialize");
function deserialize(player, data) {
  if (isTrack(data))
    return Track.fromSerialized(player, data);
  if (isPlaylist(data))
    return Playlist.fromSerialized(player, data);
  throw Exceptions.ERR_DESERIALIZATION_FAILED();
}
__name(deserialize, "deserialize");
function encode(data) {
  const str = JSON.stringify(data);
  return import_buffer.Buffer.from(str).toString("base64");
}
__name(encode, "encode");
function decode(data) {
  const str = import_buffer.Buffer.from(data, "base64").toString();
  return JSON.parse(str);
}
__name(decode, "decode");
function tryIntoThumbnailString(data) {
  if (!data)
    return null;
  try {
    if (TypeUtil.isString(data))
      return data;
    return data?.url ?? data?.thumbnail?.url ?? null;
  } catch {
    return null;
  }
}
__name(tryIntoThumbnailString, "tryIntoThumbnailString");

// src/fabric/Track.ts
var _Track = class _Track {
  /**
   * Track constructor
   * @param player The player that instantiated this Track
   * @param data Track data
   */
  constructor(player, data) {
    this.player = player;
    this.requestedBy = null;
    this.queryType = null;
    this.raw = {
      source: "arbitrary"
    };
    this.extractor = null;
    this.id = import_discord.SnowflakeUtil.generate().toString();
    this.__metadata = null;
    this.title = (0, import_discord.escapeMarkdown)(data.title ?? "");
    this.author = data.author ?? "";
    this.url = data.url ?? "";
    this.thumbnail = data.thumbnail ?? "";
    this.duration = data.duration ?? "";
    this.views = data.views ?? 0;
    this.queryType = data.queryType;
    this.requestedBy = data.requestedBy || null;
    this.playlist = data.playlist;
    this.description = `${this.title} by ${this.author}`;
    this.raw = Object.assign({}, { source: data.raw?.source ?? data.source }, data.raw ?? data);
    this.__metadata = data.metadata ?? null;
    this.__reqMetadataFn = data.requestMetadata || (() => Promise.resolve(null));
    this.cleanTitle = data.cleanTitle ?? Util.cleanTitle(this.title, this.source);
  }
  /**
   * Request metadata for this track
   */
  async requestMetadata() {
    const res = await this.__reqMetadataFn();
    this.setMetadata(res);
    return res;
  }
  /**
   * Set metadata for this track
   */
  setMetadata(m) {
    this.__metadata = m;
  }
  /**
   * Metadata of this track
   */
  get metadata() {
    return this.__metadata;
  }
  /**
   * If this track has metadata
   */
  get hasMetadata() {
    return this.metadata != null;
  }
  /**
   * The queue in which this track is located
   */
  get queue() {
    return this.player.nodes.cache.find((q) => q.tracks.some((ab) => ab.id === this.id));
  }
  /**
   * The track duration in millisecond
   */
  get durationMS() {
    const times = /* @__PURE__ */ __name((n, t) => {
      let tn = 1;
      for (let i = 0; i < t; i++)
        tn *= n;
      return t <= 0 ? 1e3 : tn * 1e3;
    }, "times");
    return this.duration.split(":").reverse().map((m, i) => parseInt(m) * times(60, i)).reduce((a, c) => a + c, 0);
  }
  /**
   * Discord hyperlink representation of this track
   */
  toHyperlink() {
    return `[${this.title}](${this.url})`;
  }
  /**
   * Returns source of this track
   */
  get source() {
    return this.raw?.source ?? "arbitrary";
  }
  /**
   * String representation of this track
   */
  toString() {
    return `${this.title} by ${this.author}`;
  }
  /**
   * Raw JSON representation of this track
   */
  toJSON(hidePlaylist) {
    return {
      id: this.id,
      title: this.title,
      description: this.description,
      author: this.author,
      url: this.url,
      thumbnail: this.thumbnail,
      duration: this.duration,
      durationMS: this.durationMS,
      views: this.views,
      requestedBy: this.requestedBy?.id || null,
      playlist: hidePlaylist ? null : this.playlist?.toJSON() ?? null
    };
  }
  /**
   * Serialized track data that can be reconstructed
   */
  serialize() {
    return {
      title: this.title,
      description: this.description,
      author: this.author,
      url: this.url,
      thumbnail: TypeUtil.isString(this.thumbnail) ? this.thumbnail : tryIntoThumbnailString(this.thumbnail),
      duration: this.duration,
      views: this.views ?? 0,
      requested_by: this.requestedBy?.toJSON() ?? null,
      source: this.source,
      live: false,
      query_type: this.queryType,
      extractor: this.extractor?.identifier ?? null,
      metadata: this.metadata,
      $type: "track" /* Track */,
      $encoder_version: "6.7.1"
    };
  }
  /**
   * Construct a track from serialized data
   * @param player Player instance
   * @param data Serialized data
   */
  static fromSerialized(player, data) {
    if (data.$type !== "track" /* Track */)
      throw Exceptions.ERR_INVALID_ARG_TYPE("data", "SerializedTrack", "malformed data");
    const track = new _Track(player, {
      ...data,
      requestedBy: data.requested_by ? (() => {
        const res = data.requested_by;
        try {
          const resolved = player.client.users.resolve(res.id);
          if (resolved)
            return resolved;
          if (player.client.users.cache.has(res.id))
            return player.client.users.cache.get(res.id);
          const user = new import_discord.User(player.client, res);
          return user;
        } catch {
          return null;
        }
      })() : null,
      queryType: data.query_type ?? void 0
    });
    track.setMetadata(data.metadata);
    return track;
  }
  /**
   * Get belonging queues of this track
   */
  getBelongingQueues() {
    const nodes = this.player.nodes.cache.filter((node) => node.tracks.some((t) => t.id === this.id));
    return nodes;
  }
  /**
   * Play this track to the given voice channel. If queue exists and another track is being played, this track will be added to the queue.
   * @param channel Voice channel on which this track shall be played
   * @param options Node initialization options
   */
  async play(channel, options) {
    const fn = this.player.play.bind(this.player);
    return await fn(channel, this, options);
  }
};
__name(_Track, "Track");
var Track = _Track;

// src/fabric/Playlist.ts
var _Playlist = class _Playlist {
  // eslint-disable-line @typescript-eslint/no-explicit-any
  /**
   * Playlist constructor
   * @param {Player} player The player
   * @param {PlaylistInitData} data The data
   */
  constructor(player, data) {
    this.player = player;
    this.tracks = data.tracks ?? [];
    this.author = data.author;
    this.description = data.description;
    this.thumbnail = data.thumbnail;
    this.type = data.type;
    this.source = data.source;
    this.id = data.id;
    this.url = data.url;
    this.title = data.title;
  }
  *[Symbol.iterator]() {
    yield* this.tracks;
  }
  /**
   * Estimated duration of this playlist
   */
  get estimatedDuration() {
    return this.tracks.reduce((p, c) => p + c.durationMS, 0);
  }
  /**
   * Formatted estimated duration of this playlist
   */
  get durationFormatted() {
    return Util.buildTimeCode(Util.parseMS(this.estimatedDuration));
  }
  /**
   * JSON representation of this playlist
   * @param {boolean} [withTracks=true] If it should build json with tracks
   * @returns {PlaylistJSON}
   */
  toJSON(withTracks = true) {
    const payload = {
      id: this.id,
      url: this.url,
      title: this.title,
      description: this.description,
      thumbnail: this.thumbnail,
      type: this.type,
      source: this.source,
      author: this.author,
      tracks: []
    };
    if (withTracks)
      payload.tracks = this.tracks.map((m) => m.toJSON(true));
    return payload;
  }
  /**
   * Serialize this playlist into reconstructable data
   */
  serialize() {
    return {
      tracks: this.tracks.map((m) => m.serialize()),
      title: this.title,
      description: this.description,
      thumbnail: TypeUtil.isString(this.thumbnail) ? this.thumbnail : tryIntoThumbnailString(this.thumbnail),
      type: this.type,
      source: this.source,
      author: this.author,
      id: this.id,
      url: this.url,
      $type: "playlist" /* Playlist */,
      $encoder_version: "6.7.1"
    };
  }
  /**
   * Deserialize this playlist from serialized data
   * @param player Player instance
   * @param data Serialized data
   */
  static fromSerialized(player, data) {
    if (data.$type !== "playlist" /* Playlist */)
      throw Exceptions.ERR_INVALID_ARG_TYPE("data", "SerializedPlaylist", "malformed data");
    return new _Playlist(player, {
      ...data,
      tracks: data.tracks.map((m) => Track.fromSerialized(player, m))
    });
  }
  /**
   * Play this playlist to the given voice channel. If queue exists and another track is being played, this playlist will be added to the queue.
   * @param channel Voice channel on which this playlist shall be played
   * @param options Node initialization options
   */
  async play(channel, options) {
    const fn = this.player.play.bind(this.player);
    return await fn(channel, this, options);
  }
};
__name(_Playlist, "Playlist");
var Playlist = _Playlist;

// src/types/types.ts
var QueryType = {
  AUTO: "auto",
  YOUTUBE: "youtube",
  YOUTUBE_PLAYLIST: "youtubePlaylist",
  SOUNDCLOUD_TRACK: "soundcloudTrack",
  SOUNDCLOUD_PLAYLIST: "soundcloudPlaylist",
  SOUNDCLOUD: "soundcloud",
  SPOTIFY_SONG: "spotifySong",
  SPOTIFY_ALBUM: "spotifyAlbum",
  SPOTIFY_PLAYLIST: "spotifyPlaylist",
  SPOTIFY_SEARCH: "spotifySearch",
  FACEBOOK: "facebook",
  VIMEO: "vimeo",
  ARBITRARY: "arbitrary",
  REVERBNATION: "reverbnation",
  YOUTUBE_SEARCH: "youtubeSearch",
  YOUTUBE_VIDEO: "youtubeVideo",
  SOUNDCLOUD_SEARCH: "soundcloudSearch",
  APPLE_MUSIC_SONG: "appleMusicSong",
  APPLE_MUSIC_ALBUM: "appleMusicAlbum",
  APPLE_MUSIC_PLAYLIST: "appleMusicPlaylist",
  APPLE_MUSIC_SEARCH: "appleMusicSearch",
  FILE: "file",
  AUTO_SEARCH: "autoSearch"
};
var PlayerEvent = {
  debug: "debug",
  Debug: "debug",
  error: "error",
  Error: "error",
  voiceStateUpdate: "voiceStateUpdate",
  VoiceStateUpdate: "voiceStateUpdate"
};
var QueueRepeatMode = /* @__PURE__ */ ((QueueRepeatMode2) => {
  QueueRepeatMode2[QueueRepeatMode2["OFF"] = 0] = "OFF";
  QueueRepeatMode2[QueueRepeatMode2["TRACK"] = 1] = "TRACK";
  QueueRepeatMode2[QueueRepeatMode2["QUEUE"] = 2] = "QUEUE";
  QueueRepeatMode2[QueueRepeatMode2["AUTOPLAY"] = 3] = "AUTOPLAY";
  return QueueRepeatMode2;
})(QueueRepeatMode || {});

// src/fabric/SearchResult.ts
var _SearchResult = class _SearchResult {
  constructor(player, _data) {
    this.player = player;
    this._data = _data;
    this._data.tracks?.forEach((track) => {
      track.extractor ?? (track.extractor = this._data.extractor || null);
      track.requestedBy ?? (track.requestedBy = _data.requestedBy || null);
    });
  }
  setQueryType(type) {
    this._data.queryType = type;
    return this;
  }
  setRequestedBy(user) {
    this._data.requestedBy = user;
    this._data.tracks?.forEach((track) => {
      track.requestedBy = user;
    });
    return this;
  }
  setExtractor(extractor) {
    this._data.extractor = extractor;
    this._data.tracks?.forEach((track) => {
      track.extractor = extractor;
    });
    return this;
  }
  setTracks(tracks) {
    this._data.tracks = tracks;
    return this;
  }
  setQuery(query) {
    this._data.query = query;
    return this;
  }
  setPlaylist(playlist) {
    this._data.playlist = playlist;
    return this;
  }
  /**
   * The search query
   */
  get query() {
    return this._data.query;
  }
  /**
   * The search query type
   */
  get queryType() {
    return this._data.queryType || QueryType.AUTO;
  }
  /**
   * The extractor
   */
  get extractor() {
    return this._data.extractor || null;
  }
  /**
   * Playlist result
   */
  get playlist() {
    return this._data.playlist;
  }
  /**
   * Tracks result
   */
  get tracks() {
    return this._data.tracks || [];
  }
  /**
   * Requested by
   */
  get requestedBy() {
    return this._data.requestedBy || null;
  }
  /**
   * Re-execute this search
   */
  async execute() {
    return this.player.search(this.query, {
      searchEngine: this.queryType,
      requestedBy: this.requestedBy
    });
  }
  /**
   * If this search result is empty
   */
  isEmpty() {
    return !this.tracks.length;
  }
  /**
   * If this search result has playlist
   */
  hasPlaylist() {
    return this.playlist != null;
  }
  /**
   * If this search result has tracks
   */
  hasTracks() {
    return this.tracks.length > 0;
  }
  /**
   * JSON representation of this search
   */
  toJSON() {
    return {
      query: this.query,
      queryType: this.queryType,
      playlist: this.playlist?.toJSON(false) || null,
      tracks: this.tracks.map((m) => m.toJSON(true)),
      extractor: this.extractor?.identifier || null,
      requestedBy: this.requestedBy?.toJSON() || null
    };
  }
};
__name(_SearchResult, "SearchResult");
var SearchResult = _SearchResult;

// src/utils/AudioFilters.ts
var bass = /* @__PURE__ */ __name((g) => `bass=g=${g}:f=110:w=0.3`, "bass");
var _AudioFilters = class _AudioFilters {
  constructor() {
    return _AudioFilters;
  }
  static get(name) {
    return this.filters[name] ?? name;
  }
  static has(name) {
    return name in this.filters;
  }
  static *[Symbol.iterator]() {
    for (const [k, v] of Object.entries(this.filters)) {
      yield { name: k, value: v };
    }
  }
  static get names() {
    return Object.keys(this.filters);
  }
  // @ts-ignore
  static get length() {
    return this.names.length;
  }
  static toString() {
    return this.names.map((m) => this[m]).join(",");
  }
  /**
   * Create ffmpeg args from the specified filters name
   * @param filter The filter name
   * @returns
   */
  static create(filters) {
    if (!filters || !Array.isArray(filters))
      return this.toString();
    return filters.filter((predicate) => typeof predicate === "string").map((m) => this.get(m)).join(",");
  }
  /**
   * Defines audio filter
   * @param filterName The name of the filter
   * @param value The ffmpeg args
   */
  static define(filterName, value) {
    this.filters[filterName] = value;
  }
  /**
   * Defines multiple audio filters
   * @param filtersArray Array of filters containing the filter name and ffmpeg args
   */
  static defineBulk(filtersArray) {
    filtersArray.forEach((arr) => this.define(arr.name, arr.value));
  }
};
__name(_AudioFilters, "AudioFilters");
_AudioFilters.filters = {
  bassboost_low: bass(15),
  bassboost: bass(20),
  bassboost_high: bass(30),
  "8D": "apulsator=hz=0.09",
  vaporwave: "aresample=48000,asetrate=48000*0.8",
  nightcore: "aresample=48000,asetrate=48000*1.25",
  lofi: "aresample=48000,asetrate=48000*0.9,extrastereo=m=2.5:c=disabled",
  phaser: "aphaser=in_gain=0.4",
  tremolo: "tremolo",
  vibrato: "vibrato=f=6.5",
  reverse: "areverse",
  treble: "treble=g=5",
  normalizer2: "dynaudnorm=g=101",
  normalizer: "acompressor",
  surrounding: "surround",
  pulsator: "apulsator=hz=1",
  subboost: "asubboost",
  karaoke: "stereotools=mlev=0.03",
  flanger: "flanger",
  gate: "agate",
  haas: "haas",
  mcompand: "mcompand",
  mono: "pan=mono|c0=.5*c0+.5*c1",
  mstlr: "stereotools=mode=ms>lr",
  mstrr: "stereotools=mode=ms>rr",
  compressor: "compand=points=-80/-105|-62/-80|-15.4/-15.4|0/-12|20/-7.6",
  expander: "compand=attacks=0:points=-80/-169|-54/-80|-49.5/-64.6|-41.1/-41.1|-25.8/-15|-10.8/-4.5|0/0|20/8.3",
  softlimiter: "compand=attacks=0:points=-80/-80|-12.4/-12.4|-6/-8|0/-6.8|20/-2.8",
  chorus: "chorus=0.7:0.9:55:0.4:0.25:2",
  chorus2d: "chorus=0.6:0.9:50|60:0.4|0.32:0.25|0.4:2|1.3",
  chorus3d: "chorus=0.5:0.9:50|60|40:0.4|0.32|0.3:0.25|0.4|0.3:2|2.3|1.3",
  fadein: "afade=t=in:ss=0:d=10",
  dim: `afftfilt="'real=re * (1-clip((b/nb)*b,0,1))':imag='im * (1-clip((b/nb)*b,0,1))'"`,
  earrape: "channelsplit,sidechaingate=level_in=64",
  silenceremove: "silenceremove=1:0:-50dB"
};
var AudioFilters = _AudioFilters;

// src/utils/Util.ts
var import_node_crypto = require("crypto");
var import_metadata_filter = require("@web-scrobbler/metadata-filter");
var _Util = class _Util {
  /**
   * Utils
   */
  constructor() {
  }
  // eslint-disable-line @typescript-eslint/no-empty-function
  /**
   * Gets the runtime information
   */
  static getRuntime() {
    const version2 = typeof navigator !== "undefined" ? navigator.userAgent : null;
    if (typeof Deno !== "undefined" && Deno.version)
      return { name: "deno", version: Deno.version.deno };
    if (typeof Bun !== "undefined" && Bun.version)
      return { name: "bun", version: Bun.version };
    if (typeof process !== "undefined" && process.version)
      return { name: "node", version: process.version };
    return { name: "unknown", version: version2 ?? "unknown" };
  }
  /**
   * Creates duration string
   * @param {object} durObj The duration object
   * @returns {string}
   */
  static durationString(durObj) {
    return Object.values(durObj).map((m) => isNaN(m) ? 0 : m).join(":");
  }
  /**
   * Parses milliseconds to consumable time object
   * @param {number} milliseconds The time in ms
   * @returns {TimeData}
   */
  static parseMS(milliseconds) {
    if (isNaN(milliseconds))
      milliseconds = 0;
    const round = milliseconds > 0 ? Math.floor : Math.ceil;
    return {
      days: round(milliseconds / 864e5),
      hours: round(milliseconds / 36e5) % 24,
      minutes: round(milliseconds / 6e4) % 60,
      seconds: round(milliseconds / 1e3) % 60
    };
  }
  /**
   * Builds time code
   * @param {TimeData} duration The duration object
   * @returns {string}
   */
  static buildTimeCode(duration) {
    const items = Object.keys(duration);
    const required = ["days", "hours", "minutes", "seconds"];
    const parsed = items.filter((x) => required.includes(x)).map((m) => duration[m]);
    const final = parsed.slice(parsed.findIndex((x) => x !== 0)).map((x) => x.toString().padStart(2, "0")).join(":");
    return final.length <= 3 ? `0:${final.padStart(2, "0") || 0}` : final;
  }
  /**
   * Formats duration
   * @param {number} duration The duration in ms
   */
  static formatDuration(duration) {
    return this.buildTimeCode(this.parseMS(duration));
  }
  /**
   * Picks last item of the given array
   * @param {any[]} arr The array
   * @returns {any}
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  static last(arr) {
    if (!Array.isArray(arr))
      return arr;
    return arr[arr.length - 1];
  }
  /**
   * Checks if the voice channel is empty
   * @param {VoiceChannel|StageChannel} channel The voice channel
   * @returns {boolean}
   */
  static isVoiceEmpty(channel) {
    return channel && channel.members.filter((member) => !member.user.bot).size === 0;
  }
  /**
   * Cleans the track title
   * @param title The title
   * @param source The source
   * @returns Cleaned title
   */
  static cleanTitle(title, source) {
    try {
      const filterOpts = {
        // prettier-ignore
        track: [
          import_metadata_filter.removeRemastered,
          import_metadata_filter.removeLive,
          import_metadata_filter.fixTrackSuffix,
          import_metadata_filter.removeZeroWidth,
          import_metadata_filter.replaceNbsp,
          import_metadata_filter.replaceSmartQuotes,
          import_metadata_filter.removeCleanExplicit
        ]
      };
      const spotifyFilter = (0, import_metadata_filter.createFilter)(filterOpts);
      spotifyFilter.extend((0, import_metadata_filter.createSpotifyFilter)());
      const defaultFilter = (0, import_metadata_filter.createFilter)(filterOpts);
      switch (source) {
        case "youtube":
          return (0, import_metadata_filter.youtube)(title);
        case "spotify":
          return spotifyFilter.filterField("track", title);
        default:
          return defaultFilter.filterField("track", title);
      }
    } catch {
      return title;
    }
  }
  /**
   * Safer require
   * @param {string} id Node require id
   * @returns {any}
   */
  static require(id) {
    try {
      return { module: require(id), error: null };
    } catch (error) {
      return { module: null, error };
    }
  }
  static async import(id) {
    try {
      const mod = await import(id);
      return { module: mod, error: null };
    } catch (error) {
      return { module: null, error };
    }
  }
  /**
   * Asynchronous timeout
   * @param {number} time The time in ms to wait
   * @returns {Promise<unknown>}
   */
  static wait(time) {
    return (0, import_promises.setTimeout)(time, void 0, { ref: false });
  }
  static noop() {
  }
  // eslint-disable-line @typescript-eslint/no-empty-function
  static async getFetch() {
    if ("fetch" in globalThis)
      return globalThis.fetch;
    for (const lib of ["node-fetch", "undici"]) {
      try {
        return await import(lib).then((res) => res.fetch || res.default?.fetch || res.default);
      } catch {
        try {
          const res = require(lib);
          if (res)
            return res.fetch || res.default?.fetch || res.default;
        } catch {
        }
      }
    }
  }
  static warn(message, code = "DeprecationWarning", detail) {
    process.emitWarning(message, {
      code,
      detail
    });
  }
  static randomChoice(src) {
    return src[(0, import_node_crypto.randomInt)(src.length)];
  }
  static arrayCloneShuffle(src) {
    const arr = src.slice();
    let m = arr.length;
    while (m) {
      const i = Math.floor(Math.random() * m--);
      [arr[m], arr[i]] = [arr[i], arr[m]];
    }
    return arr;
  }
};
__name(_Util, "Util");
var Util = _Util;
var VALIDATE_QUEUE_CAP = /* @__PURE__ */ __name((queue, items) => {
  const tracks = items instanceof Playlist ? items.tracks : Array.isArray(items) ? items : [items];
  if (queue.maxSize < 1 || queue.maxSize === Infinity)
    return;
  const maxCap = queue.getCapacity();
  if (maxCap < tracks.length) {
    throw Exceptions.ERR_OUT_OF_SPACE("tracks queue", maxCap, tracks.length);
  }
}, "VALIDATE_QUEUE_CAP");

// src/utils/PlayerEventsEmitter.ts
var _hasDebugger;
var _PlayerEventsEmitter = class _PlayerEventsEmitter extends import_utils.EventEmitter {
  constructor(requiredEvents = []) {
    super();
    this.requiredEvents = requiredEvents;
    __privateAdd(this, _hasDebugger, false);
  }
  on(name, listener) {
    if (name === "debug") {
      __privateSet(this, _hasDebugger, true);
    }
    return super.on(name, listener);
  }
  once(name, listener) {
    if (name === "debug") {
      __privateSet(this, _hasDebugger, true);
    }
    return super.once(name, listener);
  }
  addListener(name, listener) {
    if (name === "debug") {
      __privateSet(this, _hasDebugger, true);
    }
    return super.addListener(name, listener);
  }
  off(name, listener) {
    __privateSet(this, _hasDebugger, this.listenerCount("debug") > 0);
    return super.off(name, listener);
  }
  removeListener(name, listener) {
    __privateSet(this, _hasDebugger, this.listenerCount("debug") > 0);
    return super.removeListener(name, listener);
  }
  removeAllListeners(name) {
    __privateSet(this, _hasDebugger, this.listenerCount("debug") > 0);
    return super.removeAllListeners(name);
  }
  emit(name, ...args) {
    if (this.requiredEvents.includes(name) && !this.eventNames().includes(name)) {
      console.error(...args);
      Util.warn(
        `No event listener found for event "${String(name)}". Events ${this.requiredEvents.map((m) => `"${String(m)}"`).join(", ")} must have event listeners.`,
        "UnhandledEventsWarning"
      );
      return false;
    }
    return super.emit(name, ...args);
  }
  get hasDebugger() {
    return __privateGet(this, _hasDebugger);
  }
};
_hasDebugger = new WeakMap();
__name(_PlayerEventsEmitter, "PlayerEventsEmitter");
var PlayerEventsEmitter = _PlayerEventsEmitter;

// src/extractors/BaseExtractor.ts
var _BaseExtractor = class _BaseExtractor {
  /**
   * Extractor constructor
   * @param context Context that instantiated this extractor
   * @param options Initialization options for this extractor
   */
  constructor(context, options = {}) {
    this.context = context;
    this.options = options;
    /**
     * Priority of this extractor. Higher value means higher priority (will be executed first).
     */
    this.priority = 1;
    /**
     * A list of query protocols that this extractor supports.
     */
    this.protocols = [];
    /**
     * Handle bridge query creation
     * @param track The track to build query for
     */
    this.createBridgeQuery = /* @__PURE__ */ __name((track) => `${track.title} by ${track.author} official audio`, "createBridgeQuery");
  }
  /**
   * Identifier of this extractor
   */
  get identifier() {
    return this.constructor.identifier;
  }
  /**
   * Reconfigures this extractor
   * @param options The new options to apply
   */
  async reconfigure(options) {
    this.options = options;
    await this.deactivate();
    await this.activate();
  }
  /**
   * This method will be executed when this extractor is activated
   */
  async activate() {
    return;
  }
  /**
   * This method will be executed when this extractor is deactivated
   */
  async deactivate() {
    return;
  }
  /**
   * Validate incoming query
   * @param query The query to validate
   */
  async validate(query, type) {
    return false;
  }
  /**
   * Stream the given track
   * @param info The track to stream
   */
  async stream(info) {
    throw Exceptions.ERR_NOT_IMPLEMENTED(`${this.constructor.name}.stream()`);
  }
  /**
   * Handle the given query
   * @param query The query to handle
   */
  async handle(query, context) {
    throw Exceptions.ERR_NOT_IMPLEMENTED(`${this.constructor.name}.handle()`);
  }
  /**
   * Get related tracks for the given track
   * @param track The track source
   */
  async getRelatedTracks(track, history) {
    throw Exceptions.ERR_NOT_IMPLEMENTED(`${this.constructor.name}.getRelatedTracks()`);
  }
  /**
   * A stream middleware to handle streams before passing it to the player
   * @param stream The incoming stream
   * @param next The next function
   */
  handlePostStream(stream, next) {
    return next(null, stream);
  }
  /**
   * Dispatch an event to the player
   * @param event The event to dispatch
   * @param args The data to dispatch
   */
  emit(event, ...args) {
    return this.context.player.emit(event, ...args);
  }
  /**
   * Create extractor response
   * @param playlist The playlist
   * @param tracks The track array
   */
  createResponse(playlist, tracks = playlist?.tracks || []) {
    return { playlist: playlist || null, tracks };
  }
  /**
   * Write debug message
   * @param message The debug message
   */
  debug(message) {
    return this.context.player.debug(message);
  }
  /**
   * IP rotator instance, if available
   */
  get routePlanner() {
    return this.context.player.routePlanner;
  }
  /**
   * A flag to indicate `Demuxable` stream support for `opus`/`ogg/opus`/`webm/opus` formats.
   */
  get supportsDemux() {
    return !!this.context.player.options.skipFFmpeg;
  }
  /**
   * Handle stream extraction for another extractor
   * @param track The track to bridge
   * @param sourceExtractor The source extractor
   */
  async bridge(track, sourceExtractor) {
    return null;
  }
};
__name(_BaseExtractor, "BaseExtractor");
/**
 * Identifier for this extractor
 */
_BaseExtractor.identifier = "com.discord-player.extractor";
var BaseExtractor = _BaseExtractor;

// src/extractors/ExtractorExecutionContext.ts
var import_utils2 = require("@discord-player/utils");
var knownExtractorKeys = [
  "SpotifyExtractor",
  "AppleMusicExtractor",
  "SoundCloudExtractor",
  "YouTubeExtractor",
  "VimeoExtractor",
  "ReverbnationExtractor",
  "AttachmentExtractor"
];
var knownExtractorLib = "@discord-player/extractor";
var _ExtractorExecutionContext = class _ExtractorExecutionContext extends PlayerEventsEmitter {
  constructor(player) {
    super(["error"]);
    this.player = player;
    /**
     * The extractors store
     */
    this.store = new import_utils2.Collection();
  }
  /**
   * Load default extractors from `@discord-player/extractor`
   */
  async loadDefault(filter, options) {
    const mod = await Util.import(knownExtractorLib);
    if (mod.error)
      return { success: false, error: mod.error };
    (filter ? knownExtractorKeys.filter(filter) : knownExtractorKeys).forEach((key) => {
      if (!mod.module[key])
        return;
      this.register(mod.module[key], options?.[key] || {});
    });
    return { success: true, error: null };
  }
  /**
   * Validate if the given extractor is registered
   * @param identifier The extractor identifier
   */
  isRegistered(identifier) {
    return this.store.has(identifier);
  }
  /**
   * The size of registered extractors
   */
  get size() {
    return this.store.size;
  }
  /**
   * Get single extractor
   * @param identifier The extractor to get
   */
  get(identifier) {
    return this.store.get(identifier);
  }
  /**
   * Register single extractor
   * @param _extractor The extractor to register
   * @param options Options supplied to the extractor
   */
  async register(_extractor, options) {
    if (typeof _extractor.identifier !== "string" || this.store.has(_extractor.identifier))
      return null;
    const extractor = new _extractor(this, options);
    if (this.player.options.bridgeProvider)
      options.bridgeProvider ?? (options.bridgeProvider = this.player.options.bridgeProvider);
    try {
      this.store.set(_extractor.identifier, extractor);
      if (this.player.hasDebugger)
        this.player.debug(`${_extractor.identifier} extractor loaded!`);
      this.emit("registered", this, extractor);
      await extractor.activate();
      if (this.player.hasDebugger)
        this.player.debug(`${_extractor.identifier} extractor activated!`);
      this.emit("activate", this, extractor);
      return extractor;
    } catch (e) {
      this.store.delete(_extractor.identifier);
      if (this.player.hasDebugger)
        this.player.debug(`${_extractor.identifier} extractor failed to activate! Error: ${e}`);
      this.emit("error", this, extractor, e);
      return null;
    }
  }
  /**
   * Unregister single extractor
   * @param _extractor The extractor to unregister
   */
  async unregister(_extractor) {
    const extractor = typeof _extractor === "string" ? this.store.get(_extractor) : this.store.find((r) => r === _extractor);
    if (!extractor)
      return;
    try {
      const key = extractor.identifier || this.store.findKey((e) => e === extractor);
      this.store.delete(key);
      if (this.player.hasDebugger)
        this.player.debug(`${extractor.identifier} extractor disabled!`);
      this.emit("unregistered", this, extractor);
      await extractor.deactivate();
      if (this.player.hasDebugger)
        this.player.debug(`${extractor.identifier} extractor deactivated!`);
      this.emit("deactivate", this, extractor);
    } catch (e) {
      if (this.player.hasDebugger)
        this.player.debug(`${extractor.identifier} extractor failed to deactivate!`);
      this.emit("error", this, extractor, e);
    }
  }
  /**
   * Unregister all extractors
   */
  async unregisterAll() {
    try {
      await Promise.all(this.store.map((e) => this.unregister(e)));
    } catch {
    }
  }
  /**
   * Run all the extractors
   * @param fn The runner function
   * @param filterBlocked Filter blocked extractors
   */
  async run(fn, filterBlocked = true) {
    const blocked = this.player.options.blockExtractors ?? [];
    if (!this.store.size) {
      Util.warn("Skipping extractors execution since zero extractors were registered", "NoExtractors");
      return;
    }
    const extractors = this.store.sort((a, b) => b.priority - a.priority);
    let err = null, lastExt = null;
    for (const ext of extractors.values()) {
      if (filterBlocked && blocked.some((e) => e === ext.identifier))
        continue;
      if (this.player.hasDebugger)
        this.player.debug(`Executing extractor ${ext.identifier}...`);
      const result = await fn(ext).then(
        (res) => {
          return res;
        },
        (e) => {
          if (this.player.hasDebugger)
            this.player.debug(`Extractor ${ext.identifier} failed with error: ${e}`);
          return TypeUtil.isError(e) ? e : new Error(`${e}`);
        }
      );
      lastExt = ext;
      if (result && !TypeUtil.isError(result)) {
        if (this.player.hasDebugger)
          this.player.debug(`Extractor ${ext.identifier} executed successfully!`);
        return {
          extractor: ext,
          error: null,
          result
        };
      } else if (TypeUtil.isError(result)) {
        err = result;
      }
    }
    if (err)
      return {
        extractor: lastExt,
        error: err,
        result: false
      };
  }
  /**
   * Request bridge for a track
   * @param track The track to request bridge for
   * @param sourceExtractor The source extractor of the track
   */
  async requestBridge(track, sourceExtractor = track.extractor) {
    return this.run(async (ext) => {
      if (sourceExtractor && ext.identifier === sourceExtractor.identifier)
        return false;
      const result = await ext.bridge(track, sourceExtractor);
      if (!result)
        return false;
      return result;
    });
  }
  /**
   * Request bridge from the specified extractor
   * @param track The track to request bridge for
   * @param sourceExtractor The source extractor of the track
   * @param targetExtractor The target extractor to bridge to
   */
  async requestBridgeFrom(track, sourceExtractor, targetExtractor) {
    const target2 = this.resolve(targetExtractor);
    if (!target2)
      return null;
    return target2.bridge(track, sourceExtractor);
  }
  /**
   * Check if extractor is disabled
   */
  isDisabled(identifier) {
    return this.player.options.blockExtractors?.includes(identifier) ?? false;
  }
  /**
   * Check if extractor is enabled
   */
  isEnabled(identifier) {
    return !this.isDisabled(identifier);
  }
  /**
   * Resolve extractor identifier
   */
  resolveId(resolvable) {
    return typeof resolvable === "string" ? resolvable : resolvable.identifier;
  }
  /**
   * Resolve extractor
   */
  resolve(resolvable) {
    return typeof resolvable === "string" ? this.get(resolvable) : resolvable;
  }
};
__name(_ExtractorExecutionContext, "ExtractorExecutionContext");
var ExtractorExecutionContext = _ExtractorExecutionContext;

// src/queue/GuildNodeManager.ts
var import_utils7 = require("@discord-player/utils");

// src/queue/GuildQueue.ts
var import_discord3 = require("discord.js");
var import_utils5 = require("@discord-player/utils");

// src/VoiceInterface/StreamDispatcher.ts
var import_discord_voip2 = require("discord-voip");
var import_utils3 = require("@discord-player/utils");
var import_equalizer = require("@discord-player/equalizer");

// src/queue/VoiceReceiverNode.ts
var import_node_stream = require("stream");
var import_discord_voip = require("discord-voip");
var prism = __toESM(require("prism-media"));
var _VoiceReceiverNode = class _VoiceReceiverNode {
  constructor(dispatcher) {
    this.dispatcher = dispatcher;
  }
  createRawTrack(stream, data = {}) {
    data.title ?? (data.title = `Recording ${Date.now()}`);
    return new Track(this.dispatcher.queue.player, {
      author: "Discord",
      description: data.title,
      title: data.title,
      duration: data.duration || "0:00",
      views: 0,
      requestedBy: data.requestedBy,
      thumbnail: data.thumbnail || "https://cdn.discordapp.com/embed/avatars/0.png",
      url: data.url || "https://discord.com",
      source: "arbitrary",
      raw: {
        engine: stream,
        source: "arbitrary"
      }
    });
  }
  /**
   * Merge multiple streams together
   * @param streams The array of streams to merge
   */
  mergeRecordings(streams) {
    throw Exceptions.ERR_NOT_IMPLEMENTED(`${this.constructor.name}.mergeRecordings()`);
  }
  /**
   * Record a user in voice channel
   * @param user The user to record
   * @param options Recording options
   */
  recordUser(user, options = {
    end: import_discord_voip.EndBehaviorType.AfterSilence,
    mode: "pcm",
    silenceDuration: 1e3
  }) {
    const _user = this.dispatcher.queue.player.client.users.resolveId(user);
    const passThrough = new import_node_stream.PassThrough();
    const receiver = this.dispatcher.voiceConnection.receiver;
    if (!receiver)
      throw Exceptions.ERR_NO_RECEIVER();
    receiver.speaking.on("start", (userId) => {
      if (userId === _user) {
        const receiveStream = receiver.subscribe(_user, {
          end: {
            behavior: options.end || import_discord_voip.EndBehaviorType.AfterSilence,
            duration: options.silenceDuration ?? 1e3
          }
        });
        setImmediate(async () => {
          if (options.mode === "pcm") {
            const pcm = receiveStream.pipe(
              // @ts-ignore
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              new (prism.opus || prism.default.opus).Decoder({
                channels: 2,
                frameSize: 960,
                rate: 48e3
              })
            );
            return pcm.pipe(passThrough);
          } else {
            return receiveStream.pipe(passThrough);
          }
        }).unref();
      }
    });
    return passThrough;
  }
};
__name(_VoiceReceiverNode, "VoiceReceiverNode");
var VoiceReceiverNode = _VoiceReceiverNode;

// src/VoiceInterface/StreamDispatcher.ts
var _StreamDispatcher = class _StreamDispatcher extends import_utils3.EventEmitter {
  /**
   * Creates new connection object
   * @param {VoiceConnection} connection The connection
   * @param {VoiceChannel|StageChannel} channel The connected channel
   * @private
   */
  constructor(connection, channel, queue, connectionTimeout = 2e4, audioPlayer) {
    super();
    this.queue = queue;
    this.connectionTimeout = connectionTimeout;
    this.receiver = new VoiceReceiverNode(this);
    this.dsp = new import_equalizer.FiltersChain();
    this.voiceConnection = connection;
    this.audioPlayer = audioPlayer || (0, import_discord_voip2.createAudioPlayer)({
      debug: this.queue.hasDebugger
    });
    this.channel = channel;
    this.voiceConnection.on("debug", (m) => void this.emit("debug", m));
    this.voiceConnection.on("error", (error) => void this.emit("error", error));
    this.audioPlayer.on("debug", (m) => void this.emit("debug", m));
    this.audioPlayer.on("error", (error) => void this.emit("error", error));
    this.dsp.onUpdate = () => {
      if (!this.dsp)
        return;
      if (this.dsp.filters?.filters)
        this.emit("dsp", this.dsp.filters?.filters);
      if (this.dsp.biquad?.filter)
        this.emit("biquad", this.dsp.biquad?.filter);
      if (this.dsp.equalizer)
        this.emit("eqBands", this.dsp.equalizer.getEQ());
      if (this.dsp.volume)
        this.emit("volume", this.dsp.volume.volume);
      if (this.dsp.resampler)
        this.emit("sampleRate", this.dsp.resampler.targetSampleRate);
    };
    this.dsp.onError = (e) => this.emit("error", e);
    this.voiceConnection.on(import_discord_voip2.VoiceConnectionStatus.Disconnected, async (oldState, newState) => {
      if (newState.reason === import_discord_voip2.VoiceConnectionDisconnectReason.Manual) {
        this.destroy();
        return;
      }
      if (newState.reason === import_discord_voip2.VoiceConnectionDisconnectReason.WebSocketClose && newState.closeCode === 4014) {
        try {
          await (0, import_discord_voip2.entersState)(this.voiceConnection, import_discord_voip2.VoiceConnectionStatus.Connecting, this.connectionTimeout);
        } catch {
          try {
            if (this.voiceConnection.state.status !== import_discord_voip2.VoiceConnectionStatus.Destroyed)
              this.destroy();
          } catch (err) {
            this.emit("error", err);
          }
        }
      } else if (this.voiceConnection.rejoinAttempts < 5) {
        await Util.wait((this.voiceConnection.rejoinAttempts + 1) * 5e3);
        this.voiceConnection.rejoin();
      } else {
        try {
          if (this.voiceConnection.state.status !== import_discord_voip2.VoiceConnectionStatus.Destroyed)
            this.destroy();
        } catch (err) {
          this.emit("error", err);
        }
      }
    }).on(import_discord_voip2.VoiceConnectionStatus.Destroyed, () => {
      this.end();
      this.queue.emit(GuildQueueEvent.connectionDestroyed, this.queue);
    });
    this.audioPlayer.on("stateChange", (oldState, newState) => {
      if (oldState.status !== import_discord_voip2.AudioPlayerStatus.Paused && newState.status === import_discord_voip2.AudioPlayerStatus.Paused) {
        this.queue.emit(GuildQueueEvent.playerPause, this.queue);
      }
      if (oldState.status === import_discord_voip2.AudioPlayerStatus.Paused && newState.status !== import_discord_voip2.AudioPlayerStatus.Paused) {
        this.queue.emit(GuildQueueEvent.playerResume, this.queue);
      }
      if (newState.status === import_discord_voip2.AudioPlayerStatus.Playing) {
        if (oldState.status === import_discord_voip2.AudioPlayerStatus.Idle || oldState.status === import_discord_voip2.AudioPlayerStatus.Buffering) {
          return this.emit("start", this.audioResource);
        }
      } else if (newState.status === import_discord_voip2.AudioPlayerStatus.Idle && oldState.status !== import_discord_voip2.AudioPlayerStatus.Idle) {
        this.emit("finish", this.audioResource);
        this.dsp.destroy();
        this.audioResource = null;
      }
    });
    this.voiceConnection.subscribe(this.audioPlayer);
  }
  /**
   * Check if the player has been paused manually
   */
  get paused() {
    return this.audioPlayer.state.status === import_discord_voip2.AudioPlayerStatus.Paused;
  }
  set paused(val) {
    val ? this.pause(true) : this.resume();
  }
  /**
   * Whether or not the player is currently paused automatically or manually.
   */
  isPaused() {
    return this.paused || this.audioPlayer.state.status === import_discord_voip2.AudioPlayerStatus.AutoPaused;
  }
  /**
   * Whether or not the player is currently buffering
   */
  isBuffering() {
    return this.audioPlayer.state.status === import_discord_voip2.AudioPlayerStatus.Buffering;
  }
  /**
   * Whether or not the player is currently playing
   */
  isPlaying() {
    return this.audioPlayer.state.status === import_discord_voip2.AudioPlayerStatus.Playing;
  }
  /**
   * Whether or not the player is currently idle
   */
  isIdle() {
    return this.audioPlayer.state.status === import_discord_voip2.AudioPlayerStatus.Idle;
  }
  /**
   * Whether or not the voice connection has been destroyed
   */
  isDestroyed() {
    return this.voiceConnection.state.status === import_discord_voip2.VoiceConnectionStatus.Destroyed;
  }
  /**
   * Whether or not the voice connection has been destroyed
   */
  isDisconnected() {
    return this.voiceConnection.state.status === import_discord_voip2.VoiceConnectionStatus.Disconnected;
  }
  /**
   * Whether or not the voice connection is ready to play
   */
  isReady() {
    return this.voiceConnection.state.status === import_discord_voip2.VoiceConnectionStatus.Ready;
  }
  /**
   * Whether or not the voice connection is signalling
   */
  isSignalling() {
    return this.voiceConnection.state.status === import_discord_voip2.VoiceConnectionStatus.Signalling;
  }
  /**
   * Whether or not the voice connection is connecting
   */
  isConnecting() {
    return this.voiceConnection.state.status === import_discord_voip2.VoiceConnectionStatus.Connecting;
  }
  /**
   * Creates stream
   * @param {Readable} src The stream source
   * @param {object} [ops] Options
   * @returns {AudioResource}
   */
  async createStream(src, ops) {
    if (!ops?.disableFilters && this.queue.hasDebugger)
      this.queue.debug("Initiating DSP filters pipeline...");
    const stream = !ops?.disableFilters ? this.dsp.create(src, {
      dsp: {
        filters: ops?.defaultFilters,
        disabled: ops?.disableFilters
      },
      biquad: ops?.biquadFilter ? {
        filter: ops.biquadFilter,
        disabled: ops?.disableBiquad
      } : void 0,
      resampler: {
        targetSampleRate: ops?.sampleRate,
        disabled: ops?.disableResampler
      },
      equalizer: {
        bandMultiplier: ops?.eq,
        disabled: ops?.disableEqualizer
      },
      volume: {
        volume: ops?.volume,
        disabled: ops?.disableVolume
      }
    }) : src;
    if (this.queue.hasDebugger)
      this.queue.debug("Executing onAfterCreateStream hook...");
    const postStream = await this.queue.onAfterCreateStream?.(stream, this.queue).catch(
      () => ({
        stream,
        type: ops?.type ?? import_discord_voip2.StreamType.Arbitrary
      })
    );
    if (this.queue.hasDebugger)
      this.queue.debug("Preparing AudioResource...");
    this.audioResource = (0, import_discord_voip2.createAudioResource)(postStream?.stream ?? stream, {
      inputType: postStream?.type ?? ops?.type ?? import_discord_voip2.StreamType.Arbitrary,
      metadata: ops?.data,
      // volume controls happen from AudioFilter DSP utility
      inlineVolume: false
    });
    return this.audioResource;
  }
  get resampler() {
    return this.dsp?.resampler;
  }
  get filters() {
    return this.dsp?.filters;
  }
  get biquad() {
    return this.dsp?.biquad || null;
  }
  get equalizer() {
    return this.dsp?.equalizer || null;
  }
  /**
   * The player status
   * @type {AudioPlayerStatus}
   */
  get status() {
    return this.audioPlayer.state.status;
  }
  /**
   * Disconnects from voice
   * @returns {void}
   */
  disconnect() {
    try {
      if (this.audioPlayer)
        this.audioPlayer.stop(true);
      if (this.voiceConnection.state.status !== import_discord_voip2.VoiceConnectionStatus.Destroyed)
        this.voiceConnection.destroy();
    } catch {
    }
  }
  /**
   * Destroys this dispatcher
   */
  destroy() {
    this.disconnect();
    this.audioPlayer.removeAllListeners();
    this.voiceConnection.removeAllListeners();
    this.dsp.destroy();
    this.audioResource = null;
    this.emit("destroyed");
  }
  /**
   * Stops the player
   * @returns {void}
   */
  end() {
    try {
      this.audioPlayer.stop();
      this.dsp.destroy();
    } catch {
    }
  }
  /**
   * Pauses the stream playback
   * @param {boolean} [interpolateSilence=false] If true, the player will play 5 packets of silence after pausing to prevent audio glitches.
   * @returns {boolean}
   */
  pause(interpolateSilence) {
    const success = this.audioPlayer.pause(interpolateSilence);
    return success;
  }
  /**
   * Resumes the stream playback
   * @returns {boolean}
   */
  resume() {
    const success = this.audioPlayer.unpause();
    return success;
  }
  /**
   * Play stream
   * @param {AudioResource<Track>} [resource=this.audioResource] The audio resource to play
   * @param {boolean} [opus=false] Whether or not to use opus
   * @returns {Promise<StreamDispatcher>}
   */
  async playStream(resource = this.audioResource) {
    if (!resource) {
      throw Exceptions.ERR_NO_AUDIO_RESOURCE();
    }
    if (resource.ended) {
      return void this.emit("finish", resource);
    }
    if (!this.audioResource)
      this.audioResource = resource;
    if (this.voiceConnection.state.status !== import_discord_voip2.VoiceConnectionStatus.Ready) {
      try {
        await (0, import_discord_voip2.entersState)(this.voiceConnection, import_discord_voip2.VoiceConnectionStatus.Ready, this.connectionTimeout);
      } catch (err) {
        return void this.emit("error", err);
      }
    }
    try {
      this.audioPlayer.play(resource);
    } catch (e) {
      this.emit("error", e);
    }
    return this;
  }
  /**
   * Sets playback volume
   * @param {number} value The volume amount
   * @returns {boolean}
   */
  setVolume(value) {
    if (!this.dsp.volume)
      return false;
    return this.dsp.volume.setVolume(value);
  }
  /**
   * The current volume
   * @type {number}
   */
  get volume() {
    if (!this.dsp.volume)
      return 100;
    return this.dsp.volume.volume;
  }
  /**
   * The playback time
   * @type {number}
   */
  get streamTime() {
    if (!this.audioResource)
      return 0;
    return this.audioResource.playbackDuration;
  }
};
__name(_StreamDispatcher, "StreamDispatcher");
var StreamDispatcher = _StreamDispatcher;

// src/queue/GuildQueue.ts
var import_discord_voip4 = require("discord-voip");

// src/queue/GuildQueueHistory.ts
var import_utils4 = require("@discord-player/utils");
var _GuildQueueHistory = class _GuildQueueHistory {
  constructor(queue) {
    this.queue = queue;
    this.tracks = new import_utils4.Queue("LIFO");
  }
  /**
   * Current track in the queue
   */
  get currentTrack() {
    return this.queue.dispatcher?.audioResource?.metadata || this.queue.__current;
  }
  /**
   * Next track in the queue
   */
  get nextTrack() {
    return this.queue.tracks.at(0) || null;
  }
  /**
   * Previous track in the queue
   */
  get previousTrack() {
    return this.tracks.at(0) || null;
  }
  /**
   * If history is disabled
   */
  get disabled() {
    return this.queue.options.disableHistory;
  }
  /**
   * Gets the size of the queue
   */
  get size() {
    return this.tracks.size;
  }
  getSize() {
    return this.size;
  }
  /**
   * If history is empty
   */
  isEmpty() {
    return this.tracks.size < 1;
  }
  /**
   * Add track to track history
   * @param track The track to add
   */
  push(track) {
    if (this.disabled)
      return false;
    this.tracks.add(track);
    this.resize();
    return true;
  }
  /**
   * Clear history
   */
  clear() {
    this.tracks.clear();
  }
  /**
   * Play the next track in the queue
   */
  async next() {
    const track = this.nextTrack;
    if (!track) {
      throw Exceptions.ERR_NO_RESULT("No next track in the queue");
    }
    this.queue.node.skip({
      reason: "HISTORY_NEXT_TRACK" /* HistoryNext */,
      description: "Skipped by GuildQueueHistory.next()"
    });
  }
  /**
   * Play the previous track in the queue
   */
  async previous(preserveCurrent = true) {
    const track = this.tracks.dispatch();
    if (!track) {
      throw Exceptions.ERR_NO_RESULT("No previous track in the queue");
    }
    const current = this.currentTrack;
    await this.queue.node.play(track, { queue: false });
    if (current && preserveCurrent)
      this.queue.node.insert(current, 0);
  }
  /**
   * Alias to [GuildQueueHistory].previous()
   */
  back(preserveCurrent = true) {
    return this.previous(preserveCurrent);
  }
  /**
   * Resize history store
   */
  resize() {
    if (!Number.isFinite(this.queue.maxHistorySize))
      return;
    if (this.tracks.store.length < this.queue.maxHistorySize)
      return;
    this.tracks.store.splice(this.queue.maxHistorySize);
  }
};
__name(_GuildQueueHistory, "GuildQueueHistory");
var GuildQueueHistory = _GuildQueueHistory;

// src/queue/GuildQueuePlayerNode.ts
var import_discord_voip3 = require("discord-voip");
var import_stream = require("stream");

// src/utils/QueryResolver.ts
var import_undici = require("undici");
var spotifySongRegex = /^https?:\/\/(?:embed\.|open\.)(?:spotify\.com\/)(intl-([a-z]|[A-Z])+\/)?(?:track\/|\?uri=spotify:track:)((\w|-){22})(\?si=.+)?$/;
var spotifyPlaylistRegex = /^https?:\/\/(?:embed\.|open\.)(?:spotify\.com\/)(intl-([a-z]|[A-Z])+\/)?(?:playlist\/|\?uri=spotify:playlist:)((\w|-){22})(\?si=.+)?$/;
var spotifyAlbumRegex = /^https?:\/\/(?:embed\.|open\.)(?:spotify\.com\/)(intl-([a-z]|[A-Z])+\/)?(?:album\/|\?uri=spotify:album:)((\w|-){22})(\?si=.+)?$/;
var vimeoRegex = /^(http|https)?:\/\/(www\.|player\.)?vimeo\.com\/(?:channels\/(?:\w+\/)?|groups\/([^/]*)\/videos\/|video\/|)(\d+)(?:|\/\?)$/;
var reverbnationRegex = /^https:\/\/(www.)?reverbnation.com\/(.+)\/song\/(.+)$/;
var attachmentRegex = /^https?:\/\/.+$/;
var appleMusicSongRegex = /^https?:\/\/music\.apple\.com\/.+?\/(song|album)\/.+?(\/.+?\?i=|\/)([0-9]+)$/;
var appleMusicPlaylistRegex = /^https?:\/\/music\.apple\.com\/.+?\/playlist\/.+\/pl\.(u-|pm-)?[a-zA-Z0-9]+$/;
var appleMusicAlbumRegex = /^https?:\/\/music\.apple\.com\/.+?\/album\/.+\/([0-9]+)$/;
var soundcloudTrackRegex = /^https?:\/\/(m.|www.)?soundcloud.com\/(\w|-)+\/(\w|-)+(.+)?$/;
var soundcloudPlaylistRegex = /^https?:\/\/(m.|www.)?soundcloud.com\/(\w|-)+\/sets\/(\w|-)+(.+)?$/;
var youtubePlaylistRegex = /^https?:\/\/(www.)?youtube.com\/playlist\?list=((PL|FL|UU|LL|RD|OL)[a-zA-Z0-9-_]{16,41})$/;
var youtubeVideoURLRegex = /^((?:https?:)?\/\/)?((?:www|m)\.)?((?:youtube\.com|youtu.be))(\/(?:[\w-]+\?v=|embed\/|v\/)?)([\w-]+)(\S+)?$/;
var youtubeVideoIdRegex = /^[a-zA-Z0-9-_]{11}$/;
var DomainsMap = {
  YouTube: ["youtube.com", "youtu.be", "music.youtube.com", "gaming.youtube.com", "www.youtube.com", "m.youtube.com"],
  Spotify: ["open.spotify.com", "embed.spotify.com"],
  Vimeo: ["vimeo.com", "player.vimeo.com"],
  ReverbNation: ["reverbnation.com"],
  SoundCloud: ["soundcloud.com"],
  AppleMusic: ["music.apple.com"]
};
var redirectDomains = /* @__PURE__ */ new Set([
  /^https?:\/\/spotify.link\/[A-Za-z0-9]+$/
]);
var _QueryResolver = class _QueryResolver {
  /**
   * Query resolver
   */
  constructor() {
  }
  // eslint-disable-line @typescript-eslint/no-empty-function
  static get regex() {
    return {
      spotifyAlbumRegex,
      spotifyPlaylistRegex,
      spotifySongRegex,
      vimeoRegex,
      reverbnationRegex,
      attachmentRegex,
      appleMusicAlbumRegex,
      appleMusicPlaylistRegex,
      appleMusicSongRegex,
      soundcloudTrackRegex,
      soundcloudPlaylistRegex,
      youtubePlaylistRegex
    };
  }
  /**
   * Pre-resolve redirect urls
   */
  static async preResolve(query, maxDepth = 5) {
    if (!TypeUtil.isString(query))
      throw Exceptions.ERR_INVALID_ARG_TYPE(query, "string", typeof query);
    for (const domain of redirectDomains) {
      if (domain.test(query)) {
        try {
          const res = await (0, import_undici.fetch)(query, {
            method: "GET",
            redirect: "follow"
          });
          if (!res.ok)
            break;
          if (/^https?:\/\/spotify.app.link\/(.+)$/.test(res.url)) {
            const body = await res.text();
            const target2 = body.split("https://open.spotify.com/track/")[1].split("?si=")[0];
            if (!target2)
              break;
            return `https://open.spotify.com/track/${target2}`;
          }
          return maxDepth < 1 ? res.url : this.preResolve(res.url, maxDepth - 1);
        } catch {
          break;
        }
      }
    }
    return query;
  }
  /**
   * Resolves the given search query
   * @param {string} query The query
   */
  static resolve(query, fallbackSearchEngine = QueryType.AUTO_SEARCH) {
    if (!TypeUtil.isString(query))
      throw Exceptions.ERR_INVALID_ARG_TYPE(query, "string", typeof query);
    if (!query.length)
      throw Exceptions.ERR_INFO_REQUIRED("query", String(query));
    const resolver = /* @__PURE__ */ __name((type, query2) => ({ type, query: query2 }), "resolver");
    try {
      const url = new URL(query);
      if (DomainsMap.YouTube.includes(url.host)) {
        query = query.replace(/(m(usic)?|gaming)\./, "").trim();
        const playlistId = url.searchParams.get("list");
        const videoId = url.searchParams.get("v");
        if (playlistId) {
          if (videoId && playlistId.startsWith("RD"))
            return resolver(QueryType.YOUTUBE_PLAYLIST, `https://www.youtube.com/watch?v=${videoId}&list=${playlistId}`);
          return resolver(QueryType.YOUTUBE_PLAYLIST, `https://www.youtube.com/playlist?list=${playlistId}`);
        }
        if (_QueryResolver.validateId(query) || _QueryResolver.validateURL(query))
          return resolver(QueryType.YOUTUBE_VIDEO, query);
        return resolver(fallbackSearchEngine, query);
      } else if (DomainsMap.Spotify.includes(url.host)) {
        query = query.replace(/intl-([a-zA-Z]+)\//, "");
        if (spotifyPlaylistRegex.test(query))
          return resolver(QueryType.SPOTIFY_PLAYLIST, query);
        if (spotifyAlbumRegex.test(query))
          return resolver(QueryType.SPOTIFY_ALBUM, query);
        if (spotifySongRegex.test(query))
          return resolver(QueryType.SPOTIFY_SONG, query);
        return resolver(fallbackSearchEngine, query);
      } else if (DomainsMap.Vimeo.includes(url.host)) {
        if (vimeoRegex.test(query))
          return resolver(QueryType.VIMEO, query);
        return resolver(fallbackSearchEngine, query);
      } else if (DomainsMap.ReverbNation.includes(url.host)) {
        if (reverbnationRegex.test(query))
          return resolver(QueryType.REVERBNATION, query);
        return resolver(fallbackSearchEngine, query);
      } else if (DomainsMap.SoundCloud.includes(url.host)) {
        if (soundcloudPlaylistRegex.test(query))
          return resolver(QueryType.SOUNDCLOUD_PLAYLIST, query);
        if (soundcloudTrackRegex.test(query))
          return resolver(QueryType.SOUNDCLOUD_TRACK, query);
        return resolver(fallbackSearchEngine, query);
      } else if (DomainsMap.AppleMusic.includes(url.host)) {
        if (appleMusicAlbumRegex.test(query))
          return resolver(QueryType.APPLE_MUSIC_ALBUM, query);
        if (appleMusicPlaylistRegex.test(query))
          return resolver(QueryType.APPLE_MUSIC_PLAYLIST, query);
        if (appleMusicSongRegex.test(query))
          return resolver(QueryType.APPLE_MUSIC_SONG, query);
        return resolver(fallbackSearchEngine, query);
      } else {
        return resolver(QueryType.ARBITRARY, query);
      }
    } catch {
      return resolver(fallbackSearchEngine, query);
    }
  }
  /**
   * Parses vimeo id from url
   * @param {string} query The query
   * @returns {string}
   */
  static getVimeoID(query) {
    return _QueryResolver.resolve(query).type === QueryType.VIMEO ? query.split("/").filter(Boolean).pop() : null;
  }
  static validateId(q) {
    return youtubeVideoIdRegex.test(q);
  }
  static validateURL(q) {
    return youtubeVideoURLRegex.test(q);
  }
};
__name(_QueryResolver, "QueryResolver");
var QueryResolver = _QueryResolver;

// src/queue/GuildQueuePlayerNode.ts
var import_promises2 = require("timers/promises");

// src/utils/AsyncQueue.ts
var import_discord2 = require("discord.js");
var _AsyncQueue = class _AsyncQueue {
  constructor() {
    /**
     * The queued entries
     */
    this.entries = [];
  }
  /**
   * Clear entries queue
   * @param consume Whether or not to consume all entries before clearing
   */
  clear(consume = false) {
    if (consume) {
      this.entries.forEach((entry) => entry.consume());
    }
    this.entries = [];
  }
  /**
   * The total number of entries in this queue. Returns `0` if no entries are available.
   */
  get size() {
    return this.entries.length;
  }
  /**
   * Acquire an entry.
   *
   * @example // lock the queue
   * const entry = asyncQueue.acquire();
   * // wait until previous task is completed
   * await entry.getTask();
   * // do something expensive
   * await performSomethingExpensive();
   * // make sure to release the lock once done
   * asyncQueue.release();
   *
   */
  acquire(options) {
    const entry = new AsyncQueueEntry(this, options);
    if (this.exceptionHandler)
      entry.getTask().catch(this.exceptionHandler);
    if (this.entries.length === 0) {
      this.entries.push(entry);
      entry.consume();
      return entry;
    }
    this.entries.push(entry);
    return entry;
  }
  /**
   * Release the current acquisition and move to next entry.
   */
  release() {
    if (!this.entries.length)
      return;
    this.entries.shift();
    this.entries[0]?.consume();
  }
  /**
   * Cancel all entries
   */
  cancelAll() {
    this.entries.forEach((entry) => entry.cancel());
  }
  /**
   * Remove the given entry from the queue
   * @param entry The entry to remove
   */
  removeEntry(entry) {
    const entryIdx = this.entries.indexOf(entry);
    if (entryIdx !== -1) {
      this.entries.splice(entryIdx, 1);
      return true;
    }
    return false;
  }
};
__name(_AsyncQueue, "AsyncQueue");
var AsyncQueue = _AsyncQueue;
var _AsyncQueueEntry = class _AsyncQueueEntry {
  constructor(queue, options) {
    this.queue = queue;
    this.options = options;
    this.id = import_discord2.SnowflakeUtil.generate().toString();
    this.signal = null;
    this.onAbort = null;
    this.promise = new Promise((resolve, reject) => {
      this.resolve = resolve;
      this.reject = reject;
    });
    if (this.options?.signal) {
      this.setAbortSignal(this.options.signal);
    }
  }
  setAbortSignal(signal) {
    if (signal.aborted)
      return;
    this.signal = signal;
    this.onAbort = () => {
      this.queue.removeEntry(this);
      this.cancel();
    };
    this.signal.addEventListener("abort", this.onAbort);
  }
  consume() {
    this.cleanup();
    this.resolve();
  }
  release() {
    this.consume();
    this.queue.release();
  }
  cancel() {
    this.cleanup();
    this.reject(new Error("Cancelled"));
  }
  cleanup() {
    if (this.onAbort)
      this.signal?.removeEventListener("abort", this.onAbort);
    this.signal = null;
    this.onAbort = null;
  }
  getTask() {
    return this.promise;
  }
};
__name(_AsyncQueueEntry, "AsyncQueueEntry");
var AsyncQueueEntry = _AsyncQueueEntry;

// src/queue/GuildQueuePlayerNode.ts
var prism2 = __toESM(require("prism-media"));
var import_opus = require("@discord-player/opus");
var FFMPEG_SRATE_REGEX = /asetrate=\d+\*(\d(\.\d)?)/;
var _progress, _hasFFmpegOptimization, _throw, throw_fn, _performPlay, performPlay_fn, _createGenericStream, createGenericStream_fn, _createFFmpegStream, createFFmpegStream_fn;
var _GuildQueuePlayerNode = class _GuildQueuePlayerNode {
  constructor(queue) {
    this.queue = queue;
    __privateAdd(this, _throw);
    __privateAdd(this, _performPlay);
    __privateAdd(this, _createGenericStream);
    __privateAdd(this, _createFFmpegStream);
    __privateAdd(this, _progress, 0);
    __privateAdd(this, _hasFFmpegOptimization, false);
    this.tasksQueue = new AsyncQueue();
    __privateSet(this, _hasFFmpegOptimization, /libopus: (yes|true)/.test(this.queue.player.scanDeps()));
  }
  /**
   * If the player is currently in idle mode
   */
  isIdle() {
    return !!this.queue.dispatcher?.isIdle();
  }
  /**
   * If the player is currently buffering the track
   */
  isBuffering() {
    return !!this.queue.dispatcher?.isBuffering();
  }
  /**
   * If the player is currently playing a track
   */
  isPlaying() {
    return !!this.queue.dispatcher?.isPlaying();
  }
  /**
   * If the player is currently paused
   */
  isPaused() {
    return !!this.queue.dispatcher?.isPaused();
  }
  /**
   * Reset progress history
   */
  resetProgress() {
    __privateSet(this, _progress, 0);
  }
  /**
   * Set player progress
   */
  setProgress(progress) {
    __privateSet(this, _progress, progress);
  }
  /**
   * The stream time for current session
   */
  get streamTime() {
    return this.queue.dispatcher?.streamTime ?? 0;
  }
  /**
   * Current playback duration with history included
   */
  get playbackTime() {
    const dur = __privateGet(this, _progress) + this.streamTime;
    return dur;
  }
  /**
   * Get duration multiplier
   */
  getDurationMultiplier() {
    const srateFilters = this.queue.filters.ffmpeg.toArray().filter((ff) => FFMPEG_SRATE_REGEX.test(ff));
    const multipliers = srateFilters.map((m) => {
      return parseFloat(FFMPEG_SRATE_REGEX.exec(m)?.[1]);
    }).filter((f) => !isNaN(f));
    return !multipliers.length ? 1 : multipliers.reduce((accumulator, current) => current + accumulator);
  }
  /**
   * Estimated progress of the player
   */
  get estimatedPlaybackTime() {
    const dur = this.playbackTime;
    return Math.round(this.getDurationMultiplier() * dur);
  }
  /**
   * Estimated total duration of the player
   */
  get estimatedDuration() {
    const dur = this.totalDuration;
    return Math.round(dur / this.getDurationMultiplier());
  }
  /**
   * Total duration of the current audio track
   */
  get totalDuration() {
    const prefersBridgedMetadata = this.queue.options.preferBridgedMetadata;
    const track = this.queue.currentTrack;
    if (prefersBridgedMetadata && track?.metadata != null && typeof track.metadata === "object" && "bridge" in track.metadata && track.metadata.bridge != null) {
      const duration = track.metadata?.bridge.duration;
      if (TypeUtil.isNumber(duration))
        return duration;
    }
    return track?.durationMS ?? 0;
  }
  /**
   * Get stream progress
   * @param ignoreFilters Ignore filters
   */
  getTimestamp(ignoreFilters = false) {
    if (!this.queue.currentTrack)
      return null;
    const current = ignoreFilters ? this.playbackTime : this.estimatedPlaybackTime;
    const total = ignoreFilters ? this.totalDuration : this.estimatedDuration;
    return {
      current: {
        label: Util.buildTimeCode(Util.parseMS(current)),
        value: current
      },
      total: {
        label: Util.buildTimeCode(Util.parseMS(total)),
        value: total
      },
      progress: Math.round(current / total * 100)
    };
  }
  /**
   * Create progress bar for current progress
   * @param options Progress bar options
   */
  createProgressBar(options) {
    const timestamp = this.getTimestamp();
    if (!timestamp)
      return null;
    const { indicator = "\u{1F518}", leftChar = "\u25AC", rightChar = "\u25AC", length = 15, timecodes = true, separator = "\u2503" } = options || {};
    if (isNaN(length) || length < 0 || !Number.isFinite(length)) {
      throw Exceptions.ERR_OUT_OF_RANGE("[PlayerProgressBarOptions.length]", String(length), "0", "Finite Number");
    }
    const index = Math.round(timestamp.current.value / timestamp.total.value * length);
    if (index >= 1 && index <= length) {
      const bar = leftChar.repeat(index - 1).split("");
      bar.push(indicator);
      bar.push(rightChar.repeat(length - index));
      if (timecodes) {
        return `${timestamp.current.label} ${separator} ${bar.join("")} ${separator} ${timestamp.total.label}`;
      } else {
        return `${bar.join("")}`;
      }
    } else {
      if (timecodes) {
        return `${timestamp.current.label} ${separator} ${indicator}${rightChar.repeat(length - 1)} ${separator} ${timestamp.total.label}`;
      } else {
        return `${indicator}${rightChar.repeat(length - 1)}`;
      }
    }
  }
  /**
   * Seek the player
   * @param duration The duration to seek to
   */
  async seek(duration) {
    if (!this.queue.currentTrack)
      return false;
    if (duration === this.estimatedPlaybackTime)
      return true;
    if (duration > this.totalDuration) {
      return this.skip({
        reason: "SEEK_OVER_THRESHOLD" /* SEEK_OVER_THRESHOLD */,
        description: Exceptions.ERR_OUT_OF_RANGE("[duration]", String(duration), "0", String(this.totalDuration)).message
      });
    }
    if (duration < 0)
      duration = 0;
    return await this.queue.filters.triggerReplay(duration);
  }
  /**
   * Current volume
   */
  get volume() {
    return this.queue.dispatcher?.volume ?? 100;
  }
  /**
   * Set volume
   * @param vol Volume amount to set
   */
  setVolume(vol) {
    if (!this.queue.dispatcher)
      return false;
    const res = this.queue.dispatcher.setVolume(vol);
    if (res)
      this.queue.filters._lastFiltersCache.volume = vol;
    return res;
  }
  /**
   * Set bit rate
   * @param rate The bit rate to set
   */
  setBitrate(rate) {
    this.queue.dispatcher?.audioResource?.encoder?.setBitrate(rate === "auto" ? this.queue.channel?.bitrate ?? 64e3 : rate);
  }
  /**
   * Set paused state
   * @param state The state
   */
  setPaused(state) {
    if (state)
      return this.queue.dispatcher?.pause(true) || false;
    return this.queue.dispatcher?.resume() || false;
  }
  /**
   * Pause the playback
   */
  pause() {
    return this.setPaused(true);
  }
  /**
   * Resume the playback
   */
  resume() {
    return this.setPaused(false);
  }
  /**
   * Skip current track
   */
  skip(options) {
    if (!this.queue.dispatcher)
      return false;
    const track = this.queue.currentTrack;
    if (!track)
      return false;
    this.queue.setTransitioning(false);
    this.queue.dispatcher.end();
    const { reason, description } = options || {
      reason: "MANUAL" /* Manual */,
      description: "The track was skipped manually"
    };
    this.queue.emit(GuildQueueEvent.playerSkip, this.queue, track, reason, description);
    return true;
  }
  /**
   * Remove the given track from queue
   * @param track The track to remove
   * @param emitEvent Whether or not to emit the event @defaultValue true
   */
  remove(track, emitEvent = true) {
    const foundTrack = this.queue.tracks.find((t, idx) => {
      if (track instanceof Track || typeof track === "string") {
        return (typeof track === "string" ? track : track.id) === t.id;
      }
      if (typeof track === "string")
        return track === t.id;
      return idx === track;
    });
    if (!foundTrack)
      return null;
    this.queue.tracks.removeOne((t) => t.id === foundTrack.id);
    if (emitEvent)
      this.queue.emit(GuildQueueEvent.audioTrackRemove, this.queue, foundTrack);
    return foundTrack;
  }
  /**
   * Jump to specific track on the queue
   * @param track The track to jump to without removing other tracks
   */
  jump(track) {
    const removed = this.remove(track, false);
    if (!removed)
      return false;
    this.queue.tracks.store.unshift(removed);
    return this.skip({
      reason: "JUMPED_TO_ANOTHER_TRACK" /* Jump */,
      description: "The track was jumped to manually"
    });
  }
  /**
   * Get track position
   * @param track The track
   */
  getTrackPosition(track) {
    return this.queue.tracks.toArray().findIndex((t, idx) => {
      if (track instanceof Track || typeof track === "string") {
        return (typeof track === "string" ? track : track.id) === t.id;
      }
      if (typeof track === "string")
        return track === t.id;
      return idx === track;
    });
  }
  /**
   * Skip to the given track, removing others on the way
   * @param track The track to skip to
   */
  skipTo(track) {
    const idx = this.getTrackPosition(track);
    if (idx < 0)
      return false;
    const removed = this.remove(idx);
    if (!removed)
      return false;
    const toRemove = this.queue.tracks.store.filter((_, i) => i <= idx);
    this.queue.tracks.store.splice(0, idx, removed);
    this.queue.emit(GuildQueueEvent.audioTracksRemove, this.queue, toRemove);
    return this.skip({
      reason: "SKIP_TO_ANOTHER_TRACK" /* SkipTo */,
      description: "The player was skipped to another track manually"
    });
  }
  /**
   * Insert a track on the given position in queue
   * @param track The track to insert
   * @param index The position to insert to, defaults to 0.
   */
  insert(track, index = 0) {
    if (!(track instanceof Track))
      throw Exceptions.ERR_INVALID_ARG_TYPE("track value", "instance of Track", String(track));
    VALIDATE_QUEUE_CAP(this.queue, track);
    this.queue.tracks.store.splice(index, 0, track);
    if (!this.queue.options.noEmitInsert)
      this.queue.emit(GuildQueueEvent.audioTrackAdd, this.queue, track);
  }
  /**
   * Moves a track in the queue
   * @param from The track to move
   * @param to The position to move to
   */
  move(from, to) {
    const removed = this.remove(from);
    if (!removed) {
      throw Exceptions.ERR_NO_RESULT("invalid track to move");
    }
    this.insert(removed, to);
  }
  /**
   * Copy a track in the queue
   * @param from The track to clone
   * @param to The position to clone at
   */
  copy(from, to) {
    const src = this.queue.tracks.at(this.getTrackPosition(from));
    if (!src) {
      throw Exceptions.ERR_NO_RESULT("invalid track to copy");
    }
    this.insert(src, to);
  }
  /**
   * Swap two tracks in the queue
   * @param first The first track to swap
   * @param second The second track to swap
   */
  swap(first, second) {
    const src = this.getTrackPosition(first);
    if (src < 0)
      throw Exceptions.ERR_NO_RESULT("invalid src track to swap");
    const dest = this.getTrackPosition(second);
    if (dest < 0)
      throw Exceptions.ERR_NO_RESULT("invalid dest track to swap");
    const srcT = this.queue.tracks.store[src];
    const destT = this.queue.tracks.store[dest];
    this.queue.tracks.store[src] = destT;
    this.queue.tracks.store[dest] = srcT;
  }
  /**
   * Stop the playback
   * @param force Whether or not to forcefully stop the playback
   */
  stop(force = false) {
    this.queue.tracks.clear();
    this.queue.history.clear();
    if (!this.queue.dispatcher)
      return false;
    this.queue.dispatcher.end();
    if (force) {
      this.queue.dispatcher.destroy();
      return true;
    }
    if (this.queue.options.leaveOnStop) {
      const tm = setTimeout(() => {
        if (this.isPlaying() || this.queue.tracks.size)
          return clearTimeout(tm);
        this.queue.dispatcher?.destroy();
      }, this.queue.options.leaveOnStopCooldown).unref();
    }
    return true;
  }
  /**
   * Play raw audio resource
   * @param resource The audio resource to play
   */
  async playRaw(resource) {
    await this.queue.dispatcher?.playStream(resource);
  }
  /**
   * Play the given track
   * @param res The track to play
   * @param options Options for playing the track
   */
  async play(res, options) {
    if (!this.queue.dispatcher?.voiceConnection) {
      throw Exceptions.ERR_NO_VOICE_CONNECTION();
    }
    if (this.queue.hasDebugger)
      this.queue.debug(`Received play request from guild ${this.queue.guild.name} (ID: ${this.queue.guild.id})`);
    options = Object.assign(
      {},
      {
        queue: this.queue.currentTrack != null,
        transitionMode: false,
        seek: 0
      },
      options
    );
    if (res && options.queue) {
      if (this.queue.hasDebugger)
        this.queue.debug("Requested option requires to queue the track, adding the given track to queue instead...");
      return this.queue.addTrack(res);
    }
    const track = res || this.queue.tracks.dispatch();
    if (!track) {
      const error = Exceptions.ERR_NO_RESULT("Play request received but track was not provided");
      this.queue.emit(GuildQueueEvent.error, this.queue, error);
      return;
    }
    if (this.queue.hasDebugger)
      this.queue.debug("Requested option requires to play the track, initializing...");
    try {
      if (this.queue.hasDebugger)
        this.queue.debug(`Initiating stream extraction process...`);
      const src = track.raw?.source || track.source;
      const qt = track.queryType || (src === "spotify" ? "spotifySong" : src === "apple_music" ? "appleMusicSong" : src);
      if (this.queue.hasDebugger)
        this.queue.debug(`Executing onBeforeCreateStream hook (QueryType: ${qt})...`);
      const streamSrc = {
        error: null,
        stream: null
      };
      await this.queue.onBeforeCreateStream?.(track, qt || "arbitrary", this.queue).then(
        (s) => {
          if (s) {
            streamSrc.stream = s;
          }
        },
        (e) => streamSrc.error = e
      );
      if (!streamSrc.stream && streamSrc.error)
        return __privateMethod(this, _throw, throw_fn).call(this, track, streamSrc.error);
      if (!streamSrc.stream) {
        if (this.queue.hasDebugger)
          this.queue.debug("Failed to get stream from onBeforeCreateStream!");
        await __privateMethod(this, _createGenericStream, createGenericStream_fn).call(this, track).then(
          (r) => {
            if (r?.result) {
              streamSrc.stream = r.result;
              return;
            }
            if (r?.error) {
              streamSrc.error = r.error;
              return;
            }
            streamSrc.stream = streamSrc.error = null;
          },
          (e) => streamSrc.error = e
        );
      }
      if (!streamSrc.stream)
        return __privateMethod(this, _throw, throw_fn).call(this, track, streamSrc.error);
      if (typeof options.seek === "number" && options.seek >= 0) {
        __privateSet(this, _progress, options.seek);
      } else {
        __privateSet(this, _progress, 0);
      }
      const cookies = track.raw?.source === "youtube" ? this.queue.player.options.ytdlOptions?.requestOptions?.headers?.cookie : void 0;
      const trackStreamConfig = {
        dispatcherConfig: {
          disableBiquad: this.queue.options.disableBiquad,
          disableEqualizer: this.queue.options.disableEqualizer,
          disableVolume: this.queue.options.disableVolume,
          disableFilters: this.queue.options.disableFilterer,
          disableResampler: this.queue.options.disableResampler,
          sampleRate: typeof this.queue.options.resampler === "number" && this.queue.options.resampler > 0 ? this.queue.options.resampler : void 0,
          biquadFilter: this.queue.filters._lastFiltersCache.biquad || void 0,
          eq: this.queue.filters._lastFiltersCache.equalizer,
          defaultFilters: this.queue.filters._lastFiltersCache.filters,
          volume: this.queue.filters._lastFiltersCache.volume,
          data: track,
          type: import_discord_voip3.StreamType.Raw,
          skipFFmpeg: this.queue.player.options.skipFFmpeg
        },
        playerConfig: options
      };
      let resolver = Util.noop;
      const donePromise = new Promise((resolve) => resolver = resolve);
      const success = this.queue.emit(GuildQueueEvent.willPlayTrack, this.queue, track, trackStreamConfig, resolver);
      if (!success)
        resolver();
      if (this.queue.hasDebugger)
        this.queue.debug("Waiting for willPlayTrack event to resolve...");
      await donePromise;
      const daspDisabled = [
        trackStreamConfig.dispatcherConfig.disableBiquad,
        trackStreamConfig.dispatcherConfig.disableEqualizer,
        trackStreamConfig.dispatcherConfig.disableFilters,
        trackStreamConfig.dispatcherConfig.disableResampler,
        trackStreamConfig.dispatcherConfig.disableVolume
      ].every((e) => !!e === true);
      const needsFilters = !!trackStreamConfig.playerConfig.seek || !!this.queue.filters.ffmpeg.args.length;
      const shouldSkipFFmpeg = !!trackStreamConfig.dispatcherConfig.skipFFmpeg && !needsFilters;
      let finalStream;
      const demuxable = /* @__PURE__ */ __name((fmt) => [import_discord_voip3.StreamType.Opus, import_discord_voip3.StreamType.WebmOpus, import_discord_voip3.StreamType.OggOpus].includes(fmt), "demuxable");
      if (shouldSkipFFmpeg && !(streamSrc.stream instanceof import_stream.Readable) && typeof streamSrc.stream !== "string" && demuxable(streamSrc.stream.$fmt)) {
        const { $fmt, stream } = streamSrc.stream;
        const shouldPCM = !daspDisabled;
        if (this.queue.hasDebugger)
          this.queue.debug(`skipFFmpeg is set to true and stream is demuxable, creating stream with type ${shouldPCM ? "pcm" : "opus"}`);
        const opusStream = $fmt === import_discord_voip3.StreamType.Opus ? stream : $fmt === import_discord_voip3.StreamType.OggOpus ? (
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          stream.pipe(new prism2.opus.OggDemuxer())
        ) : (
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          stream.pipe(new prism2.opus.WebmDemuxer())
        );
        if (shouldPCM) {
          finalStream = opusStream.pipe(
            new import_opus.OpusDecoder({
              channels: 2,
              frameSize: 960,
              rate: 48e3
            })
          );
          trackStreamConfig.dispatcherConfig.type = import_discord_voip3.StreamType.Raw;
        } else {
          finalStream = opusStream;
          trackStreamConfig.dispatcherConfig.type = import_discord_voip3.StreamType.Opus;
        }
      } else {
        finalStream = __privateMethod(this, _createFFmpegStream, createFFmpegStream_fn).call(this, streamSrc.stream instanceof import_stream.Readable || typeof streamSrc.stream === "string" ? streamSrc.stream : streamSrc.stream.stream, track, options.seek ?? 0, cookies);
        trackStreamConfig.dispatcherConfig.type = import_discord_voip3.StreamType.Raw;
      }
      if (options.transitionMode) {
        if (this.queue.hasDebugger)
          this.queue.debug(`Transition mode detected, player will wait for buffering timeout to expire (Timeout: ${this.queue.options.bufferingTimeout}ms)`);
        await (0, import_promises2.setTimeout)(this.queue.options.bufferingTimeout);
        if (this.queue.hasDebugger)
          this.queue.debug("Buffering timeout has expired!");
      }
      if (this.queue.hasDebugger)
        this.queue.debug(`Preparing final stream config: ${JSON.stringify(trackStreamConfig, null, 2)}`);
      const dispatcher = this.queue.dispatcher;
      if (!dispatcher) {
        if (this.queue.hasDebugger) {
          this.queue.debug("Dispatcher is not available, this is most likely due to the queue being deleted in the middle of operation. Cancelling the stream...");
        }
        finalStream.destroy();
      } else {
        const resource = await dispatcher.createStream(finalStream, trackStreamConfig.dispatcherConfig);
        this.queue.setTransitioning(!!options.transitionMode);
        await __privateMethod(this, _performPlay, performPlay_fn).call(this, resource);
      }
    } catch (e) {
      if (this.queue.hasDebugger)
        this.queue.debug(`Failed to initialize audio player: ${e}`);
      throw e;
    }
  }
};
_progress = new WeakMap();
_hasFFmpegOptimization = new WeakMap();
_throw = new WeakSet();
throw_fn = /* @__PURE__ */ __name(function(track, error) {
  const streamDefinitelyFailedMyDearT_TPleaseTrustMeItsNotMyFault = Exceptions.ERR_NO_RESULT(`Could not extract stream for this track${error ? `

${error.stack || error}` : ""}`);
  this.queue.emit(GuildQueueEvent.playerSkip, this.queue, track, "ERR_NO_STREAM" /* NoStream */, streamDefinitelyFailedMyDearT_TPleaseTrustMeItsNotMyFault.message);
  this.queue.emit(GuildQueueEvent.playerError, this.queue, streamDefinitelyFailedMyDearT_TPleaseTrustMeItsNotMyFault, track);
  const nextTrack = this.queue.tracks.dispatch();
  if (nextTrack)
    this.play(nextTrack, { queue: false });
  return;
}, "#throw");
_performPlay = new WeakSet();
performPlay_fn = /* @__PURE__ */ __name(async function(resource) {
  if (!this.queue.dispatcher) {
    if (this.queue.hasDebugger) {
      this.queue.debug("Dispatcher is not available, this is most likely due to the queue being deleted in the middle of operation. Cancelling the stream...");
    }
  } else {
    if (this.queue.hasDebugger)
      this.queue.debug("Initializing audio player...");
    await this.queue.dispatcher.playStream(resource);
    if (this.queue.hasDebugger)
      this.queue.debug("Dispatching audio...");
  }
}, "#performPlay");
_createGenericStream = new WeakSet();
createGenericStream_fn = /* @__PURE__ */ __name(async function(track) {
  if (this.queue.hasDebugger)
    this.queue.debug(`Attempting to extract stream for Track { title: ${track.title}, url: ${track.url} } using registered extractors`);
  const streamInfo = await this.queue.player.extractors.run(async (extractor) => {
    if (this.queue.player.options.blockStreamFrom?.some((ext) => ext === extractor.identifier))
      return false;
    const canStream = await extractor.validate(track.url, track.queryType || QueryResolver.resolve(track.url).type);
    if (!canStream)
      return false;
    return await extractor.stream(track);
  }, false);
  if (!streamInfo || !streamInfo.result) {
    if (this.queue.hasDebugger)
      this.queue.debug(`Failed to extract stream for Track { title: ${track.title}, url: ${track.url} } using registered extractors`);
    return streamInfo || null;
  }
  if (this.queue.hasDebugger)
    this.queue.debug(`Stream extraction was successful for Track { title: ${track.title}, url: ${track.url} } (Extractor: ${streamInfo.extractor?.identifier || "N/A"})`);
  return streamInfo;
}, "#createGenericStream");
_createFFmpegStream = new WeakSet();
createFFmpegStream_fn = /* @__PURE__ */ __name(function(stream, track, seek = 0, cookies, opus3) {
  const ffmpegStream = this.queue.filters.ffmpeg.createStream(stream, {
    encoderArgs: this.queue.filters.ffmpeg.args,
    seek: seek / 1e3,
    fmt: opus3 ? "opus" : "s16le",
    cookies,
    useLegacyFFmpeg: !!this.queue.player.options.useLegacyFFmpeg
  }).on("error", (err) => {
    const m = `${err}`.toLowerCase();
    if (this.queue.hasDebugger)
      this.queue.debug(`Stream closed due to an error from FFmpeg stream: ${err.stack || err.message || err}`);
    if (m.includes("premature close") || m.includes("epipe"))
      return;
    this.queue.emit(GuildQueueEvent.playerError, this.queue, err, track);
  });
  return ffmpegStream;
}, "#createFFmpegStream");
__name(_GuildQueuePlayerNode, "GuildQueuePlayerNode");
var GuildQueuePlayerNode = _GuildQueuePlayerNode;

// src/queue/GuildQueueAudioFilters.ts
var import_equalizer2 = require("@discord-player/equalizer");

// src/utils/FFmpegStream.ts
var prism3 = __toESM(require("prism-media"));
var import_ffmpeg = require("@discord-player/ffmpeg");
var getFFmpegProvider = /* @__PURE__ */ __name((legacy = false) => legacy ? prism3.default?.FFmpeg || prism3.FFmpeg : import_ffmpeg.FFmpeg, "getFFmpegProvider");
var resolveArgs = /* @__PURE__ */ __name((config) => {
  return Object.entries(config).reduce((acc, [key, value]) => {
    if (value == null)
      return acc;
    acc.push(`-${key}`, String(value));
    return acc;
  }, []);
}, "resolveArgs");
function FFMPEG_ARGS_STRING(stream, fmt, cookies) {
  const args = resolveArgs({
    reconnect: 1,
    reconnect_streamed: 1,
    reconnect_delay_max: 5,
    i: stream,
    analyzeduration: 0,
    loglevel: 0,
    ar: 48e3,
    ac: 2,
    f: `${typeof fmt === "string" ? fmt : "s16le"}`,
    acodec: fmt === "opus" ? "libopus" : null,
    cookies: typeof cookies === "string" ? !cookies.includes(" ") ? cookies : `"${cookies}"` : null
  });
  return args;
}
__name(FFMPEG_ARGS_STRING, "FFMPEG_ARGS_STRING");
function FFMPEG_ARGS_PIPED(fmt) {
  const args = resolveArgs({
    analyzeduration: 0,
    loglevel: 0,
    ar: 48e3,
    ac: 2,
    f: `${typeof fmt === "string" ? fmt : "s16le"}`,
    acodec: fmt === "opus" ? "libopus" : null
  });
  return args;
}
__name(FFMPEG_ARGS_PIPED, "FFMPEG_ARGS_PIPED");
function createFFmpegStream(stream, options) {
  if (options?.skip && typeof stream !== "string")
    return stream;
  options ?? (options = {});
  const args = typeof stream === "string" ? FFMPEG_ARGS_STRING(stream, options.fmt, options.cookies) : FFMPEG_ARGS_PIPED(options.fmt);
  if (!Number.isNaN(options.seek))
    args.unshift("-ss", String(options.seek));
  if (Array.isArray(options.encoderArgs))
    args.push(...options.encoderArgs);
  const FFMPEG = getFFmpegProvider(!!options.useLegacyFFmpeg);
  const transcoder = new FFMPEG({ shell: false, args });
  transcoder.on("close", () => transcoder.destroy());
  if (typeof stream !== "string") {
    stream.on("error", () => transcoder.destroy());
    stream.pipe(transcoder);
  }
  return transcoder;
}
__name(createFFmpegStream, "createFFmpegStream");

// src/queue/GuildQueueAudioFilters.ts
var makeBands = /* @__PURE__ */ __name((arr) => {
  return Array.from(
    {
      length: import_equalizer2.Equalizer.BAND_COUNT
    },
    (_, i) => ({
      band: i,
      gain: arr[i] ? arr[i] / 30 : 0
    })
  );
}, "makeBands");
var EqualizerConfigurationPreset = Object.freeze({
  Flat: makeBands([]),
  Classical: makeBands([-111022e-20, -111022e-20, -111022e-20, -111022e-20, -111022e-20, -111022e-20, -7.2, -7.2, -7.2, -9.6]),
  Club: makeBands([-111022e-20, -111022e-20, 8, 5.6, 5.6, 5.6, 3.2, -111022e-20, -111022e-20, -111022e-20]),
  Dance: makeBands([9.6, 7.2, 2.4, -111022e-20, -111022e-20, -5.6, -7.2, -7.2, -111022e-20, -111022e-20]),
  FullBass: makeBands([-8, 9.6, 9.6, 5.6, 1.6, -4, -8, -10.4, -11.2, -11.2]),
  FullBassTreble: makeBands([7.2, 5.6, -111022e-20, -7.2, -4.8, 1.6, 8, 11.2, 12, 12]),
  FullTreble: makeBands([-9.6, -9.6, -9.6, -4, 2.4, 11.2, 16, 16, 16, 16.8]),
  Headphones: makeBands([4.8, 11.2, 5.6, -3.2, -2.4, 1.6, 4.8, 9.6, 12.8, 14.4]),
  LargeHall: makeBands([10.4, 10.4, 5.6, 5.6, -111022e-20, -4.8, -4.8, -4.8, -111022e-20, -111022e-20]),
  Live: makeBands([-4.8, -111022e-20, 4, 5.6, 5.6, 5.6, 4, 2.4, 2.4, 2.4]),
  Party: makeBands([7.2, 7.2, -111022e-20, -111022e-20, -111022e-20, -111022e-20, -111022e-20, -111022e-20, 7.2, 7.2]),
  Pop: makeBands([-1.6, 4.8, 7.2, 8, 5.6, -111022e-20, -2.4, -2.4, -1.6, -1.6]),
  Reggae: makeBands([-111022e-20, -111022e-20, -111022e-20, -5.6, -111022e-20, 6.4, 6.4, -111022e-20, -111022e-20, -111022e-20]),
  Rock: makeBands([8, 4.8, -5.6, -8, -3.2, 4, 8.8, 11.2, 11.2, 11.2]),
  Ska: makeBands([-2.4, -4.8, -4, -111022e-20, 4, 5.6, 8.8, 9.6, 11.2, 9.6]),
  Soft: makeBands([4.8, 1.6, -111022e-20, -2.4, -111022e-20, 4, 8, 9.6, 11.2, 12]),
  SoftRock: makeBands([4, 4, 2.4, -111022e-20, -4, -5.6, -3.2, -111022e-20, 2.4, 8.8]),
  Techno: makeBands([8, 5.6, -111022e-20, -5.6, -4.8, -111022e-20, 8, 9.6, 9.6, 8.8])
});
var _ffmpegFilters, _inputArgs, _setFilters, setFilters_fn;
var _FFmpegFilterer = class _FFmpegFilterer {
  constructor(af) {
    this.af = af;
    __privateAdd(this, _setFilters);
    __privateAdd(this, _ffmpegFilters, []);
    __privateAdd(this, _inputArgs, []);
  }
  /**
   * Indicates whether ffmpeg may be skipped
   */
  get skippable() {
    return !!this.af.queue.player.options.skipFFmpeg;
  }
  /**
   * Set input args for FFmpeg
   */
  setInputArgs(args) {
    if (!args.every((arg) => typeof arg === "string"))
      throw Exceptions.ERR_INVALID_ARG_TYPE("args", "Array<string>", "invalid item(s)");
    __privateSet(this, _inputArgs, args);
  }
  /**
   * Get input args
   */
  get inputArgs() {
    return __privateGet(this, _inputArgs);
  }
  /**
   * Get encoder args
   */
  get encoderArgs() {
    if (!this.filters.length)
      return [];
    return ["-af", this.toString()];
  }
  /**
   * Get final ffmpeg args
   */
  get args() {
    return this.inputArgs.concat(this.encoderArgs);
  }
  /**
   * Create ffmpeg stream
   * @param source The stream source
   * @param options The stream options
   */
  createStream(source, options) {
    if (__privateGet(this, _inputArgs).length)
      options.encoderArgs = [...__privateGet(this, _inputArgs), ...options.encoderArgs || []];
    return createFFmpegStream(source, options);
  }
  /**
   * Set ffmpeg filters
   * @param filters The filters
   */
  setFilters(filters) {
    let _filters = [];
    if (typeof filters === "boolean") {
      _filters = !filters ? [] : Object.keys(AudioFilters.filters);
    } else if (Array.isArray(filters)) {
      _filters = filters;
    } else {
      _filters = Object.entries(filters).filter((res) => res[1] === true).map((m) => m[0]);
    }
    return __privateMethod(this, _setFilters, setFilters_fn).call(this, _filters);
  }
  /**
   * Currently active ffmpeg filters
   */
  get filters() {
    return __privateGet(this, _ffmpegFilters);
  }
  set filters(filters) {
    this.setFilters(filters);
  }
  /**
   * Toggle given ffmpeg filter(s)
   * @param filters The filter(s)
   */
  toggle(filters) {
    if (!Array.isArray(filters))
      filters = [filters];
    const fresh = [];
    filters.forEach((f) => {
      if (this.filters.includes(f))
        return;
      fresh.push(f);
    });
    return __privateMethod(this, _setFilters, setFilters_fn).call(this, __privateGet(this, _ffmpegFilters).filter((r) => !filters.includes(r)).concat(fresh));
  }
  /**
   * Set default filters
   * @param ff Filters list
   */
  setDefaults(ff) {
    __privateSet(this, _ffmpegFilters, ff);
  }
  /**
   * Get list of enabled filters
   */
  getFiltersEnabled() {
    return __privateGet(this, _ffmpegFilters);
  }
  /**
   * Get list of disabled filters
   */
  getFiltersDisabled() {
    return AudioFilters.names.filter((f) => !__privateGet(this, _ffmpegFilters).includes(f));
  }
  /**
   * Check if the given filter is enabled
   * @param filter The filter
   */
  isEnabled(filter) {
    return __privateGet(this, _ffmpegFilters).includes(filter);
  }
  /**
   * Check if the given filter is disabled
   * @param filter The filter
   */
  isDisabled(filter) {
    return !this.isEnabled(filter);
  }
  /**
   * Check if the given filter is a valid filter
   * @param filter The filter to test
   */
  isValidFilter(filter) {
    return AudioFilters.has(filter);
  }
  /**
   * Convert current filters to array
   */
  toArray() {
    return this.filters.map((filter) => AudioFilters.get(filter));
  }
  /**
   * Convert current filters to JSON object
   */
  toJSON() {
    const obj = {};
    this.filters.forEach((filter) => obj[filter] = AudioFilters.get(filter));
    return obj;
  }
  /**
   * String representation of current filters
   */
  toString() {
    return AudioFilters.create(this.filters);
  }
};
_ffmpegFilters = new WeakMap();
_inputArgs = new WeakMap();
_setFilters = new WeakSet();
setFilters_fn = /* @__PURE__ */ __name(function(filters) {
  const { queue } = this.af;
  if (filters.every((f) => __privateGet(this, _ffmpegFilters).includes(f)) && __privateGet(this, _ffmpegFilters).every((f) => filters.includes(f)))
    return Promise.resolve(false);
  const ignoreFilters = this.filters.some((ff) => ff === "nightcore" || ff === "vaporwave") && !filters.some((ff) => ff === "nightcore" || ff === "vaporwave");
  const seekTime = queue.node.getTimestamp(ignoreFilters)?.current.value || 0;
  const prev = __privateGet(this, _ffmpegFilters).slice();
  __privateSet(this, _ffmpegFilters, [...new Set(filters)]);
  return this.af.triggerReplay(seekTime).then((t) => {
    queue.emit(GuildQueueEvent.audioFiltersUpdate, queue, prev, __privateGet(this, _ffmpegFilters).slice());
    return t;
  });
}, "#setFilters");
__name(_FFmpegFilterer, "FFmpegFilterer");
var FFmpegFilterer = _FFmpegFilterer;
var _GuildQueueAudioFilters = class _GuildQueueAudioFilters {
  constructor(queue) {
    this.queue = queue;
    this.graph = new AFilterGraph(this);
    this.ffmpeg = new FFmpegFilterer(this);
    this.equalizerPresets = EqualizerConfigurationPreset;
    this._lastFiltersCache = {
      biquad: null,
      equalizer: [],
      filters: [],
      volume: 100,
      sampleRate: -1
    };
    if (typeof this.queue.options.volume === "number") {
      this._lastFiltersCache.volume = this.queue.options.volume;
    }
  }
  // TODO: enable this in the future
  // public get ffmpeg(): FFmpegFilterer<Meta> | null {
  //     if (this.queue.player.options.skipFFmpeg) {
  //         if (this.#ffmpeg) this.#ffmpeg = null;
  //         return null;
  //     }
  //     if (!this.#ffmpeg) {
  //         this.#ffmpeg = new FFmpegFilterer<Meta>(this);
  //     }
  //     return this.#ffmpeg;
  // }
  /**
   * Volume transformer
   */
  get volume() {
    return this.queue.dispatcher?.dsp?.volume || null;
  }
  /**
   * 15 Band Equalizer
   */
  get equalizer() {
    return this.queue.dispatcher?.equalizer || null;
  }
  /**
   * Digital biquad filters
   */
  get biquad() {
    return this.queue.dispatcher?.biquad || null;
  }
  /**
   * DSP filters
   */
  get filters() {
    return this.queue.dispatcher?.filters || null;
  }
  /**
   * Audio resampler
   */
  get resampler() {
    return this.queue.dispatcher?.resampler || null;
  }
  /**
   * Replay current track in transition mode
   * @param seek The duration to seek to
   */
  async triggerReplay(seek = 0) {
    if (!this.queue.currentTrack)
      return false;
    const entry = this.queue.node.tasksQueue.acquire();
    try {
      await entry.getTask();
      await this.queue.node.play(this.queue.currentTrack, {
        queue: false,
        seek,
        transitionMode: true
      });
      this.queue.node.tasksQueue.release();
      return true;
    } catch {
      this.queue.node.tasksQueue.release();
      return false;
    }
  }
};
__name(_GuildQueueAudioFilters, "GuildQueueAudioFilters");
var GuildQueueAudioFilters = _GuildQueueAudioFilters;
var _AFilterGraph = class _AFilterGraph {
  constructor(af) {
    this.af = af;
  }
  get ffmpeg() {
    return this.af.ffmpeg?.filters ?? [];
  }
  get equalizer() {
    return (this.af.equalizer?.bandMultipliers || []).map((m, i) => ({
      band: i,
      gain: m
    }));
  }
  get biquad() {
    return this.af.biquad?.getFilterName() || null;
  }
  get filters() {
    return this.af.filters?.filters || [];
  }
  get volume() {
    return this.af.volume;
  }
  get resampler() {
    return this.af.resampler;
  }
  dump() {
    return {
      ffmpeg: this.ffmpeg,
      equalizer: this.equalizer,
      biquad: this.biquad,
      filters: this.filters,
      sampleRate: this.resampler?.targetSampleRate || this.resampler?.sampleRate || 48e3,
      volume: this.volume?.volume ?? 100
    };
  }
};
__name(_AFilterGraph, "AFilterGraph");
var AFilterGraph = _AFilterGraph;

// src/queue/GuildQueue.ts
var import_timers = require("timers");

// src/queue/GuildQueueStatistics.ts
var _GuildQueueStatistics = class _GuildQueueStatistics {
  constructor(queue) {
    this.queue = queue;
  }
  /**
   * Generate statistics of this queue
   */
  generate() {
    return {
      latency: {
        eventLoop: this.queue.player.eventLoopLag,
        voiceConnection: this.queue.ping
      },
      status: {
        buffering: this.queue.node.isBuffering(),
        playing: this.queue.node.isPlaying(),
        paused: this.queue.node.isPaused(),
        idle: this.queue.node.isIdle()
      },
      tracksCount: this.queue.tracks.size,
      historySize: this.queue.history.tracks.size,
      extractors: this.queue.player.extractors.size,
      listeners: this.queue.guild.members.me?.voice.channel?.members.filter((m) => !m.user.bot).size || 0,
      memoryUsage: process.memoryUsage(),
      versions: {
        node: process.version,
        player: "6.7.1"
      }
    };
  }
};
__name(_GuildQueueStatistics, "GuildQueueStatistics");
var GuildQueueStatistics = _GuildQueueStatistics;

// src/queue/SyncedLyricsProvider.ts
var timestampPattern = /\[(\d{2}):(\d{2})\.(\d{2})\]/;
var _loop, _callback, _onUnsubscribe, _createLoop, createLoop_fn;
var _SyncedLyricsProvider = class _SyncedLyricsProvider {
  constructor(queue, raw) {
    this.queue = queue;
    this.raw = raw;
    __privateAdd(this, _createLoop);
    __privateAdd(this, _loop, null);
    __privateAdd(this, _callback, null);
    __privateAdd(this, _onUnsubscribe, null);
    this.interval = 100;
    this.lyrics = /* @__PURE__ */ new Map();
    if (raw?.syncedLyrics)
      this.load(raw?.syncedLyrics);
  }
  isSubscribed() {
    return __privateGet(this, _callback) !== null;
  }
  load(lyrics) {
    if (!lyrics)
      throw Exceptions.ERR_NOT_EXISTING("syncedLyrics");
    this.lyrics.clear();
    this.unsubscribe();
    const lines = lyrics.split("\n");
    for (const line of lines) {
      const match = line.match(timestampPattern);
      if (match) {
        const [, minutes, seconds, milliseconds] = match;
        const timestamp = parseInt(minutes) * 60 * 1e3 + parseInt(seconds) * 1e3 + parseInt(milliseconds);
        this.lyrics.set(timestamp, line.replace(timestampPattern, "").trim());
      }
    }
  }
  /**
   * Returns the lyrics at a specific time or at the closest time (±2 seconds)
   * @param time The time in milliseconds
   */
  at(time) {
    const lowestTime = this.lyrics.keys().next().value;
    if (lowestTime == null || time < lowestTime)
      return null;
    if (this.lyrics.has(time))
      return { line: this.lyrics.get(time), timestamp: time };
    const keys = Array.from(this.lyrics.keys());
    const closest = keys.reduce((a, b) => Math.abs(b - time) < Math.abs(a - time) ? b : a);
    if (closest > time)
      return null;
    if (Math.abs(closest - time) > 2e3)
      return null;
    const line = this.lyrics.get(closest);
    if (!line)
      return null;
    return { timestamp: closest, line };
  }
  /**
   * Callback for the lyrics change.
   * @param callback The callback function
   */
  onChange(callback) {
    __privateSet(this, _callback, callback);
  }
  /**
   * Callback to detect when the provider is unsubscribed.
   * @param callback The callback function
   */
  onUnsubscribe(callback) {
    __privateSet(this, _onUnsubscribe, callback);
  }
  /**
   * Unsubscribes from the queue.
   */
  unsubscribe() {
    if (__privateGet(this, _loop))
      clearInterval(__privateGet(this, _loop));
    if (__privateGet(this, _onUnsubscribe))
      __privateGet(this, _onUnsubscribe).call(this);
    __privateSet(this, _callback, null);
    __privateSet(this, _onUnsubscribe, null);
    __privateSet(this, _loop, null);
  }
  /**
   * Subscribes to the queue to monitor the current time.
   * @returns The unsubscribe function
   */
  subscribe() {
    if (__privateGet(this, _loop))
      return () => this.unsubscribe();
    __privateMethod(this, _createLoop, createLoop_fn).call(this);
    return () => this.unsubscribe();
  }
  /**
   * Pauses the lyrics provider.
   */
  pause() {
    const hasLoop = __privateGet(this, _loop) !== null;
    if (hasLoop) {
      clearInterval(__privateGet(this, _loop));
      __privateSet(this, _loop, null);
    }
    return hasLoop;
  }
  /**
   * Resumes the lyrics provider.
   */
  resume() {
    const hasLoop = __privateGet(this, _loop) !== null;
    if (!hasLoop)
      __privateMethod(this, _createLoop, createLoop_fn).call(this);
    return !hasLoop;
  }
};
_loop = new WeakMap();
_callback = new WeakMap();
_onUnsubscribe = new WeakMap();
_createLoop = new WeakSet();
createLoop_fn = /* @__PURE__ */ __name(function() {
  if (!__privateGet(this, _callback))
    return;
  if (__privateGet(this, _loop))
    clearInterval(__privateGet(this, _loop));
  let lastValue = null;
  __privateSet(this, _loop, setInterval(() => {
    if (this.queue.deleted)
      return this.unsubscribe();
    if (!__privateGet(this, _callback) || !this.queue.isPlaying())
      return;
    const time = this.queue.node.getTimestamp();
    if (!time)
      return;
    const lyrics = this.at(time.current.value);
    if (!lyrics)
      return;
    if (lastValue !== null && lyrics.line === lastValue.line && lyrics.timestamp === lastValue.timestamp)
      return;
    lastValue = lyrics;
    __privateGet(this, _callback).call(this, lyrics.line, lyrics.timestamp);
  }, this.interval).unref());
}, "#createLoop");
__name(_SyncedLyricsProvider, "SyncedLyricsProvider");
var SyncedLyricsProvider = _SyncedLyricsProvider;

// src/queue/GuildQueue.ts
var GuildQueueEvent = {
  /**
   * Emitted when audio track is added to the queue
   */
  audioTrackAdd: "audioTrackAdd",
  AudioTrackAdd: "audioTrackAdd",
  /**
   * Emitted when audio tracks were added to the queue
   */
  audioTracksAdd: "audioTracksAdd",
  AudioTracksAdd: "audioTracksAdd",
  /**
   * Emitted when audio track is removed from the queue
   */
  audioTrackRemove: "audioTrackRemove",
  AudioTrackRemove: "audioTrackRemove",
  /**
   * Emitted when audio tracks are removed from the queue
   */
  audioTracksRemove: "audioTracksRemove",
  AudioTracksRemove: "audioTracksRemove",
  /**
   * Emitted when a connection is created
   */
  connection: "connection",
  Connection: "connection",
  /**
   * Emitted when a voice connection is destroyed
   */
  connectionDestroyed: "connectionDestroyed",
  ConnectionDestroyed: "connectionDestroyed",
  /**
   * Emitted when the bot is disconnected from the channel
   */
  disconnect: "disconnect",
  Disconnect: "disconnect",
  /**
   * Emitted when the queue sends a debug info
   */
  debug: "debug",
  Debug: "debug",
  /**
   * Emitted when the queue encounters error
   */
  error: "error",
  Error: "error",
  /**
   * Emitted when the voice channel is empty
   */
  emptyChannel: "emptyChannel",
  EmptyChannel: "emptyChannel",
  /**
   * Emitted when the queue is empty
   */
  emptyQueue: "emptyQueue",
  EmptyQueue: "emptyQueue",
  /**
   * Emitted when the audio player starts streaming audio track
   */
  playerStart: "playerStart",
  PlayerStart: "playerStart",
  /**
   * Emitted when the audio player errors while streaming audio track
   */
  playerError: "playerError",
  PlayerError: "playerError",
  /**
   * Emitted when the audio player finishes streaming audio track
   */
  playerFinish: "playerFinish",
  PlayerFinish: "playerFinish",
  /**
   * Emitted when the audio player skips current track
   */
  playerSkip: "playerSkip",
  PlayerSkip: "playerSkip",
  /**
   * Emitted when the audio player is triggered
   */
  playerTrigger: "playerTrigger",
  PlayerTrigger: "playerTrigger",
  /**
   * Emitted when the voice state is updated. Consuming this event may disable default voice state update handler if `Player.isVoiceStateHandlerLocked()` returns `false`.
   */
  voiceStateUpdate: "voiceStateUpdate",
  VoiceStateUpdate: "voiceStateUpdate",
  /**
   * Emitted when volume is updated
   */
  volumeChange: "volumeChange",
  VolumeChange: "volumeChange",
  /**
   * Emitted when player is paused
   */
  playerPause: "playerPause",
  PlayerPause: "playerPause",
  /**
   * Emitted when player is resumed
   */
  playerResume: "playerResume",
  PlayerResume: "playerResume",
  /**
   * Biquad Filters Update
   */
  biquadFiltersUpdate: "biquadFiltersUpdate",
  BiquadFiltersUpdate: "biquadFiltersUpdate",
  /**
   * Equalizer Update
   */
  equalizerUpdate: "equalizerUpdate",
  EqualizerUpdate: "equalizerUpdate",
  /**
   * DSP update
   */
  dspUpdate: "dspUpdate",
  DSPUpdate: "dspUpdate",
  /**
   * Audio Filters Update
   */
  audioFiltersUpdate: "audioFiltersUpdate",
  AudioFiltersUpdate: "audioFiltersUpdate",
  /**
   * Audio player will play next track
   */
  willPlayTrack: "willPlayTrack",
  WillPlayTrack: "willPlayTrack",
  /**
   * Emitted when a voice channel is repopulated
   */
  channelPopulate: "channelPopulate",
  ChannelPopulate: "channelPopulate",
  /**
   * Emitted when a queue is successfully created
   */
  queueCreate: "queueCreate",
  QueueCreate: "queueCreate",
  /**
   * Emitted when a queue is deleted
   */
  queueDelete: "queueDelete",
  QueueDelete: "queueDelete",
  /**
   * Emitted when a queue is trying to add similar track for autoplay
   */
  willAutoPlay: "willAutoPlay",
  WillAutoPlay: "willAutoPlay"
};
var TrackSkipReason = /* @__PURE__ */ ((TrackSkipReason2) => {
  TrackSkipReason2["NoStream"] = "ERR_NO_STREAM";
  TrackSkipReason2["Manual"] = "MANUAL";
  TrackSkipReason2["SEEK_OVER_THRESHOLD"] = "SEEK_OVER_THRESHOLD";
  TrackSkipReason2["Jump"] = "JUMPED_TO_ANOTHER_TRACK";
  TrackSkipReason2["SkipTo"] = "SKIP_TO_ANOTHER_TRACK";
  TrackSkipReason2["HistoryNext"] = "HISTORY_NEXT_TRACK";
  return TrackSkipReason2;
})(TrackSkipReason || {});
var _transitioning, _deleted, _shuffle, _attachListeners, attachListeners_fn, _removeListeners, removeListeners_fn, _performStart, performStart_fn, _getNextTrack, getNextTrack_fn, _performFinish, performFinish_fn, _emitEnd, emitEnd_fn, _handleAutoplay, handleAutoplay_fn;
var _GuildQueue = class _GuildQueue {
  constructor(player, options) {
    this.player = player;
    this.options = options;
    __privateAdd(this, _attachListeners);
    __privateAdd(this, _removeListeners);
    __privateAdd(this, _performStart);
    __privateAdd(this, _getNextTrack);
    __privateAdd(this, _performFinish);
    __privateAdd(this, _emitEnd);
    __privateAdd(this, _handleAutoplay);
    __privateAdd(this, _transitioning, false);
    __privateAdd(this, _deleted, false);
    __privateAdd(this, _shuffle, false);
    this.__current = null;
    this.history = new GuildQueueHistory(this);
    this.dispatcher = null;
    this.node = new GuildQueuePlayerNode(this);
    this.filters = new GuildQueueAudioFilters(this);
    this.onBeforeCreateStream = /* @__PURE__ */ __name(async () => null, "onBeforeCreateStream");
    this.onAfterCreateStream = /* @__PURE__ */ __name(async (stream) => ({
      stream,
      type: import_discord_voip4.StreamType.Raw
    }), "onAfterCreateStream");
    this.repeatMode = 0 /* OFF */;
    this.timeouts = new import_utils5.Collection();
    this.stats = new GuildQueueStatistics(this);
    this.tasksQueue = new AsyncQueue();
    this.syncedLyricsProvider = new SyncedLyricsProvider(this);
    this.tracks = new import_utils5.Queue(options.queueStrategy);
    if (TypeUtil.isFunction(options.onBeforeCreateStream))
      this.onBeforeCreateStream = options.onBeforeCreateStream;
    if (TypeUtil.isFunction(options.onAfterCreateStream))
      this.onAfterCreateStream = options.onAfterCreateStream;
    if (!TypeUtil.isNullish(options.repeatMode))
      this.repeatMode = options.repeatMode;
    options.selfDeaf ?? (options.selfDeaf = true);
    options.maxSize ?? (options.maxSize = Infinity);
    options.maxHistorySize ?? (options.maxHistorySize = Infinity);
    options.pauseOnEmpty ?? (options.pauseOnEmpty = true);
    if (!TypeUtil.isNullish(this.options.biquad) && !TypeUtil.isBoolean(this.options.biquad)) {
      this.filters._lastFiltersCache.biquad = this.options.biquad;
    }
    if (Array.isArray(this.options.equalizer)) {
      this.filters._lastFiltersCache.equalizer = this.options.equalizer;
    }
    if (Array.isArray(this.options.filterer)) {
      this.filters._lastFiltersCache.filters = this.options.filterer;
    }
    if (TypeUtil.isNumber(this.options.resampler)) {
      this.filters._lastFiltersCache.sampleRate = this.options.resampler;
    }
    if (TypeUtil.isArray(this.options.ffmpegFilters)) {
      this.filters.ffmpeg.setDefaults(this.options.ffmpegFilters);
    }
    if (!TypeUtil.isNumber(options.maxSize)) {
      throw Exceptions.ERR_INVALID_ARG_TYPE("[GuildNodeInit.maxSize]", "number", typeof options.maxSize);
    }
    if (!TypeUtil.isNumber(options.maxHistorySize)) {
      throw Exceptions.ERR_INVALID_ARG_TYPE("[GuildNodeInit.maxHistorySize]", "number", typeof options.maxHistorySize);
    }
    if (options.maxSize < 1)
      options.maxSize = Infinity;
    if (options.maxHistorySize < 1)
      options.maxHistorySize = Infinity;
    if (this.hasDebugger)
      this.debug(`GuildQueue initialized for guild ${this.options.guild.name} (ID: ${this.options.guild.id})`);
    this.emit(GuildQueueEvent.queueCreate, this);
  }
  /**
   * Estimated duration of this queue in ms
   */
  get estimatedDuration() {
    return this.tracks.store.reduce((a, c) => a + c.durationMS, 0);
  }
  /**
   * Formatted duration of this queue
   */
  get durationFormatted() {
    return Util.buildTimeCode(Util.parseMS(this.estimatedDuration));
  }
  /**
   * The voice receiver for this queue
   */
  get voiceReceiver() {
    return this.dispatcher?.receiver ?? null;
  }
  /**
   * The sync lyrics provider for this queue.
   * @example const lyrics = await player.lyrics.search({ q: 'Alan Walker Faded' });
   * const syncedLyrics = queue.syncedLyrics(lyrics[0]);
   * console.log(syncedLyrics.at(10_000));
   * // subscribe to lyrics change
   * const unsubscribe = syncedLyrics.onChange((lyrics, timestamp) => {
   *    console.log(lyrics, timestamp);
   * });
   * // unsubscribe from lyrics change
   * unsubscribe(); // or
   * syncedLyrics.unsubscribe();
   */
  syncedLyrics(lyrics) {
    this.syncedLyricsProvider.load(lyrics?.syncedLyrics ?? "");
    return this.syncedLyricsProvider;
  }
  /**
   * Write a debug message to this queue
   * @param m The message to write
   */
  debug(m) {
    this.emit(GuildQueueEvent.debug, this, m);
  }
  /**
   * The metadata of this queue
   */
  get metadata() {
    return this.options.metadata;
  }
  set metadata(m) {
    this.options.metadata = m;
  }
  /**
   * Set metadata for this queue
   * @param m Metadata to set
   */
  setMetadata(m) {
    this.options.metadata = m;
  }
  /**
   * Indicates current track of this queue
   */
  get currentTrack() {
    return this.dispatcher?.audioResource?.metadata || this.__current;
  }
  /**
   * Indicates if this queue was deleted previously
   */
  get deleted() {
    return __privateGet(this, _deleted);
  }
  /**
   * The voice channel of this queue
   */
  get channel() {
    return this.dispatcher?.channel || null;
  }
  set channel(c) {
    if (this.dispatcher) {
      if (c) {
        this.dispatcher.channel = c;
      } else {
        this.delete();
      }
    }
  }
  /**
   * The voice connection of this queue
   */
  get connection() {
    return this.dispatcher?.voiceConnection || null;
  }
  /**
   * The guild this queue belongs to
   */
  get guild() {
    return this.options.guild;
  }
  /**
   * The id of this queue
   */
  get id() {
    return this.guild.id;
  }
  /**
   * Set transition mode for this queue
   * @param state The state to set
   */
  setTransitioning(state) {
    __privateSet(this, _transitioning, state);
  }
  /**
   * if this queue is currently under transition mode
   */
  isTransitioning() {
    return __privateGet(this, _transitioning);
  }
  /**
   * Set repeat mode for this queue
   * @param mode The repeat mode to apply
   */
  setRepeatMode(mode) {
    this.repeatMode = mode;
  }
  /**
   * Max size of this queue
   */
  get maxSize() {
    return this.options.maxSize ?? Infinity;
  }
  /**
   * Max size of this queue
   */
  getMaxSize() {
    return this.maxSize;
  }
  /**
   * Gets the size of the queue
   */
  get size() {
    return this.tracks.size;
  }
  /**
   * The size of this queue
   */
  getSize() {
    return this.size;
  }
  /**
   * Max history size of this queue
   */
  get maxHistorySize() {
    return this.options.maxHistorySize ?? Infinity;
  }
  /**
   * Max history size of this queue
   */
  getMaxHistorySize() {
    return this.maxHistorySize;
  }
  /**
   * Set max history size for this queue
   * @param size The size to set
   */
  setMaxHistorySize(size) {
    if (!TypeUtil.isNumber(size)) {
      throw Exceptions.ERR_INVALID_ARG_TYPE("size", "number", typeof size);
    }
    if (size < 1)
      size = Infinity;
    this.options.maxHistorySize = size;
  }
  /**
   * Set max size for this queue
   * @param size The size to set
   */
  setMaxSize(size) {
    if (!TypeUtil.isNumber(size)) {
      throw Exceptions.ERR_INVALID_ARG_TYPE("size", "number", typeof size);
    }
    if (size < 1)
      size = Infinity;
    this.options.maxSize = size;
  }
  /**
   * Clear this queue
   */
  clear() {
    this.tracks.clear();
    this.history.clear();
  }
  /**
   * Check if this queue has no tracks left in it
   */
  isEmpty() {
    return this.tracks.size < 1;
  }
  /**
   * Check if this queue is full
   */
  isFull() {
    return this.tracks.size >= this.maxSize;
  }
  /**
   * Get queue capacity
   */
  getCapacity() {
    if (this.isFull())
      return 0;
    const cap = this.maxSize - this.size;
    return cap;
  }
  /**
   * Check if this queue currently holds active audio resource
   */
  isPlaying() {
    return this.dispatcher?.audioResource != null && !this.dispatcher.audioResource.ended;
  }
  /**
   * Add track to the queue. This will emit `audioTracksAdd` when multiple tracks are added, otherwise `audioTrackAdd`.
   * @param track Track or playlist or array of tracks to add
   */
  addTrack(track) {
    const toAdd = track instanceof Playlist ? track.tracks : track;
    const isMulti = Array.isArray(toAdd);
    VALIDATE_QUEUE_CAP(this, toAdd);
    this.tracks.add(toAdd);
    if (isMulti) {
      this.emit(GuildQueueEvent.audioTracksAdd, this, toAdd);
    } else {
      this.emit(GuildQueueEvent.audioTrackAdd, this, toAdd);
    }
  }
  /**
   * Remove a track from queue
   * @param track The track to remove
   */
  removeTrack(track) {
    return this.node.remove(track);
  }
  /**
   * Inserts the track to the given index
   * @param track The track to insert
   * @param index The index to insert the track at (defaults to 0)
   */
  insertTrack(track, index = 0) {
    return this.node.insert(track, index);
  }
  /**
   * Moves a track in the queue
   * @param from The track to move
   * @param to The position to move to
   */
  moveTrack(track, index = 0) {
    return this.node.move(track, index);
  }
  /**
   * Copy a track in the queue
   * @param from The track to clone
   * @param to The position to clone at
   */
  copyTrack(track, index = 0) {
    return this.node.copy(track, index);
  }
  /**
   * Swap two tracks in the queue
   * @param src The first track to swap
   * @param dest The second track to swap
   */
  swapTracks(src, dest) {
    return this.node.swap(src, dest);
  }
  /**
   * Create stream dispatcher from the given connection
   * @param connection The connection to use
   */
  createDispatcher(connection, options = {}) {
    if (connection.state.status === import_discord_voip4.VoiceConnectionStatus.Destroyed) {
      throw Exceptions.ERR_VOICE_CONNECTION_DESTROYED();
    }
    const channel = this.player.client.channels.cache.get(connection.joinConfig.channelId);
    if (!channel)
      throw Exceptions.ERR_NO_VOICE_CHANNEL();
    if (!channel.isVoiceBased())
      throw Exceptions.ERR_INVALID_ARG_TYPE("channel", `VoiceBasedChannel (type ${import_discord3.ChannelType.GuildVoice}/${import_discord3.ChannelType.GuildStageVoice})`, String(channel?.type));
    if (this.dispatcher) {
      __privateMethod(this, _removeListeners, removeListeners_fn).call(this, this.dispatcher);
      this.dispatcher.destroy();
      this.dispatcher = null;
    }
    this.dispatcher = new StreamDispatcher(connection, channel, this, options.timeout ?? this.options.connectionTimeout, options.audioPlayer);
  }
  /**
   * Connect to a voice channel
   * @param channelResolvable The voice channel to connect to
   * @param options Join config
   */
  async connect(channelResolvable, options = {}) {
    const channel = this.player.client.channels.resolve(channelResolvable);
    if (!channel || !channel.isVoiceBased()) {
      throw Exceptions.ERR_INVALID_ARG_TYPE("channel", `VoiceBasedChannel (type ${import_discord3.ChannelType.GuildVoice}/${import_discord3.ChannelType.GuildStageVoice})`, String(channel?.type));
    }
    if (this.hasDebugger)
      this.debug(`Connecting to ${channel.type === import_discord3.ChannelType.GuildStageVoice ? "stage" : "voice"} channel ${channel.name} (ID: ${channel.id})`);
    if (this.dispatcher && channel.id !== this.dispatcher.channel.id) {
      if (this.hasDebugger)
        this.debug("Destroying old connection");
      __privateMethod(this, _removeListeners, removeListeners_fn).call(this, this.dispatcher);
      this.dispatcher.destroy();
      this.dispatcher = null;
    }
    this.dispatcher = await this.player.voiceUtils.connect(channel, {
      deaf: options.deaf ?? this.options.selfDeaf ?? true,
      maxTime: options?.timeout ?? this.options.connectionTimeout ?? 12e4,
      queue: this,
      audioPlayer: options?.audioPlayer,
      group: options.group ?? this.player.client.user?.id
    });
    this.emit(GuildQueueEvent.connection, this);
    if (this.channel.type === import_discord3.ChannelType.GuildStageVoice) {
      await this.channel.guild.members.me.voice.setSuppressed(false).catch(async () => {
        return await this.channel.guild.members.me.voice.setRequestToSpeak(true).catch(Util.noop);
      });
    }
    __privateMethod(this, _attachListeners, attachListeners_fn).call(this, this.dispatcher);
    return this;
  }
  /**
   * Enable shuffle mode for this queue
   * @param dynamic Whether to shuffle the queue dynamically. Defaults to `true`.
   * Dynamic shuffling will shuffle the queue when the current track ends, without mutating the queue.
   * If set to `false`, the queue will be shuffled immediately in-place, which cannot be undone.
   */
  enableShuffle(dynamic = true) {
    if (!dynamic) {
      this.tracks.shuffle();
      return true;
    }
    __privateSet(this, _shuffle, true);
    return true;
  }
  /**
   * Disable shuffle mode for this queue.
   */
  disableShuffle() {
    __privateSet(this, _shuffle, false);
    return true;
  }
  /**
   * Toggle shuffle mode for this queue.
   * @param dynamic Whether to shuffle the queue dynamically. Defaults to `true`.
   * @returns Whether shuffle is enabled or disabled.
   */
  toggleShuffle(dynamic = true) {
    if (dynamic) {
      __privateSet(this, _shuffle, !__privateGet(this, _shuffle));
      return __privateGet(this, _shuffle);
    } else {
      this.tracks.shuffle();
      return true;
    }
  }
  /**
   * Whether shuffle mode is enabled for this queue.
   */
  get isShuffling() {
    return __privateGet(this, _shuffle);
  }
  /**
   * The voice connection latency of this queue
   */
  get ping() {
    return this.connection?.ping.udp ?? -1;
  }
  /**
   * Delete this queue
   */
  delete() {
    if (this.player.nodes.delete(this.id)) {
      __privateSet(this, _deleted, true);
      this.player.events.emit(GuildQueueEvent.queueDelete, this);
      this.node.tasksQueue.cancelAll();
      this.tasksQueue.cancelAll();
    }
  }
  /**
   * Revives this queue
   * @returns
   */
  revive() {
    if (!this.deleted || this.player.nodes.has(this.id))
      return;
    __privateSet(this, _deleted, false);
    this.setTransitioning(false);
    this.player.nodes.cache.set(this.id, this);
    this.player.events.emit(GuildQueueEvent.queueCreate, this);
  }
  /**
   * Set self deaf
   * @param mode On/Off state
   * @param reason Reason
   */
  setSelfDeaf(mode, reason) {
    return this.guild.members.me.voice.setDeaf(mode, reason);
  }
  /**
   * Set self mute
   * @param mode On/Off state
   * @param reason Reason
   */
  setSelfMute(mode, reason) {
    return this.guild.members.me.voice.setMute(mode, reason);
  }
  /**
   * Play a track in this queue
   * @param track The track to be played
   * @param options Player node initialization options
   */
  async play(track, options) {
    if (!this.channel)
      throw Exceptions.ERR_NO_VOICE_CONNECTION();
    return this.player.play(this.channel, track, options);
  }
  /**
   * Emit an event on this queue
   * @param event The event to emit
   * @param args The args for the event
   */
  emit(event, ...args) {
    if (this.deleted)
      return false;
    return this.player.events.emit(event, ...args);
  }
  get hasDebugger() {
    return this.player.events.hasDebugger;
  }
};
_transitioning = new WeakMap();
_deleted = new WeakMap();
_shuffle = new WeakMap();
_attachListeners = new WeakSet();
attachListeners_fn = /* @__PURE__ */ __name(function(dispatcher) {
  dispatcher.on("error", (e) => this.emit(GuildQueueEvent.error, this, e));
  dispatcher.on("debug", (m) => this.hasDebugger && this.emit(GuildQueueEvent.debug, this, m));
  dispatcher.on("finish", (r) => __privateMethod(this, _performFinish, performFinish_fn).call(this, r));
  dispatcher.on("start", (r) => __privateMethod(this, _performStart, performStart_fn).call(this, r));
  dispatcher.on("destroyed", () => {
    __privateMethod(this, _removeListeners, removeListeners_fn).call(this, dispatcher);
    this.dispatcher = null;
  });
  dispatcher.on("dsp", (f) => {
    if (!Object.is(this.filters._lastFiltersCache.filters, f)) {
      this.emit(GuildQueueEvent.dspUpdate, this, this.filters._lastFiltersCache.filters, f);
    }
    this.filters._lastFiltersCache.filters = f;
  });
  dispatcher.on("biquad", (f) => {
    if (this.filters._lastFiltersCache.biquad !== f) {
      this.emit(GuildQueueEvent.biquadFiltersUpdate, this, this.filters._lastFiltersCache.biquad, f);
    }
    this.filters._lastFiltersCache.biquad = f;
  });
  dispatcher.on("eqBands", (f) => {
    if (!Object.is(f, this.filters._lastFiltersCache.equalizer)) {
      this.emit(GuildQueueEvent.equalizerUpdate, this, this.filters._lastFiltersCache.equalizer, f);
    }
    this.filters._lastFiltersCache.equalizer = f;
  });
  dispatcher.on("volume", (f) => {
    if (this.filters._lastFiltersCache.volume !== f)
      this.emit(GuildQueueEvent.volumeChange, this, this.filters._lastFiltersCache.volume, f);
    this.filters._lastFiltersCache.volume = f;
  });
}, "#attachListeners");
_removeListeners = new WeakSet();
removeListeners_fn = /* @__PURE__ */ __name(function(target2) {
  target2.removeAllListeners();
}, "#removeListeners");
_performStart = new WeakSet();
performStart_fn = /* @__PURE__ */ __name(function(resource) {
  const track = resource?.metadata || this.currentTrack;
  const reason = this.isTransitioning() ? "filters" : "normal";
  if (this.hasDebugger)
    this.debug(
      `Player triggered for Track ${JSON.stringify({
        title: track?.title,
        reason
      })}`
    );
  this.emit(GuildQueueEvent.playerTrigger, this, track, reason);
  if (track && !this.isTransitioning())
    this.emit(GuildQueueEvent.playerStart, this, track);
  this.setTransitioning(false);
}, "#performStart");
_getNextTrack = new WeakSet();
getNextTrack_fn = /* @__PURE__ */ __name(function() {
  if (!this.isShuffling) {
    return this.tracks.dispatch();
  }
  const store = this.tracks.store;
  if (!store.length)
    return;
  const track = Util.randomChoice(store);
  this.tracks.removeOne((t) => {
    return t.id === track.id;
  });
  return track;
}, "#getNextTrack");
_performFinish = new WeakSet();
performFinish_fn = /* @__PURE__ */ __name(function(resource) {
  const track = resource?.metadata || this.currentTrack;
  if (this.hasDebugger)
    this.debug(
      `Track ${JSON.stringify({
        title: track?.title,
        isTransitionMode: this.isTransitioning()
      })} was marked as finished`
    );
  if (track && !this.isTransitioning()) {
    this.syncedLyricsProvider.unsubscribe();
    this.syncedLyricsProvider.lyrics.clear();
    if (this.hasDebugger)
      this.debug("Adding track to history and emitting finish event since transition mode is disabled...");
    this.history.push(track);
    this.node.resetProgress();
    this.emit(GuildQueueEvent.playerFinish, this, track);
    if (__privateGet(this, _deleted))
      return __privateMethod(this, _emitEnd, emitEnd_fn).call(this);
    if (this.tracks.size < 1 && this.repeatMode === 0 /* OFF */) {
      if (this.hasDebugger)
        this.debug("No more tracks left in the queue to play and repeat mode is off, initiating #emitEnd()");
      __privateMethod(this, _emitEnd, emitEnd_fn).call(this);
    } else {
      if (this.repeatMode === 1 /* TRACK */) {
        if (this.hasDebugger)
          this.debug("Repeat mode is set to track, repeating last track from the history...");
        this.__current = this.history.tracks.dispatch() || track;
        return this.node.play(this.__current, { queue: false });
      }
      if (this.repeatMode === 2 /* QUEUE */) {
        if (this.hasDebugger)
          this.debug("Repeat mode is set to queue, moving last track from the history to current queue...");
        this.tracks.add(this.history.tracks.dispatch() || track);
      }
      if (!this.tracks.size) {
        if (this.repeatMode === 3 /* AUTOPLAY */) {
          if (this.hasDebugger)
            this.debug("Repeat mode is set to autoplay, initiating autoplay handler...");
          __privateMethod(this, _handleAutoplay, handleAutoplay_fn).call(this, track);
          return;
        }
      } else {
        if (this.hasDebugger)
          this.debug("Initializing next track of the queue...");
        this.__current = __privateMethod(this, _getNextTrack, getNextTrack_fn).call(this);
        this.node.play(this.__current, {
          queue: false
        });
      }
    }
  }
}, "#performFinish");
_emitEnd = new WeakSet();
emitEnd_fn = /* @__PURE__ */ __name(function() {
  this.__current = null;
  this.emit(GuildQueueEvent.emptyQueue, this);
  if (this.options.leaveOnEnd) {
    const tm = (0, import_timers.setTimeout)(() => {
      if (this.isPlaying())
        return clearTimeout(tm);
      this.dispatcher?.disconnect();
    }, this.options.leaveOnEndCooldown).unref();
  }
}, "#emitEnd");
_handleAutoplay = new WeakSet();
handleAutoplay_fn = /* @__PURE__ */ __name(async function(track) {
  try {
    if (this.hasDebugger)
      this.debug(`Autoplay >> Finding related tracks for Track ${track.title} (${track.url}) [ext:${track.extractor?.identifier || "N/A"}]`);
    const tracks = (await track.extractor?.getRelatedTracks(track, this.history))?.tracks || (await this.player.extractors.run(async (ext) => {
      if (this.hasDebugger)
        this.debug(`Autoplay >> Querying extractor ${ext.identifier}`);
      const res = await ext.getRelatedTracks(track, this.history);
      if (!res.tracks.length) {
        if (this.hasDebugger)
          this.debug(`Autoplay >> Extractor ${ext.identifier} failed to provide results.`);
        return false;
      }
      if (this.hasDebugger)
        this.debug(`Autoplay >> Extractor ${ext.identifier} successfully returned results.`);
      return res.tracks;
    }))?.result || [];
    let resolver = Util.noop;
    const donePromise = new Promise((resolve) => resolver = resolve);
    const success = this.emit(GuildQueueEvent.willAutoPlay, this, tracks, resolver);
    if (!success) {
      resolver(
        tracks.length ? (() => {
          const unique = tracks.filter((tr) => !this.history.tracks.find((t) => t.url === tr.url));
          return unique?.[0] ?? Util.randomChoice(tracks.slice(0, 5));
        })() : null
      );
    }
    const nextTrack = await donePromise;
    if (!nextTrack) {
      if (this.hasDebugger)
        this.debug("Autoplay >> No track was found, initiating #emitEnd()");
      throw "No track was found";
    }
    await this.node.play(nextTrack, {
      queue: false,
      seek: 0,
      transitionMode: false
    });
  } catch {
    return __privateMethod(this, _emitEnd, emitEnd_fn).call(this);
  }
}, "#handleAutoplay");
__name(_GuildQueue, "GuildQueue");
var GuildQueue5 = _GuildQueue;

// src/utils/__internal__/_container.ts
var import_utils6 = require("@discord-player/utils");
var instances = new import_utils6.Collection();
var globalRegistry = new import_utils6.Collection();

// src/utils/__internal__/addPlayer.ts
function addPlayer(player) {
  if (instances.has(player.id))
    return true;
  instances.set(player.id, player);
  return instances.has(player.id);
}
__name(addPlayer, "addPlayer");

// src/utils/__internal__/clearPlayer.ts
function clearPlayer(player) {
  return instances.delete(player.id);
}
__name(clearPlayer, "clearPlayer");

// src/utils/__internal__/getPlayers.ts
function getPlayers() {
  return instances.array();
}
__name(getPlayers, "getPlayers");

// src/utils/__internal__/getGlobalRegistry.ts
function getGlobalRegistry() {
  return globalRegistry;
}
__name(getGlobalRegistry, "getGlobalRegistry");

// src/queue/GuildNodeManager.ts
var _GuildNodeManager = class _GuildNodeManager {
  constructor(player) {
    this.player = player;
    this.cache = new import_utils7.Collection();
  }
  /**
   * Create guild queue if it does not exist
   * @param guild The guild which will be the owner of the queue
   * @param options Queue initializer options
   */
  create(guild, options = {}) {
    const server = this.player.client.guilds.resolve(guild);
    if (!server) {
      throw Exceptions.ERR_NO_GUILD("Invalid or unknown guild");
    }
    if (this.cache.has(server.id)) {
      return this.cache.get(server.id);
    }
    options.strategy ?? (options.strategy = "FIFO");
    options.volume ?? (options.volume = 100);
    options.equalizer ?? (options.equalizer = []);
    options.a_filter ?? (options.a_filter = []);
    options.disableHistory ?? (options.disableHistory = false);
    options.leaveOnEmpty ?? (options.leaveOnEmpty = true);
    options.leaveOnEmptyCooldown ?? (options.leaveOnEmptyCooldown = 0);
    options.leaveOnEnd ?? (options.leaveOnEnd = true);
    options.leaveOnEndCooldown ?? (options.leaveOnEndCooldown = 0);
    options.leaveOnStop ?? (options.leaveOnStop = true);
    options.leaveOnStopCooldown ?? (options.leaveOnStopCooldown = 0);
    options.resampler ?? (options.resampler = 48e3);
    options.selfDeaf ?? (options.selfDeaf = true);
    options.connectionTimeout ?? (options.connectionTimeout = this.player.options.connectionTimeout);
    options.bufferingTimeout ?? (options.bufferingTimeout = 1e3);
    options.maxSize ?? (options.maxSize = Infinity);
    options.maxHistorySize ?? (options.maxHistorySize = Infinity);
    options.preferBridgedMetadata ?? (options.preferBridgedMetadata = true);
    options.pauseOnEmpty ?? (options.pauseOnEmpty = true);
    options.disableBiquad ?? (options.disableBiquad = false);
    options.disableEqualizer ?? (options.disableEqualizer = false);
    options.disableFilterer ?? (options.disableFilterer = false);
    options.disableVolume ?? (options.disableVolume = false);
    options.disableResampler ?? (options.disableResampler = true);
    if (getGlobalRegistry().has("@[onBeforeCreateStream]") && !options.onBeforeCreateStream) {
      options.onBeforeCreateStream = getGlobalRegistry().get("@[onBeforeCreateStream]");
    }
    if (getGlobalRegistry().has("@[onAfterCreateStream]") && !options.onAfterCreateStream) {
      options.onAfterCreateStream = getGlobalRegistry().get("@[onAfterCreateStream]");
    }
    const queue = new GuildQueue5(this.player, {
      guild: server,
      queueStrategy: options.strategy,
      volume: options.volume,
      equalizer: options.equalizer,
      filterer: options.a_filter,
      biquad: options.biquad,
      resampler: options.resampler,
      disableHistory: options.disableHistory,
      onBeforeCreateStream: options.onBeforeCreateStream,
      onAfterCreateStream: options.onAfterCreateStream,
      repeatMode: options.repeatMode,
      leaveOnEmpty: options.leaveOnEmpty,
      leaveOnEmptyCooldown: options.leaveOnEmptyCooldown,
      leaveOnEnd: options.leaveOnEnd,
      leaveOnEndCooldown: options.leaveOnEndCooldown,
      leaveOnStop: options.leaveOnStop,
      leaveOnStopCooldown: options.leaveOnStopCooldown,
      metadata: options.metadata,
      connectionTimeout: options.connectionTimeout ?? 12e4,
      selfDeaf: options.selfDeaf,
      ffmpegFilters: options.defaultFFmpegFilters ?? [],
      bufferingTimeout: options.bufferingTimeout,
      noEmitInsert: options.noEmitInsert ?? false,
      preferBridgedMetadata: options.preferBridgedMetadata,
      maxHistorySize: options.maxHistorySize,
      maxSize: options.maxSize,
      pauseOnEmpty: options.pauseOnEmpty,
      disableBiquad: options.disableBiquad,
      disableEqualizer: options.disableEqualizer,
      disableFilterer: options.disableFilterer,
      disableResampler: options.disableResampler,
      disableVolume: options.disableVolume
    });
    this.cache.set(server.id, queue);
    return queue;
  }
  /**
   * Get existing queue
   * @param node Queue resolvable
   */
  get(node) {
    const queue = this.resolve(node);
    if (!queue)
      return null;
    return this.cache.get(queue.id) || null;
  }
  /**
   * Check if a queue exists
   * @param node Queue resolvable
   */
  has(node) {
    const id = node instanceof GuildQueue5 ? node.id : this.player.client.guilds.resolveId(node);
    return this.cache.has(id);
  }
  /**
   * Delete queue
   * @param node Queue resolvable
   */
  delete(node) {
    const queue = this.resolve(node);
    if (!queue) {
      throw Exceptions.ERR_NO_GUILD_QUEUE("Cannot delete non-existing queue");
    }
    queue.setTransitioning(true);
    queue.node.stop(true);
    queue.connection?.removeAllListeners();
    queue.dispatcher?.removeAllListeners();
    queue.dispatcher?.disconnect();
    queue.timeouts.forEach((tm) => clearTimeout(tm));
    queue.history.clear();
    queue.tracks.clear();
    return this.cache.delete(queue.id);
  }
  /**
   * Resolve queue
   * @param node Queue resolvable
   */
  resolve(node) {
    if (node instanceof GuildQueue5) {
      return node;
    }
    return this.cache.get(this.player.client.guilds.resolveId(node));
  }
  /**
   * Resolve queue id
   * @param node Queue resolvable
   */
  resolveId(node) {
    const q = this.resolve(node);
    return q?.id || null;
  }
};
__name(_GuildNodeManager, "GuildNodeManager");
var GuildNodeManager = _GuildNodeManager;

// src/utils/SequentialBucket.ts
var import_promises3 = require("timers/promises");
var _SequentialBucket = class _SequentialBucket {
  constructor() {
    this.limit = 1;
    this.remaining = 1;
    this.resetAfter = 0;
    this.queue = new AsyncQueue();
    this.MAX_RETRIES = 5;
  }
  /**
   * Checks if the bucket is rate limited.
   */
  isRateLimited() {
    return this.remaining <= 0 && Date.now() < this.resetAfter;
  }
  /**
   * Enqueues a request.
   * @param req The request function to enqueue
   */
  async enqueue(req) {
    const entry = this.queue.acquire();
    await entry.getTask();
    try {
      return this._request(req);
    } finally {
      entry.release();
    }
  }
  async _request(req, retries = 0) {
    while (this.isRateLimited()) {
      const reset = this.resetAfter - Date.now();
      await (0, import_promises3.setTimeout)(reset);
    }
    let pass = false;
    try {
      const res = await req();
      this._patchHeaders(res);
      if (res.status === 429) {
        const reset = this.resetAfter - Date.now();
        await (0, import_promises3.setTimeout)(reset);
        return this._request(req);
      }
      if (!res.ok) {
        let err;
        try {
          const body = await res.json();
          const error = new Error(body.message);
          error.name = body.name;
          error.code = body.code;
          err = error;
        } catch {
          err = new Error(`HTTP Error: ${res.status} ${res.statusText}`);
        }
        pass = true;
        throw err;
      }
      return res;
    } catch (e) {
      if (pass)
        throw e;
      const badReq = e instanceof Error && /Error: 4[0-9]{2}/.test(e.message);
      if (!badReq && retries < this.MAX_RETRIES) {
        return this._request(req, ++retries);
      }
      throw e;
    }
  }
  _patchHeaders(res) {
    const limit = Number(res.headers.get("X-RateLimit-Limit"));
    const remaining = Number(res.headers.get("X-RateLimit-Remaining"));
    const resetAfter = Number(res.headers.get("X-RateLimit-Reset")) * 1e3 + Date.now();
    if (!Number.isNaN(limit))
      this.limit = limit;
    if (!Number.isNaN(remaining))
      this.remaining = remaining;
    if (!Number.isNaN(resetAfter))
      this.resetAfter = resetAfter;
  }
};
__name(_SequentialBucket, "SequentialBucket");
var SequentialBucket = _SequentialBucket;

// src/lrclib/LrcLib.ts
var toSnakeCase = /* @__PURE__ */ __name((obj) => {
  const snakeObj = {};
  for (const [key, value] of Object.entries(obj)) {
    if (value == null)
      continue;
    const newKey = key.replace(/[A-Z]/g, (letter) => `_${letter.toLowerCase()}`);
    snakeObj[newKey] = value;
  }
  return snakeObj;
}, "toSnakeCase");
var createQuery = /* @__PURE__ */ __name((params) => new URLSearchParams(toSnakeCase(params)).toString(), "createQuery");
var _LrcLib = class _LrcLib {
  /**
   * Creates a new LrcLib instance
   * @param {Player} player The player instance
   */
  constructor(player) {
    this.player = player;
    /**
     * The API URL
     */
    this.api = "https://lrclib.net/api";
    /**
     * The request timeout. Default is 15 seconds.
     */
    this.timeout = 15e3;
    /**
     * The request bucket
     */
    this.bucket = new SequentialBucket();
  }
  /**
   * Sets the request timeout
   * @param {number} timeout The timeout in milliseconds
   */
  setRequestTimeout(timeout) {
    this.timeout = timeout;
  }
  /**
   * Sets the retry limit. Default is 5.
   * @param {number} limit The retry limit
   */
  setRetryLimit(limit) {
    this.bucket.MAX_RETRIES = limit;
  }
  /**
   * Gets lyrics
   * @param params The get params
   */
  get(params) {
    const path = `get?${createQuery(params)}`;
    return this.request(path);
  }
  /**
   * Gets lyrics by ID
   * @param id The lyrics ID
   */
  getById(id) {
    return this.request(`get/${id}`);
  }
  /**
   * Gets cached lyrics
   * @param params The get params
   */
  getCached(params) {
    const path = `get-cached?${createQuery(params)}`;
    return this.request(path);
  }
  /**
   * Searches for lyrics
   * @param params The search params
   */
  search(params) {
    if (!params.q && !params.trackName) {
      throw Exceptions.ERR_INVALID_ARG_TYPE("one of q or trackName", "string", [String(params.q), String(params.trackName)].join(", "));
    }
    const path = `search?${createQuery(params)}`;
    return this.request(path);
  }
  /**
   * Requests the API
   * @param path The path
   * @param options The request options
   */
  async request(path, options) {
    let timeout = null;
    const dispatcher = /* @__PURE__ */ __name(() => {
      const controller = new AbortController();
      timeout = setTimeout(() => {
        controller.abort();
      }, this.timeout).unref();
      const { name, version: version2 } = Util.getRuntime();
      const runtimeVersion = name === "unknown" ? version2 : `${name}/${version2}`;
      const init = {
        method: "GET",
        redirect: "follow",
        signal: controller.signal,
        ...options,
        headers: {
          "User-Agent": `Discord-Player/${this.player.version} ${runtimeVersion ?? ""}`.trimEnd(),
          "Content-Type": "application/json",
          ...options?.headers
        }
      };
      this.player.debug(`[LrcLib] Requesting ${path}`);
      return fetch(`${this.api}${path.startsWith("/") ? path : "/" + path}`, init);
    }, "dispatcher");
    const res = await this.bucket.enqueue(dispatcher);
    if (timeout)
      clearTimeout(timeout);
    return res.json();
  }
};
__name(_LrcLib, "LrcLib");
var LrcLib = _LrcLib;

// src/VoiceInterface/VoiceUtils.ts
var import_discord_voip5 = require("discord-voip");
var import_utils8 = require("@discord-player/utils");
var _VoiceUtils = class _VoiceUtils {
  /**
   * The voice utils constructor
   */
  constructor(player) {
    this.player = player;
    /**
     * Voice connection cache to store voice connections of the Player components.
     * This property is deprecated and will be removed in the future.
     * It only exists for compatibility reasons.
     * @deprecated
     */
    this.cache = new import_utils8.Collection();
  }
  /**
   * Joins a voice channel, creating basic stream dispatch manager
   * @param {StageChannel|VoiceChannel} channel The voice channel
   * @param {object} [options] Join options
   * @returns {Promise<StreamDispatcher>}
   */
  async connect(channel, options) {
    if (!options?.queue)
      throw Exceptions.ERR_NO_GUILD_QUEUE();
    const conn = await this.join(channel, options);
    const sub = new StreamDispatcher(conn, channel, options.queue, options.maxTime, options.audioPlayer);
    return sub;
  }
  /**
   * Joins a voice channel
   * @param {StageChannel|VoiceChannel} [channel] The voice/stage channel to join
   * @param {object} [options] Join options
   * @returns {VoiceConnection}
   */
  async join(channel, options) {
    const existingConnection = this.getConnection(channel.guild.id, options?.group);
    if (existingConnection?.joinConfig.channelId === channel?.id && existingConnection.state.status !== import_discord_voip5.VoiceConnectionStatus.Destroyed) {
      return existingConnection;
    }
    const conn = (0, import_discord_voip5.joinVoiceChannel)({
      guildId: channel.guild.id,
      channelId: channel.id,
      adapterCreator: channel.guild.voiceAdapterCreator,
      selfDeaf: Boolean(options?.deaf),
      debug: this.player.events.listenerCount("debug") > 0,
      group: options?.group
    });
    return conn;
  }
  /**
   * Disconnects voice connection
   * @param {VoiceConnection} connection The voice connection
   * @returns {void}
   */
  disconnect(connection) {
    if (connection instanceof StreamDispatcher)
      connection = connection.voiceConnection;
    try {
      if (connection.state.status !== import_discord_voip5.VoiceConnectionStatus.Destroyed)
        return connection.destroy();
    } catch {
    }
  }
  /**
   * Returns Discord Player voice connection
   * @param {Snowflake} guild The guild id
   * @returns {StreamDispatcher}
   */
  getConnection(guild, group) {
    return (0, import_discord_voip5.getVoiceConnection)(guild, group);
  }
};
__name(_VoiceUtils, "VoiceUtils");
var VoiceUtils = _VoiceUtils;

// src/utils/QueryCache.ts
var DEFAULT_EXPIRY_TIMEOUT = 18e6;
var _defaultCache;
var _QueryCache = class _QueryCache {
  constructor(player, options = {
    checkInterval: DEFAULT_EXPIRY_TIMEOUT
  }) {
    this.player = player;
    this.options = options;
    __privateAdd(this, _defaultCache, /* @__PURE__ */ new Map());
    this.timer = setInterval(this.cleanup.bind(this), this.checkInterval).unref();
  }
  get checkInterval() {
    return this.options.checkInterval ?? DEFAULT_EXPIRY_TIMEOUT;
  }
  async cleanup() {
    for (const [id, value] of __privateGet(this, _defaultCache)) {
      if (value.hasExpired()) {
        __privateGet(this, _defaultCache).delete(id);
      }
    }
  }
  async clear() {
    __privateGet(this, _defaultCache).clear();
  }
  async getData() {
    return [...__privateGet(this, _defaultCache).values()];
  }
  async addData(data) {
    data.tracks.forEach((d) => {
      if (__privateGet(this, _defaultCache).has(d.url))
        return;
      __privateGet(this, _defaultCache).set(d.url, new DiscordPlayerQueryResultCache(d));
    });
  }
  async resolve(context) {
    const result = __privateGet(this, _defaultCache).get(context.query);
    if (!result)
      return new SearchResult(this.player, {
        query: context.query,
        requestedBy: context.requestedBy,
        queryType: context.queryType
      });
    return new SearchResult(this.player, {
      query: context.query,
      tracks: [result.data],
      playlist: null,
      queryType: context.queryType,
      requestedBy: context.requestedBy
    });
  }
};
_defaultCache = new WeakMap();
__name(_QueryCache, "QueryCache");
var QueryCache = _QueryCache;
var _DiscordPlayerQueryResultCache = class _DiscordPlayerQueryResultCache {
  constructor(data, expireAfter = DEFAULT_EXPIRY_TIMEOUT) {
    this.data = data;
    this.expireAfter = DEFAULT_EXPIRY_TIMEOUT;
    if (typeof expireAfter === "number") {
      this.expireAfter = Date.now() + expireAfter;
    }
  }
  hasExpired() {
    if (typeof this.expireAfter !== "number" || isNaN(this.expireAfter) || this.expireAfter < 1)
      return false;
    return Date.now() <= this.expireAfter;
  }
};
__name(_DiscordPlayerQueryResultCache, "DiscordPlayerQueryResultCache");
var DiscordPlayerQueryResultCache = _DiscordPlayerQueryResultCache;

// src/index.ts
__reExport(src_exports, require("@discord-player/ffmpeg"), module.exports);

// src/Player.ts
var import_ffmpeg2 = require("@discord-player/ffmpeg");
var import_discord5 = require("discord.js");
var import_discord_voip6 = require("discord-voip");

// src/DefaultVoiceStateHandler.ts
var import_discord4 = require("discord.js");
async function defaultVoiceStateHandler(player, queue, oldState, newState) {
  if (!queue || !queue.connection || !queue.channel)
    return;
  if (oldState.channelId && !newState.channelId && newState.member?.id === newState.guild.members.me?.id) {
    try {
      queue.delete();
    } catch {
    }
    return void player.events.emit(GuildQueueEvent.disconnect, queue);
  }
  if (queue.options.pauseOnEmpty) {
    const isEmpty = Util.isVoiceEmpty(queue.channel);
    if (isEmpty) {
      queue.node.setPaused(true);
      Reflect.set(queue, "__pausedOnEmpty", true);
      if (queue.hasDebugger) {
        queue.debug("Voice channel is empty and options#pauseOnEmpty is true, pausing...");
      }
    } else {
      if (Reflect.get(queue, "__pausedOnEmpty")) {
        queue.node.setPaused(false);
        Reflect.set(queue, "__pausedOnEmpty", false);
        if (queue.hasDebugger) {
          queue.debug("Voice channel is not empty and options#pauseOnEmpty is true, resuming...");
        }
      }
    }
  }
  if (!oldState.channelId && newState.channelId && newState.member?.id === newState.guild.members.me?.id) {
    if (newState.serverMute != null && oldState.serverMute !== newState.serverMute) {
      queue.node.setPaused(newState.serverMute);
    } else if (newState.channel?.type === import_discord4.ChannelType.GuildStageVoice && newState.suppress != null && oldState.suppress !== newState.suppress) {
      queue.node.setPaused(newState.suppress);
      if (newState.suppress) {
        newState.guild.members.me?.voice.setRequestToSpeak(true).catch(Util.noop);
      }
    }
  }
  if (!newState.channelId && oldState.channelId === queue.channel.id) {
    if (!Util.isVoiceEmpty(queue.channel))
      return;
    const timeout = setTimeout(() => {
      if (!Util.isVoiceEmpty(queue.channel))
        return;
      if (!player.nodes.has(queue.guild.id))
        return;
      if (queue.options.leaveOnEmpty)
        queue.delete();
      player.events.emit(GuildQueueEvent.emptyChannel, queue);
    }, queue.options.leaveOnEmptyCooldown || 0).unref();
    queue.timeouts.set(`empty_${oldState.guild.id}`, timeout);
  }
  if (newState.channelId && newState.channelId === queue.channel.id) {
    const emptyTimeout = queue.timeouts.get(`empty_${oldState.guild.id}`);
    const channelEmpty = Util.isVoiceEmpty(queue.channel);
    if (!channelEmpty && emptyTimeout) {
      clearTimeout(emptyTimeout);
      queue.timeouts.delete(`empty_${oldState.guild.id}`);
      player.events.emit(GuildQueueEvent.channelPopulate, queue);
    }
  }
  if (oldState.channelId && newState.channelId && oldState.channelId !== newState.channelId) {
    if (newState.member?.id === newState.guild.members.me?.id) {
      if (queue.connection && newState.member?.id === newState.guild.members.me?.id)
        queue.channel = newState.channel;
      const emptyTimeout = queue.timeouts.get(`empty_${oldState.guild.id}`);
      const channelEmpty = Util.isVoiceEmpty(queue.channel);
      if (!channelEmpty && emptyTimeout) {
        clearTimeout(emptyTimeout);
        queue.timeouts.delete(`empty_${oldState.guild.id}`);
        player.events.emit(GuildQueueEvent.channelPopulate, queue);
      } else {
        const timeout = setTimeout(() => {
          if (queue.connection && !Util.isVoiceEmpty(queue.channel))
            return;
          if (!player.nodes.has(queue.guild.id))
            return;
          if (queue.options.leaveOnEmpty)
            queue.delete();
          player.events.emit(GuildQueueEvent.emptyChannel, queue);
        }, queue.options.leaveOnEmptyCooldown || 0).unref();
        queue.timeouts.set(`empty_${oldState.guild.id}`, timeout);
      }
    } else {
      if (newState.channelId !== queue.channel.id) {
        const channelEmpty = Util.isVoiceEmpty(queue.channel);
        if (!channelEmpty)
          return;
        if (queue.timeouts.has(`empty_${oldState.guild.id}`))
          return;
        const timeout = setTimeout(() => {
          if (!Util.isVoiceEmpty(queue.channel))
            return;
          if (!player.nodes.has(queue.guild.id))
            return;
          if (queue.options.leaveOnEmpty)
            queue.delete();
          player.events.emit(GuildQueueEvent.emptyChannel, queue);
        }, queue.options.leaveOnEmptyCooldown || 0).unref();
        queue.timeouts.set(`empty_${oldState.guild.id}`, timeout);
      } else {
        const emptyTimeout = queue.timeouts.get(`empty_${oldState.guild.id}`);
        const channelEmpty = Util.isVoiceEmpty(queue.channel);
        if (!channelEmpty && emptyTimeout) {
          clearTimeout(emptyTimeout);
          queue.timeouts.delete(`empty_${oldState.guild.id}`);
          player.events.emit(GuildQueueEvent.channelPopulate, queue);
        }
      }
    }
  }
}
__name(defaultVoiceStateHandler, "defaultVoiceStateHandler");

// src/utils/IPRotator.ts
var ip;
function ensureIp() {
  if (ip)
    return ip;
  const { error, module: module2 } = Util.require("ip");
  if (error) {
    throw Exceptions.ERR_NOT_EXISTING_MODULE("ip", "ip package is required to use IPRotator.");
  }
  ip = module2;
  return ip;
}
__name(ensureIp, "ensureIp");
var _IPBlock = class _IPBlock {
  constructor(block) {
    this.block = block;
    this.usage = 0;
    if (ensureIp().isV4Format(block.split("/")[0]) && !block.includes("/")) {
      block += "/32";
    } else if (ensureIp().isV6Format(block.split("/")[0]) && !block.includes("/")) {
      block += "/128";
    }
    this.cidr = ensureIp().cidr(this.block);
    this.cidrSize = ensureIp().cidrSubnet(this.block).subnetMaskLength;
  }
  consume() {
    this.usage++;
  }
};
__name(_IPBlock, "IPBlock");
var IPBlock = _IPBlock;
var _retries;
var _IPRotator = class _IPRotator {
  constructor(config) {
    this.config = config;
    this.blocks = [];
    this.failures = /* @__PURE__ */ new Map();
    this.MAX_NEXT_RETRIES = 30;
    __privateAdd(this, _retries, 0);
    config.exclude ?? (config.exclude = []);
    this.blocks = config.blocks.map((block) => new IPBlock(block));
    this.MAX_NEXT_RETRIES = config.maxRetries ?? 10;
  }
  getIP() {
    const block = this.blocks.sort((a, b) => a.usage - b.usage)[0];
    if (!block) {
      throw new Error("No IP blocks available");
    }
    const random = _IPRotator.getRandomIP(block.cidr, block.cidrSize);
    if (this.isFailedOrExcluded(random)) {
      if (__privateWrapper(this, _retries)._++ > this.MAX_NEXT_RETRIES) {
        __privateSet(this, _retries, 0);
        throw new Error("Unable to find an IP that is not excluded");
      }
      return this.getIP();
    }
    __privateSet(this, _retries, 0);
    block.consume();
    return { ip: random, family: ensureIp().isV4Format(random) ? 4 : 6 };
  }
  isFailedOrExcluded(ip2) {
    return this.failures.has(ip2) || !!this.config.exclude?.includes(ip2);
  }
  addFailed(ip2) {
    const lastFailedCount = this.failures.get(ip2) ?? 0;
    this.failures.set(ip2, lastFailedCount + 1);
  }
  static getRandomIP(address, start, end) {
    const bytes = ensureIp().toBuffer(address);
    const ipv6 = bytes.length === 16;
    const bytesize = 8;
    start = start || 0;
    end = typeof end !== "undefined" ? end : bytes.length * bytesize;
    for (let i = 0; i < bytes.length; i++) {
      let bit = i * bytesize;
      if (bit + bytesize < start || bit >= end) {
        continue;
      }
      let b = bytes[i];
      for (let n = 0; n < bytesize; n++) {
        if (bit >= start && bit < end) {
          const bitpos = bytesize - n - 1;
          const bitmask = 1 << bitpos;
          if (Math.random() < 0.5) {
            b |= bitmask;
          } else {
            b &= ~bitmask;
          }
        }
        bit++;
      }
      bytes[i] = b;
    }
    const tets = [];
    for (let i = 0; i < bytes.length; i++) {
      if (ipv6) {
        if (i % 2 === 0) {
          tets[i >> 1] = (bytes[i] << bytesize | bytes[i + 1]).toString(16);
        }
      } else {
        tets[i] = bytes[i];
      }
    }
    return tets.join(ipv6 ? ":" : ".");
  }
};
_retries = new WeakMap();
__name(_IPRotator, "IPRotator");
var IPRotator = _IPRotator;

// src/hooks/context/async-context.ts
var import_node_async_hooks = require("async_hooks");
var _Context = class _Context {
  constructor(defaultValue) {
    this.defaultValue = defaultValue;
    this.storage = new import_node_async_hooks.AsyncLocalStorage();
  }
  /**
   * Exit out of this context
   */
  exit(scope) {
    this.storage.exit(scope);
  }
  /**
   * Whether the context is lost
   */
  get isLost() {
    return this.storage.getStore() === void 0;
  }
  /**
   * Get the current value of the context. If the context is lost and no default value is provided, undefined will be returned.
   */
  consume() {
    const data = this.storage.getStore();
    if (data === void 0 && this.defaultValue !== void 0)
      return this.defaultValue;
    return data;
  }
  /**
   * Run a function within the context of this provider
   */
  provide(value, receiver) {
    if (value === void 0) {
      throw new Error("Context value may not be undefined");
    }
    if (typeof receiver !== "function") {
      throw new Error("Context receiver must be a function");
    }
    return this.storage.run(value, receiver);
  }
};
__name(_Context, "Context");
var Context = _Context;
function createContext(defaultValue) {
  return new Context(defaultValue);
}
__name(createContext, "createContext");
function useContext(context) {
  return context.consume();
}
__name(useContext, "useContext");

// src/hooks/common.ts
var preferredInstanceKey = "__discord_player_hook_instance_cache__";
var getPlayer = /* @__PURE__ */ __name(() => {
  return instances.get(preferredInstanceKey) || instances.first() || null;
}, "getPlayer");
function useHooksContext(hookName) {
  const player = getPlayer();
  if (!player)
    throw Exceptions.ERR_ILLEGAL_HOOK_INVOCATION("discord-player", "Player instance must be created before using hooks");
  const context = useContext(player.context);
  if (!context)
    throw Exceptions.ERR_ILLEGAL_HOOK_INVOCATION(hookName, `${hookName} must be called inside a player context created by <Player>.context.provide()`);
  return context;
}
__name(useHooksContext, "useHooksContext");
var getQueue = /* @__PURE__ */ __name((node) => {
  const player = getPlayer();
  if (!player)
    return null;
  return player.nodes.resolve(node) || null;
}, "getQueue");
function createHook(hook) {
  return hook({
    getQueue,
    getPlayer,
    instances
  });
}
__name(createHook, "createHook");

// src/hooks/useHistory.ts
function useHistory(node) {
  const _node = node ?? useHooksContext("useHistory").guild;
  const queue = getQueue(_node);
  if (!queue)
    return null;
  return queue.history;
}
__name(useHistory, "useHistory");

// src/hooks/usePlayer.ts
function usePlayer(node) {
  const _node = node ?? useHooksContext("usePlayer").guild;
  const queue = getQueue(_node);
  if (!queue)
    return null;
  return queue.node;
}
__name(usePlayer, "usePlayer");

// src/hooks/useQueue.ts
function useQueue(node) {
  const _node = node ?? useHooksContext("useQueue").guild;
  const queue = getQueue(_node);
  if (!queue)
    return null;
  return queue;
}
__name(useQueue, "useQueue");

// src/hooks/useMainPlayer.ts
function useMasterPlayer() {
  Util.warn("useMasterPlayer() hook is deprecated, use useMainPlayer() instead.", "DeprecationWarning");
  return useMainPlayer();
}
__name(useMasterPlayer, "useMasterPlayer");
function useMainPlayer() {
  const instance = getPlayer();
  if (!instance) {
    throw Exceptions.ERR_ILLEGAL_HOOK_INVOCATION("useMainPlayer", 'This is likely caused by calling "useMainPlayer" hook before creating a player instance.');
  }
  return instance;
}
__name(useMainPlayer, "useMainPlayer");

// src/hooks/useMetadata.ts
function useMetadata(node) {
  const _node = node ?? useHooksContext("useMetadata").guild;
  const queue = getQueue(_node);
  const setter = /* @__PURE__ */ __name((metadata) => {
    if (queue) {
      if (TypeUtil.isFunction(metadata))
        return queue.setMetadata(metadata(queue.metadata));
      return queue.setMetadata(metadata);
    }
  }, "setter");
  const getter = /* @__PURE__ */ __name(() => {
    return queue?.metadata;
  }, "getter");
  return [getter, setter];
}
__name(useMetadata, "useMetadata");

// src/hooks/useTimeline.ts
function useTimeline(node, options) {
  const _node = node ?? useHooksContext("useTimeline").guild;
  const queue = getQueue(_node);
  if (!queue)
    return null;
  return Object.preventExtensions({
    get timestamp() {
      return queue.node.getTimestamp(options?.ignoreFilters);
    },
    get volume() {
      return queue.node.volume;
    },
    get paused() {
      return queue.node.isPaused();
    },
    get track() {
      return queue.currentTrack;
    },
    pause() {
      return queue.node.pause();
    },
    resume() {
      return queue.node.resume();
    },
    setVolume(vol) {
      return queue.node.setVolume(vol);
    },
    async setPosition(time) {
      return queue.node.seek(time);
    }
  });
}
__name(useTimeline, "useTimeline");

// src/hooks/stream/onAfterCreateStream.ts
function onAfterCreateStream(handler2) {
  getGlobalRegistry().set("@[onAfterCreateStream]", handler2);
}
__name(onAfterCreateStream, "onAfterCreateStream");

// src/hooks/stream/onBeforeCreateStream.ts
function onBeforeCreateStream(handler2) {
  getGlobalRegistry().set("@[onBeforeCreateStream]", handler2);
}
__name(onBeforeCreateStream, "onBeforeCreateStream");

// src/hooks/useVolume.ts
function useVolume(node) {
  const _node = node ?? useHooksContext("useVolume").guild;
  const queue = getQueue(_node);
  const setter = /* @__PURE__ */ __name((volume) => {
    if (queue) {
      if (TypeUtil.isFunction(volume))
        return queue.node.setVolume(volume(queue.node.volume));
      return queue.node.setVolume(volume);
    }
  }, "setter");
  const getter = /* @__PURE__ */ __name(() => {
    return queue?.node.volume;
  }, "getter");
  return [getter, setter];
}
__name(useVolume, "useVolume");

// src/Player.ts
var kSingleton = Symbol("InstanceDiscordPlayerSingleton");
var _lastLatency, _voiceStateUpdateListener, _lagMonitorTimeout, _lagMonitorInterval, _onVoiceStateUpdate, _hooksCtx;
var _Player = class _Player extends PlayerEventsEmitter {
  /**
   * Creates new Discord Player
   * @param {Client} client The Discord Client
   * @param {PlayerInitOptions} [options] The player init options
   */
  constructor(client, options = {}) {
    if (!options.ignoreInstance && kSingleton in _Player)
      return _Player[kSingleton];
    super([PlayerEvent.Error]);
    __privateAdd(this, _lastLatency, -1);
    __privateAdd(this, _voiceStateUpdateListener, this.handleVoiceState.bind(this));
    __privateAdd(this, _lagMonitorTimeout, void 0);
    __privateAdd(this, _lagMonitorInterval, void 0);
    __privateAdd(this, _onVoiceStateUpdate, defaultVoiceStateHandler);
    __privateAdd(this, _hooksCtx, null);
    /**
     * The unique identifier of this player instance
     */
    this.id = import_discord5.SnowflakeUtil.generate().toString();
    /**
     * The player nodes (queue) manager
     */
    this.nodes = new GuildNodeManager(this);
    /**
     * The voice api utilities
     */
    this.voiceUtils = new VoiceUtils(this);
    /**
     * The extractors manager
     */
    this.extractors = new ExtractorExecutionContext(this);
    /**
     * The player events channel
     */
    this.events = new PlayerEventsEmitter([GuildQueueEvent.Error, GuildQueueEvent.PlayerError]);
    /**
     * The route planner
     */
    this.routePlanner = null;
    /**
     * The player version
     */
    this.version = _Player.version;
    /**
     * The lyrics api
     */
    this.lyrics = new LrcLib(this);
    this.client = client;
    try {
      if (!(client instanceof import_discord5.Client)) {
        Util.warn(
          `Client is not an instance of discord.js@${import_discord5.version} client, some things may not work correctly. This can happen due to corrupt dependencies or having multiple installations of discord.js.`,
          "InvalidClientInstance"
        );
      }
      const ibf = this.client.options.intents instanceof import_discord5.IntentsBitField ? this.client.options.intents : new import_discord5.IntentsBitField(this.client.options.intents);
      if (!ibf.has(import_discord5.IntentsBitField.Flags.GuildVoiceStates)) {
        Util.warn('client is missing "GuildVoiceStates" intent', "InvalidIntentsBitField");
      }
    } catch {
    }
    this.options = {
      lockVoiceStateHandler: false,
      blockExtractors: [],
      blockStreamFrom: [],
      connectionTimeout: 2e4,
      lagMonitor: 3e4,
      queryCache: options.queryCache === null ? null : options.queryCache || new QueryCache(this),
      useLegacyFFmpeg: false,
      skipFFmpeg: true,
      probeTimeout: 5e3,
      ...options,
      ytdlOptions: {
        highWaterMark: 1 << 25,
        ...options.ytdlOptions
      }
    };
    this.client.incrementMaxListeners();
    this.client.on(import_discord5.Events.VoiceStateUpdate, __privateGet(this, _voiceStateUpdateListener));
    if (typeof this.options.lagMonitor === "number" && this.options.lagMonitor > 0) {
      __privateSet(this, _lagMonitorInterval, setInterval(() => {
        const start = performance.now();
        __privateSet(this, _lagMonitorTimeout, setTimeout(() => {
          __privateSet(this, _lastLatency, performance.now() - start);
          if (this.hasDebugger)
            this.debug(`[Lag Monitor] Event loop latency: ${__privateGet(this, _lastLatency)}ms`);
        }, 0).unref());
      }, this.options.lagMonitor).unref());
    }
    if (this.options.ipconfig) {
      this.routePlanner = new IPRotator(this.options.ipconfig);
    }
    addPlayer(this);
    if (!(kSingleton in _Player)) {
      Object.defineProperty(_Player, kSingleton, {
        value: this,
        writable: true,
        configurable: true,
        enumerable: false
      });
    }
  }
  /**
   * The hooks context for this player instance.
   */
  get context() {
    if (!__privateGet(this, _hooksCtx)) {
      __privateSet(this, _hooksCtx, createContext());
    }
    return __privateGet(this, _hooksCtx);
  }
  /**
   * Override default voice state update handler
   * @param handler The handler callback
   */
  onVoiceStateUpdate(handler2) {
    __privateSet(this, _onVoiceStateUpdate, handler2);
  }
  debug(m) {
    return this.emit("debug", m);
  }
  /**
   * Creates discord-player singleton instance.
   * @param client The client that instantiated player
   * @param options Player initializer options
   */
  static singleton(client, options = {}) {
    return new _Player(client, {
      ...options,
      ignoreInstance: false
    });
  }
  /**
   * Creates new discord-player instance.
   * @param client The client that instantiated player
   * @param options Player initializer options
   */
  static create(client, options = {}) {
    return new _Player(client, {
      ...options,
      ignoreInstance: true
    });
  }
  /**
   * Get all active master player instances
   */
  static getAllPlayers() {
    return getPlayers();
  }
  /**
   * Clear all master player instances
   */
  static clearAllPlayers() {
    return instances.clear();
  }
  /**
   * The current query cache provider in use
   */
  get queryCache() {
    return this.options.queryCache ?? null;
  }
  /**
   * Alias to `Player.nodes`.
   */
  get queues() {
    return this.nodes;
  }
  /**
   * Event loop latency in ms. If your bot is laggy and this returns a number above 20ms for example,
   * some expensive task is being executed on the current thread which is slowing down the event loop.
   * @type {number}
   */
  get eventLoopLag() {
    return __privateGet(this, _lastLatency);
  }
  /**
   * Generates statistics that could be useful. Statistics generator is still experimental.
   * @example ```typescript
   * const stats = player.generateStatistics();
   *
   * console.log(stats);
   *
   * // outputs something like
   * // {
   * //   instances: number,
   * //   queuesCount: number,
   * //   queryCacheEnabled: boolean,
   * //   queues: [
   * //      GuildQueueStatisticsMetadata,
   * //      GuildQueueStatisticsMetadata,
   * //      GuildQueueStatisticsMetadata,
   * //      ...
   * //   ]
   * // }
   * ```
   */
  generateStatistics() {
    return {
      instances: instances.size,
      queuesCount: this.queues.cache.size,
      queryCacheEnabled: this.queryCache != null,
      queues: this.queues.cache.map((m) => m.stats.generate())
    };
  }
  /**
   * Destroy every single queues managed by this master player instance
   * @example ```typescript
   * // use me when you want to immediately terminate every single queues in existence 🔪
   * await player.destroy();
   * ```
   */
  async destroy() {
    this.nodes.cache.forEach((node) => node.delete());
    this.client.off(import_discord5.Events.VoiceStateUpdate, __privateGet(this, _voiceStateUpdateListener));
    this.client.decrementMaxListeners();
    this.removeAllListeners();
    this.events.removeAllListeners();
    await this.extractors.unregisterAll();
    if (__privateGet(this, _lagMonitorInterval))
      clearInterval(__privateGet(this, _lagMonitorInterval));
    if (__privateGet(this, _lagMonitorTimeout))
      clearInterval(__privateGet(this, _lagMonitorTimeout));
    clearPlayer(this);
  }
  _handleVoiceState(oldState, newState) {
    const queue = this.nodes.get(oldState.guild.id);
    if (!queue || !queue.connection || !queue.channel)
      return;
    const wasHandled = this.events.emit(GuildQueueEvent.voiceStateUpdate, queue, oldState, newState);
    if (wasHandled && !this.options.lockVoiceStateHandler)
      return;
    return __privateGet(this, _onVoiceStateUpdate).call(this, this, queue, oldState, newState);
  }
  /**
   * Handles voice state update
   * @param {VoiceState} oldState The old voice state
   * @param {VoiceState} newState The new voice state
   * @returns {void}
   * @example ```typescript
   * // passing voice state update data to this method will trigger voice state handler
   *
   * client.on('voiceStateUpdate', (oldState, newState) => {
   *   // this is definitely a rocket science, right here
   *   player.handleVoiceState(oldState, newState);
   * });
   * ```
   */
  handleVoiceState(oldState, newState) {
    this._handleVoiceState(oldState, newState);
  }
  /**
   * Lock voice state handler. When this method is called, discord-player will keep using the default voice state update handler, even if custom implementation exists.
   */
  lockVoiceStateHandler() {
    this.options.lockVoiceStateHandler = true;
  }
  /**
   * Unlock voice state handler. When this method is called, discord-player will stop using the default voice state update handler if custom implementation exists.
   */
  unlockVoiceStateHandler() {
    this.options.lockVoiceStateHandler = false;
  }
  /**
   * Checks if voice state handler is locked.
   */
  isVoiceStateHandlerLocked() {
    return !!this.options.lockVoiceStateHandler;
  }
  /**
   * Initiate audio player
   * @param channel The voice channel on which the music should be played
   * @param query The track or source to play
   * @param options Options for player
   * @example ```typescript
   * // no need to worry about queue management, just use this method 😄
   * const query = 'this is my super cool search query that I want to play';
   *
   * try {
   *    const { track } = await player.play(voiceChannel, query);
   *   console.log(`🎉 I am playing ${track.title} 🎉`);
   * } catch(e) {
   *   console.log(`😭 Failed to play error oh no:\n\n${e}`);
   * }
   * ```
   */
  async play(channel, query, options = {}) {
    const vc = this.client.channels.resolve(channel);
    if (!vc?.isVoiceBased())
      throw Exceptions.ERR_INVALID_ARG_TYPE("channel", "VoiceBasedChannel", !vc ? "undefined" : `channel type ${vc.type}`);
    const originalResult = query instanceof SearchResult ? query : await this.search(query, options);
    const result = await options.afterSearch?.(originalResult) || originalResult;
    if (result.isEmpty()) {
      throw Exceptions.ERR_NO_RESULT(`No results found for "${query}" (Extractor: ${result.extractor?.identifier || "N/A"})`);
    }
    const queue = this.nodes.create(vc.guild, options.nodeOptions);
    if (this.hasDebugger)
      this.debug(`[AsyncQueue] Acquiring an entry...`);
    const entry = queue.tasksQueue.acquire({ signal: options.signal });
    if (this.hasDebugger)
      this.debug(`[AsyncQueue] Entry ${entry.id} was acquired successfully!`);
    if (this.hasDebugger)
      this.debug(`[AsyncQueue] Waiting for the queue to resolve...`);
    await entry.getTask();
    if (this.hasDebugger)
      this.debug(`[AsyncQueue] Entry ${entry.id} was resolved!`);
    try {
      if (!queue.channel)
        await queue.connect(vc, options.connectionOptions);
      if (!result.playlist) {
        queue.addTrack(result.tracks[0]);
      } else {
        queue.addTrack(result.playlist);
      }
      if (!queue.isPlaying())
        await queue.node.play(null, options.audioPlayerOptions);
    } finally {
      if (this.hasDebugger)
        this.debug(`[AsyncQueue] Releasing an entry from the queue...`);
      queue.tasksQueue.release();
    }
    return {
      track: result.tracks[0],
      extractor: result.extractor,
      searchResult: result,
      queue
    };
  }
  /**
   * Search tracks
   * @param {string | Track | Track[] | Playlist | SearchResult} query The search query
   * @param {SearchOptions} options The search options
   * @returns {Promise<SearchResult>}
   * @example ```typescript
   * const searchQuery = 'pass url or text or discord-player track constructable objects, we got you covered 😎';
   * const result = await player.search(searchQuery);
   *
   * console.log(result); // Logs `SearchResult` object
   * ```
   */
  async search(searchQuery, options = {}) {
    if (searchQuery instanceof SearchResult)
      return searchQuery;
    if (options.requestedBy != null)
      options.requestedBy = this.client.users.resolve(options.requestedBy);
    options.blockExtractors ?? (options.blockExtractors = this.options.blockExtractors);
    options.fallbackSearchEngine ?? (options.fallbackSearchEngine = QueryType.AUTO_SEARCH);
    if (searchQuery instanceof Track) {
      return new SearchResult(this, {
        playlist: searchQuery.playlist || null,
        tracks: [searchQuery],
        query: searchQuery.title,
        extractor: searchQuery.extractor,
        queryType: searchQuery.queryType,
        requestedBy: options.requestedBy
      });
    }
    if (searchQuery instanceof Playlist) {
      return new SearchResult(this, {
        playlist: searchQuery,
        tracks: searchQuery.tracks,
        query: searchQuery.title,
        extractor: searchQuery.tracks[0]?.extractor,
        queryType: QueryType.AUTO,
        requestedBy: options.requestedBy
      });
    }
    if (Array.isArray(searchQuery)) {
      const tracks = searchQuery.filter((t) => t instanceof Track);
      return new SearchResult(this, {
        playlist: null,
        tracks,
        query: "@@#%{{UserLoadedContent}}%#@@",
        extractor: null,
        queryType: QueryType.AUTO,
        requestedBy: options.requestedBy
      });
    }
    if (this.hasDebugger)
      this.debug(`Searching ${searchQuery}`);
    let extractor = null, protocol = null;
    options.searchEngine ?? (options.searchEngine = QueryType.AUTO);
    options.fallbackSearchEngine ?? (options.fallbackSearchEngine = QueryType.AUTO_SEARCH);
    if (this.hasDebugger)
      this.debug(`Search engine set to ${options.searchEngine}, fallback search engine set to ${options.fallbackSearchEngine}`);
    if (/^\w+:/.test(searchQuery)) {
      const [protocolName, ...query2] = searchQuery.split(":");
      if (this.hasDebugger)
        this.debug(`Protocol ${protocolName} detected in query`);
      const matchingExtractor = this.extractors.store.find((e) => !this.extractors.isDisabled(e.identifier) && e.protocols.includes(protocolName));
      if (matchingExtractor) {
        if (this.hasDebugger)
          this.debug(`Protocol ${protocolName} is supported by ${matchingExtractor.identifier} extractor!`);
        extractor = matchingExtractor;
        searchQuery = query2.join(":");
        protocol = protocolName;
      } else {
        if (this.hasDebugger)
          this.debug(`Could not find an extractor that supports ${protocolName} protocol. Falling back to default behavior...`);
      }
    }
    const redirected = await QueryResolver.preResolve(searchQuery);
    const { type: queryType, query } = options.searchEngine === QueryType.AUTO ? QueryResolver.resolve(redirected, options.fallbackSearchEngine) : { type: options.searchEngine, query: redirected };
    if (this.hasDebugger)
      this.debug(`Query type identified as ${queryType}${extractor && protocol ? " but might not be used due to the presence of protocol" : ""}`);
    if (options.searchEngine.startsWith("ext:")) {
      if (this.hasDebugger)
        this.debug(`Forcing ${options.searchEngine.substring(4)} extractor...`);
      extractor = this.extractors.get(options.searchEngine.substring(4));
      if (!extractor)
        return new SearchResult(this, {
          query,
          queryType,
          extractor,
          requestedBy: options.requestedBy
        });
    }
    if (!extractor) {
      if (!options.ignoreCache) {
        if (this.hasDebugger)
          this.debug(`Checking cache...`);
        const res2 = await this.queryCache?.resolve({
          query,
          queryType,
          requestedBy: options.requestedBy
        });
        if (res2?.hasTracks()) {
          if (this.hasDebugger)
            this.debug(`Cache hit for query ${query}`);
          return res2;
        }
        if (this.hasDebugger)
          this.debug(`Cache miss for query ${query}`);
      }
      if (this.hasDebugger)
        this.debug(`Executing extractors...`);
      extractor = (await this.extractors.run(async (ext) => {
        if (options.blockExtractors?.includes(ext.identifier))
          return false;
        return ext.validate(query, queryType);
      }))?.extractor || null;
    }
    if (!extractor) {
      if (this.hasDebugger)
        this.debug("Failed to find appropriate extractor");
      return new SearchResult(this, {
        query,
        queryType,
        requestedBy: options.requestedBy
      });
    }
    if (this.hasDebugger)
      this.debug(`Executing metadata query using ${extractor.identifier} extractor...`);
    const res = await extractor.handle(query, {
      type: queryType,
      requestedBy: options.requestedBy,
      requestOptions: options.requestOptions,
      protocol
    }).catch(() => null);
    if (res) {
      if (this.hasDebugger)
        this.debug("Metadata query was successful!");
      const result2 = new SearchResult(this, {
        query,
        queryType,
        playlist: res.playlist,
        tracks: res.tracks,
        extractor,
        requestedBy: options.requestedBy
      });
      if (!options.ignoreCache) {
        if (this.hasDebugger)
          this.debug(`Adding data to cache...`);
        await this.queryCache?.addData(result2);
      }
      return result2;
    }
    if (this.hasDebugger)
      this.debug("Failed to find result using appropriate extractor. Querying all extractors...");
    const result = await this.extractors.run(
      async (ext) => !options.blockExtractors?.includes(ext.identifier) && await ext.validate(query) && ext.handle(query, {
        type: queryType,
        requestedBy: options.requestedBy,
        requestOptions: options.requestOptions,
        protocol
      })
    );
    if (!result?.result) {
      if (this.hasDebugger)
        this.debug(`Failed to query metadata query using ${result?.extractor.identifier || "N/A"} extractor.`);
      return new SearchResult(this, {
        query,
        queryType,
        requestedBy: options.requestedBy,
        extractor: result?.extractor
      });
    }
    if (this.hasDebugger)
      this.debug(`Metadata query was successful using ${result.extractor.identifier}!`);
    const data = new SearchResult(this, {
      query,
      queryType,
      playlist: result.result.playlist,
      tracks: result.result.tracks,
      extractor: result.extractor,
      requestedBy: options.requestedBy
    });
    if (!options.ignoreCache) {
      if (this.hasDebugger)
        this.debug(`Adding data to cache...`);
      await this.queryCache?.addData(data);
    }
    return data;
  }
  /**
   * Generates a report of the dependencies used by the `discord-voip` module. Useful for debugging.
   * @example ```typescript
   * console.log(player.scanDeps());
   * // -> logs dependencies report
   * ```
   * @returns {string}
   */
  scanDeps() {
    const line = "-".repeat(50);
    const runtime = "Bun" in globalThis ? "Bun" : "Deno" in globalThis ? "Deno" : "Node";
    const depsReport = [
      "Discord Player",
      line,
      `- discord-player: ${_Player.version}`,
      `- discord-voip: ${import_discord_voip6.version}`,
      `- discord.js: ${import_discord5.version}`,
      `- Node version: ${process.version} (Detected Runtime: ${runtime}, Platform: ${process.platform} [${process.arch}])`,
      (() => {
        if (this.options.useLegacyFFmpeg)
          return "- ffmpeg: N/A (using legacy ffmpeg)";
        const info = import_ffmpeg2.FFmpeg.locateSafe();
        if (!info)
          return "FFmpeg/Avconv not found";
        return [`- ffmpeg: ${info.version}`, `- command: ${info.command}`, `- static: ${info.isStatic}`, `- libopus: ${info.metadata.includes("--enable-libopus")}`].join("\n");
      })(),
      "\n",
      "Loaded Extractors:",
      line,
      this.extractors.store.map((m) => {
        return m.identifier;
      }).join("\n") || "N/A",
      "\n\ndiscord-voip",
      (0, import_discord_voip6.generateDependencyReport)()
    ];
    return depsReport.join("\n");
  }
  *[Symbol.iterator]() {
    yield* this.nodes.cache.values();
  }
  /**
   * Creates `Playlist` instance
   * @param data The data to initialize a playlist
   */
  createPlaylist(data) {
    return new Playlist(this, data);
  }
};
_lastLatency = new WeakMap();
_voiceStateUpdateListener = new WeakMap();
_lagMonitorTimeout = new WeakMap();
_lagMonitorInterval = new WeakMap();
_onVoiceStateUpdate = new WeakMap();
_hooksCtx = new WeakMap();
__name(_Player, "Player");
/**
 * The version of discord-player
 */
_Player.version = "6.7.1";
_Player._singletonKey = kSingleton;
var Player = _Player;

// src/index.ts
var import_equalizer3 = require("@discord-player/equalizer");
var import_discord_voip7 = require("discord-voip");
var version = "6.7.1";
if (!import_discord6.version.startsWith("14")) {
  process.emitWarning(`Discord.js v${import_discord6.version} is incompatible with Discord Player v${version}! Please use >=v14.x of Discord.js`);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AF_NIGHTCORE_RATE,
  AF_VAPORWAVE_RATE,
  AFilterGraph,
  AsyncQueue,
  AsyncQueueEntry,
  AudioFilters,
  AudioPlayer,
  BASS_EQ_BANDS,
  BaseExtractor,
  BiquadFilterType,
  Context,
  DiscordPlayerQueryResultCache,
  EqualizerConfigurationPreset,
  ExtractorExecutionContext,
  FFMPEG_ARGS_PIPED,
  FFMPEG_ARGS_STRING,
  FFMPEG_SRATE_REGEX,
  FFmpegFilterer,
  FiltersChain,
  GuildNodeManager,
  GuildQueue,
  GuildQueueAudioFilters,
  GuildQueueEvent,
  GuildQueueHistory,
  GuildQueuePlayerNode,
  GuildQueueStatistics,
  IPBlock,
  IPRotator,
  LrcLib,
  PCMAudioFilters,
  Player,
  PlayerEvent,
  PlayerEventsEmitter,
  Playlist,
  Q_BUTTERWORTH,
  QueryCache,
  QueryResolver,
  QueryType,
  QueueRepeatMode,
  SearchResult,
  SequentialBucket,
  SerializedType,
  StreamDispatcher,
  Track,
  TrackSkipReason,
  TypeUtil,
  Util,
  VALIDATE_QUEUE_CAP,
  VoiceReceiverNode,
  VoiceUtils,
  VolumeTransformer,
  createAudioPlayer,
  createContext,
  createFFmpegStream,
  createHook,
  decode,
  deserialize,
  encode,
  onAfterCreateStream,
  onBeforeCreateStream,
  serialize,
  tryIntoThumbnailString,
  useContext,
  useHistory,
  useMainPlayer,
  useMasterPlayer,
  useMetadata,
  usePlayer,
  useQueue,
  useTimeline,
  useVolume,
  version,
  ...require("@discord-player/ffmpeg")
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2luZGV4LnRzIiwgIi4uL3NyYy91dGlscy9QbGF5ZXJFdmVudHNFbWl0dGVyLnRzIiwgIi4uL3NyYy91dGlscy9VdGlsLnRzIiwgIi4uL3NyYy9mYWJyaWMvVHJhY2sudHMiLCAiLi4vc3JjL3V0aWxzL1R5cGVVdGlsLnRzIiwgIi4uL3NyYy9lcnJvcnMvaW5kZXgudHMiLCAiLi4vc3JjL3V0aWxzL3NlcmRlLnRzIiwgIi4uL3NyYy9mYWJyaWMvUGxheWxpc3QudHMiLCAiLi4vc3JjL3R5cGVzL3R5cGVzLnRzIiwgIi4uL3NyYy9mYWJyaWMvU2VhcmNoUmVzdWx0LnRzIiwgIi4uL3NyYy91dGlscy9BdWRpb0ZpbHRlcnMudHMiLCAiLi4vc3JjL2V4dHJhY3RvcnMvQmFzZUV4dHJhY3Rvci50cyIsICIuLi9zcmMvZXh0cmFjdG9ycy9FeHRyYWN0b3JFeGVjdXRpb25Db250ZXh0LnRzIiwgIi4uL3NyYy9xdWV1ZS9HdWlsZE5vZGVNYW5hZ2VyLnRzIiwgIi4uL3NyYy9xdWV1ZS9HdWlsZFF1ZXVlLnRzIiwgIi4uL3NyYy9Wb2ljZUludGVyZmFjZS9TdHJlYW1EaXNwYXRjaGVyLnRzIiwgIi4uL3NyYy9xdWV1ZS9Wb2ljZVJlY2VpdmVyTm9kZS50cyIsICIuLi9zcmMvcXVldWUvR3VpbGRRdWV1ZUhpc3RvcnkudHMiLCAiLi4vc3JjL3F1ZXVlL0d1aWxkUXVldWVQbGF5ZXJOb2RlLnRzIiwgIi4uL3NyYy91dGlscy9RdWVyeVJlc29sdmVyLnRzIiwgIi4uL3NyYy91dGlscy9Bc3luY1F1ZXVlLnRzIiwgIi4uL3NyYy9xdWV1ZS9HdWlsZFF1ZXVlQXVkaW9GaWx0ZXJzLnRzIiwgIi4uL3NyYy91dGlscy9GRm1wZWdTdHJlYW0udHMiLCAiLi4vc3JjL3F1ZXVlL0d1aWxkUXVldWVTdGF0aXN0aWNzLnRzIiwgIi4uL3NyYy9xdWV1ZS9TeW5jZWRMeXJpY3NQcm92aWRlci50cyIsICIuLi9zcmMvdXRpbHMvX19pbnRlcm5hbF9fL19jb250YWluZXIudHMiLCAiLi4vc3JjL3V0aWxzL19faW50ZXJuYWxfXy9hZGRQbGF5ZXIudHMiLCAiLi4vc3JjL3V0aWxzL19faW50ZXJuYWxfXy9jbGVhclBsYXllci50cyIsICIuLi9zcmMvdXRpbHMvX19pbnRlcm5hbF9fL2dldFBsYXllcnMudHMiLCAiLi4vc3JjL3V0aWxzL19faW50ZXJuYWxfXy9nZXRHbG9iYWxSZWdpc3RyeS50cyIsICIuLi9zcmMvdXRpbHMvU2VxdWVudGlhbEJ1Y2tldC50cyIsICIuLi9zcmMvbHJjbGliL0xyY0xpYi50cyIsICIuLi9zcmMvVm9pY2VJbnRlcmZhY2UvVm9pY2VVdGlscy50cyIsICIuLi9zcmMvdXRpbHMvUXVlcnlDYWNoZS50cyIsICIuLi9zcmMvUGxheWVyLnRzIiwgIi4uL3NyYy9EZWZhdWx0Vm9pY2VTdGF0ZUhhbmRsZXIudHMiLCAiLi4vc3JjL3V0aWxzL0lQUm90YXRvci50cyIsICIuLi9zcmMvaG9va3MvY29udGV4dC9hc3luYy1jb250ZXh0LnRzIiwgIi4uL3NyYy9ob29rcy9jb21tb24udHMiLCAiLi4vc3JjL2hvb2tzL3VzZUhpc3RvcnkudHMiLCAiLi4vc3JjL2hvb2tzL3VzZVBsYXllci50cyIsICIuLi9zcmMvaG9va3MvdXNlUXVldWUudHMiLCAiLi4vc3JjL2hvb2tzL3VzZU1haW5QbGF5ZXIudHMiLCAiLi4vc3JjL2hvb2tzL3VzZU1ldGFkYXRhLnRzIiwgIi4uL3NyYy9ob29rcy91c2VUaW1lbGluZS50cyIsICIuLi9zcmMvaG9va3Mvc3RyZWFtL29uQWZ0ZXJDcmVhdGVTdHJlYW0udHMiLCAiLi4vc3JjL2hvb2tzL3N0cmVhbS9vbkJlZm9yZUNyZWF0ZVN0cmVhbS50cyIsICIuLi9zcmMvaG9va3MvdXNlVm9sdW1lLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyB2ZXJzaW9uIGFzIGRqc1ZlcnNpb24gfSBmcm9tICdkaXNjb3JkLmpzJztcblxuZXhwb3J0ICogZnJvbSAnLi91dGlscy9QbGF5ZXJFdmVudHNFbWl0dGVyJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMvQXVkaW9GaWx0ZXJzJztcbmV4cG9ydCAqIGZyb20gJy4vZXh0cmFjdG9ycy9CYXNlRXh0cmFjdG9yJztcbmV4cG9ydCAqIGZyb20gJy4vZXh0cmFjdG9ycy9FeHRyYWN0b3JFeGVjdXRpb25Db250ZXh0JztcbmV4cG9ydCAqIGZyb20gJy4vZmFicmljJztcbmV4cG9ydCAqIGZyb20gJy4vcXVldWUnO1xuZXhwb3J0ICogZnJvbSAnLi9scmNsaWIvTHJjTGliJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMvU2VxdWVudGlhbEJ1Y2tldCc7XG5leHBvcnQgKiBmcm9tICcuL1ZvaWNlSW50ZXJmYWNlL1ZvaWNlVXRpbHMnO1xuZXhwb3J0ICogZnJvbSAnLi9Wb2ljZUludGVyZmFjZS9TdHJlYW1EaXNwYXRjaGVyJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMvVXRpbCc7XG5leHBvcnQgKiBmcm9tICcuL3V0aWxzL1R5cGVVdGlsJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMvQXN5bmNRdWV1ZSc7XG5leHBvcnQgKiBmcm9tICcuL3R5cGVzL3R5cGVzJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMvRkZtcGVnU3RyZWFtJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMvUXVlcnlDYWNoZSc7XG5leHBvcnQgKiBmcm9tICcuL3V0aWxzL1F1ZXJ5UmVzb2x2ZXInO1xuZXhwb3J0ICogZnJvbSAnQGRpc2NvcmQtcGxheWVyL2ZmbXBlZyc7XG5leHBvcnQgKiBmcm9tICcuL1BsYXllcic7XG5leHBvcnQgKiBmcm9tICcuL2hvb2tzJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMvSVBSb3RhdG9yJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMvc2VyZGUnO1xuZXhwb3J0IHtcbiAgICBBdWRpb0ZpbHRlcnMgYXMgUENNQXVkaW9GaWx0ZXJzLFxuICAgIHR5cGUgQmlxdWFkRmlsdGVycyxcbiAgICBGaWx0ZXJUeXBlIGFzIEJpcXVhZEZpbHRlclR5cGUsXG4gICAgdHlwZSBQQ01GaWx0ZXJzLFxuICAgIFFfQlVUVEVSV09SVEgsXG4gICAgVm9sdW1lVHJhbnNmb3JtZXIsXG4gICAgQkFTU19FUV9CQU5EUyxcbiAgICBBRl9OSUdIVENPUkVfUkFURSxcbiAgICBBRl9WQVBPUldBVkVfUkFURSxcbiAgICBGaWx0ZXJzQ2hhaW5cbn0gZnJvbSAnQGRpc2NvcmQtcGxheWVyL2VxdWFsaXplcic7XG5leHBvcnQgeyBjcmVhdGVBdWRpb1BsYXllciwgQXVkaW9QbGF5ZXIsIHR5cGUgQ3JlYXRlQXVkaW9QbGF5ZXJPcHRpb25zIH0gZnJvbSAnZGlzY29yZC12b2lwJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1pbmZlcnJhYmxlLXR5cGVzXG5leHBvcnQgY29uc3QgdmVyc2lvbjogc3RyaW5nID0gJzYuNy4xJztcblxuaWYgKCFkanNWZXJzaW9uLnN0YXJ0c1dpdGgoJzE0JykpIHtcbiAgICBwcm9jZXNzLmVtaXRXYXJuaW5nKGBEaXNjb3JkLmpzIHYke2Rqc1ZlcnNpb259IGlzIGluY29tcGF0aWJsZSB3aXRoIERpc2NvcmQgUGxheWVyIHYke3ZlcnNpb259ISBQbGVhc2UgdXNlID49djE0Lnggb2YgRGlzY29yZC5qc2ApO1xufVxuIiwgImltcG9ydCB7IERlZmF1bHRMaXN0ZW5lciB9IGZyb20gJ0BkaXNjb3JkLXBsYXllci91dGlscyc7XG5pbXBvcnQgeyBMaXN0ZW5lclNpZ25hdHVyZSB9IGZyb20gJ0BkaXNjb3JkLXBsYXllci91dGlscyc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAZGlzY29yZC1wbGF5ZXIvdXRpbHMnO1xuaW1wb3J0IHsgVXRpbCB9IGZyb20gJy4vVXRpbCc7XG5cbmV4cG9ydCBjbGFzcyBQbGF5ZXJFdmVudHNFbWl0dGVyPEwgZXh0ZW5kcyBMaXN0ZW5lclNpZ25hdHVyZTxMPiA9IERlZmF1bHRMaXN0ZW5lcj4gZXh0ZW5kcyBFdmVudEVtaXR0ZXI8TD4ge1xuICAgICNoYXNEZWJ1Z2dlciA9IGZhbHNlO1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgcmVxdWlyZWRFdmVudHM6IEFycmF5PGtleW9mIEw+ID0gW10pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb248SyBleHRlbmRzIGtleW9mIEw+KG5hbWU6IEssIGxpc3RlbmVyOiBMW0tdKSB7XG4gICAgICAgIGlmIChuYW1lID09PSAnZGVidWcnKSB7XG4gICAgICAgICAgICB0aGlzLiNoYXNEZWJ1Z2dlciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3VwZXIub24obmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbmNlPEsgZXh0ZW5kcyBrZXlvZiBMPihuYW1lOiBLLCBsaXN0ZW5lcjogTFtLXSkge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ2RlYnVnJykge1xuICAgICAgICAgICAgdGhpcy4jaGFzRGVidWdnZXIgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN1cGVyLm9uY2UobmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhZGRMaXN0ZW5lcjxLIGV4dGVuZHMga2V5b2YgTD4obmFtZTogSywgbGlzdGVuZXI6IExbS10pIHtcbiAgICAgICAgaWYgKG5hbWUgPT09ICdkZWJ1ZycpIHtcbiAgICAgICAgICAgIHRoaXMuI2hhc0RlYnVnZ2VyID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdXBlci5hZGRMaXN0ZW5lcihuYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgcHVibGljIG9mZjxLIGV4dGVuZHMga2V5b2YgTD4obmFtZTogSywgbGlzdGVuZXI6IExbS10pIHtcbiAgICAgICAgdGhpcy4jaGFzRGVidWdnZXIgPSB0aGlzLmxpc3RlbmVyQ291bnQoJ2RlYnVnJyBhcyBLKSA+IDA7XG5cbiAgICAgICAgcmV0dXJuIHN1cGVyLm9mZihuYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbW92ZUxpc3RlbmVyPEsgZXh0ZW5kcyBrZXlvZiBMPihuYW1lOiBLLCBsaXN0ZW5lcjogTFtLXSkge1xuICAgICAgICB0aGlzLiNoYXNEZWJ1Z2dlciA9IHRoaXMubGlzdGVuZXJDb3VudCgnZGVidWcnIGFzIEspID4gMDtcblxuICAgICAgICByZXR1cm4gc3VwZXIucmVtb3ZlTGlzdGVuZXIobmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVBbGxMaXN0ZW5lcnM8SyBleHRlbmRzIGtleW9mIEw+KG5hbWU/OiBLKSB7XG4gICAgICAgIHRoaXMuI2hhc0RlYnVnZ2VyID0gdGhpcy5saXN0ZW5lckNvdW50KCdkZWJ1ZycgYXMgSykgPiAwO1xuXG4gICAgICAgIHJldHVybiBzdXBlci5yZW1vdmVBbGxMaXN0ZW5lcnMobmFtZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGVtaXQ8SyBleHRlbmRzIGtleW9mIEw+KG5hbWU6IEssIC4uLmFyZ3M6IFBhcmFtZXRlcnM8TFtLXT4pIHtcbiAgICAgICAgaWYgKHRoaXMucmVxdWlyZWRFdmVudHMuaW5jbHVkZXMobmFtZSkgJiYgIXRoaXMuZXZlbnROYW1lcygpLmluY2x1ZGVzKG5hbWUpKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgY29uc29sZS5lcnJvciguLi5hcmdzKTtcbiAgICAgICAgICAgIFV0aWwud2FybihcbiAgICAgICAgICAgICAgICBgTm8gZXZlbnQgbGlzdGVuZXIgZm91bmQgZm9yIGV2ZW50IFwiJHtTdHJpbmcobmFtZSl9XCIuIEV2ZW50cyAke3RoaXMucmVxdWlyZWRFdmVudHMubWFwKChtKSA9PiBgXCIke1N0cmluZyhtKX1cImApLmpvaW4oJywgJyl9IG11c3QgaGF2ZSBldmVudCBsaXN0ZW5lcnMuYCxcbiAgICAgICAgICAgICAgICAnVW5oYW5kbGVkRXZlbnRzV2FybmluZydcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3VwZXIuZW1pdChuYW1lLCAuLi5hcmdzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGhhc0RlYnVnZ2VyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jaGFzRGVidWdnZXI7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IFN0YWdlQ2hhbm5lbCwgVm9pY2VDaGFubmVsIH0gZnJvbSAnZGlzY29yZC5qcyc7XG5pbXBvcnQgeyBUaW1lRGF0YSB9IGZyb20gJy4uL3R5cGVzL3R5cGVzJztcbmltcG9ydCB7IHNldFRpbWVvdXQgfSBmcm9tICdub2RlOnRpbWVycy9wcm9taXNlcyc7XG5pbXBvcnQgeyBHdWlsZFF1ZXVlIH0gZnJvbSAnLi4vcXVldWUnO1xuaW1wb3J0IHsgUGxheWxpc3QsIFRyYWNrIH0gZnJvbSAnLi4vZmFicmljJztcbmltcG9ydCB7IEV4Y2VwdGlvbnMgfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgcmFuZG9tSW50IH0gZnJvbSAnbm9kZTpjcnlwdG8nO1xuaW1wb3J0IHtcbiAgICBjcmVhdGVGaWx0ZXIsXG4gICAgY3JlYXRlU3BvdGlmeUZpbHRlcixcbiAgICBmaXhUcmFja1N1ZmZpeCxcbiAgICByZW1vdmVMaXZlLFxuICAgIHJlbW92ZVJlbWFzdGVyZWQsXG4gICAgeW91dHViZSxcbiAgICByZW1vdmVaZXJvV2lkdGgsXG4gICAgcmVwbGFjZU5ic3AsXG4gICAgcmVwbGFjZVNtYXJ0UXVvdGVzLFxuICAgIHJlbW92ZUNsZWFuRXhwbGljaXRcbn0gZnJvbSAnQHdlYi1zY3JvYmJsZXIvbWV0YWRhdGEtZmlsdGVyJztcbmltcG9ydCB7IFRyYWNrU291cmNlIH0gZnJvbSAnLi4vdHlwZXMvdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBSdW50aW1lVHlwZSA9ICdub2RlJyB8ICdkZW5vJyB8ICdidW4nIHwgJ3Vua25vd24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJ1bnRpbWUge1xuICAgIG5hbWU6IFJ1bnRpbWVUeXBlO1xuICAgIHZlcnNpb246IHN0cmluZztcbn1cblxuY2xhc3MgVXRpbCB7XG4gICAgLyoqXG4gICAgICogVXRpbHNcbiAgICAgKi9cbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHJ1bnRpbWUgaW5mb3JtYXRpb25cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0UnVudGltZSgpOiBSdW50aW1lIHtcbiAgICAgICAgY29uc3QgdmVyc2lvbiA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnID8gbmF2aWdhdG9yLnVzZXJBZ2VudCA6IG51bGw7XG5cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAodHlwZW9mIERlbm8gIT09ICd1bmRlZmluZWQnICYmIERlbm8udmVyc2lvbikgcmV0dXJuIHsgbmFtZTogJ2Rlbm8nLCB2ZXJzaW9uOiBEZW5vLnZlcnNpb24uZGVubyB9O1xuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKHR5cGVvZiBCdW4gIT09ICd1bmRlZmluZWQnICYmIEJ1bi52ZXJzaW9uKSByZXR1cm4geyBuYW1lOiAnYnVuJywgdmVyc2lvbjogQnVuLnZlcnNpb24gfTtcblxuICAgICAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MudmVyc2lvbikgcmV0dXJuIHsgbmFtZTogJ25vZGUnLCB2ZXJzaW9uOiBwcm9jZXNzLnZlcnNpb24gfTtcblxuICAgICAgICByZXR1cm4geyBuYW1lOiAndW5rbm93bicsIHZlcnNpb246IHZlcnNpb24gPz8gJ3Vua25vd24nIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBkdXJhdGlvbiBzdHJpbmdcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZHVyT2JqIFRoZSBkdXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBkdXJhdGlvblN0cmluZyhkdXJPYmo6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoZHVyT2JqKVxuICAgICAgICAgICAgLm1hcCgobSkgPT4gKGlzTmFOKG0pID8gMCA6IG0pKVxuICAgICAgICAgICAgLmpvaW4oJzonKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgbWlsbGlzZWNvbmRzIHRvIGNvbnN1bWFibGUgdGltZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWlsbGlzZWNvbmRzIFRoZSB0aW1lIGluIG1zXG4gICAgICogQHJldHVybnMge1RpbWVEYXRhfVxuICAgICAqL1xuICAgIHN0YXRpYyBwYXJzZU1TKG1pbGxpc2Vjb25kczogbnVtYmVyKSB7XG4gICAgICAgIGlmIChpc05hTihtaWxsaXNlY29uZHMpKSBtaWxsaXNlY29uZHMgPSAwO1xuICAgICAgICBjb25zdCByb3VuZCA9IG1pbGxpc2Vjb25kcyA+IDAgPyBNYXRoLmZsb29yIDogTWF0aC5jZWlsO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXlzOiByb3VuZChtaWxsaXNlY29uZHMgLyA4NjQwMDAwMCksXG4gICAgICAgICAgICBob3Vyczogcm91bmQobWlsbGlzZWNvbmRzIC8gMzYwMDAwMCkgJSAyNCxcbiAgICAgICAgICAgIG1pbnV0ZXM6IHJvdW5kKG1pbGxpc2Vjb25kcyAvIDYwMDAwKSAlIDYwLFxuICAgICAgICAgICAgc2Vjb25kczogcm91bmQobWlsbGlzZWNvbmRzIC8gMTAwMCkgJSA2MFxuICAgICAgICB9IGFzIFRpbWVEYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ1aWxkcyB0aW1lIGNvZGVcbiAgICAgKiBAcGFyYW0ge1RpbWVEYXRhfSBkdXJhdGlvbiBUaGUgZHVyYXRpb24gb2JqZWN0XG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgYnVpbGRUaW1lQ29kZShkdXJhdGlvbjogVGltZURhdGEpIHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBPYmplY3Qua2V5cyhkdXJhdGlvbik7XG4gICAgICAgIGNvbnN0IHJlcXVpcmVkID0gWydkYXlzJywgJ2hvdXJzJywgJ21pbnV0ZXMnLCAnc2Vjb25kcyddO1xuXG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IGl0ZW1zLmZpbHRlcigoeCkgPT4gcmVxdWlyZWQuaW5jbHVkZXMoeCkpLm1hcCgobSkgPT4gZHVyYXRpb25bbSBhcyBrZXlvZiBUaW1lRGF0YV0pO1xuICAgICAgICBjb25zdCBmaW5hbCA9IHBhcnNlZFxuICAgICAgICAgICAgLnNsaWNlKHBhcnNlZC5maW5kSW5kZXgoKHgpID0+IHggIT09IDApKVxuICAgICAgICAgICAgLm1hcCgoeCkgPT4geC50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJykpXG4gICAgICAgICAgICAuam9pbignOicpO1xuXG4gICAgICAgIHJldHVybiBmaW5hbC5sZW5ndGggPD0gMyA/IGAwOiR7ZmluYWwucGFkU3RhcnQoMiwgJzAnKSB8fCAwfWAgOiBmaW5hbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3JtYXRzIGR1cmF0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uIFRoZSBkdXJhdGlvbiBpbiBtc1xuICAgICAqL1xuICAgIHN0YXRpYyBmb3JtYXREdXJhdGlvbihkdXJhdGlvbjogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1aWxkVGltZUNvZGUodGhpcy5wYXJzZU1TKGR1cmF0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGlja3MgbGFzdCBpdGVtIG9mIHRoZSBnaXZlbiBhcnJheVxuICAgICAqIEBwYXJhbSB7YW55W119IGFyciBUaGUgYXJyYXlcbiAgICAgKiBAcmV0dXJucyB7YW55fVxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgc3RhdGljIGxhc3Q8VCA9IGFueT4oYXJyOiBUW10pOiBUIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG4gICAgICAgIHJldHVybiBhcnJbYXJyLmxlbmd0aCAtIDFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgdm9pY2UgY2hhbm5lbCBpcyBlbXB0eVxuICAgICAqIEBwYXJhbSB7Vm9pY2VDaGFubmVsfFN0YWdlQ2hhbm5lbH0gY2hhbm5lbCBUaGUgdm9pY2UgY2hhbm5lbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIHN0YXRpYyBpc1ZvaWNlRW1wdHkoY2hhbm5lbDogVm9pY2VDaGFubmVsIHwgU3RhZ2VDaGFubmVsKSB7XG4gICAgICAgIHJldHVybiBjaGFubmVsICYmIGNoYW5uZWwubWVtYmVycy5maWx0ZXIoKG1lbWJlcikgPT4gIW1lbWJlci51c2VyLmJvdCkuc2l6ZSA9PT0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGVhbnMgdGhlIHRyYWNrIHRpdGxlXG4gICAgICogQHBhcmFtIHRpdGxlIFRoZSB0aXRsZVxuICAgICAqIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZVxuICAgICAqIEByZXR1cm5zIENsZWFuZWQgdGl0bGVcbiAgICAgKi9cbiAgICBzdGF0aWMgY2xlYW5UaXRsZSh0aXRsZTogc3RyaW5nLCBzb3VyY2U6IFRyYWNrU291cmNlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJPcHRzID0ge1xuICAgICAgICAgICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICAgICAgICAgIHRyYWNrOiBbXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVJlbWFzdGVyZWQsXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUxpdmUsXG4gICAgICAgICAgICAgICAgICAgIGZpeFRyYWNrU3VmZml4LFxuICAgICAgICAgICAgICAgICAgICByZW1vdmVaZXJvV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIHJlcGxhY2VOYnNwLFxuICAgICAgICAgICAgICAgICAgICByZXBsYWNlU21hcnRRdW90ZXMsXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsZWFuRXhwbGljaXRcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3Qgc3BvdGlmeUZpbHRlciA9IGNyZWF0ZUZpbHRlcihmaWx0ZXJPcHRzKTtcbiAgICAgICAgICAgIHNwb3RpZnlGaWx0ZXIuZXh0ZW5kKGNyZWF0ZVNwb3RpZnlGaWx0ZXIoKSk7XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0RmlsdGVyID0gY3JlYXRlRmlsdGVyKGZpbHRlck9wdHMpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3lvdXR1YmUnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geW91dHViZSh0aXRsZSk7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3BvdGlmeSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzcG90aWZ5RmlsdGVyLmZpbHRlckZpZWxkKCd0cmFjaycsIHRpdGxlKTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVmYXVsdEZpbHRlci5maWx0ZXJGaWVsZCgndHJhY2snLCB0aXRsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIHRpdGxlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2FmZXIgcmVxdWlyZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBOb2RlIHJlcXVpcmUgaWRcbiAgICAgKiBAcmV0dXJucyB7YW55fVxuICAgICAqL1xuICAgIHN0YXRpYyByZXF1aXJlKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB7IG1vZHVsZTogcmVxdWlyZShpZCksIGVycm9yOiBudWxsIH07XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4geyBtb2R1bGU6IG51bGwsIGVycm9yIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgaW1wb3J0KGlkOiBzdHJpbmcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IG1vZCA9IGF3YWl0IGltcG9ydChpZCk7XG4gICAgICAgICAgICByZXR1cm4geyBtb2R1bGU6IG1vZCwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7IG1vZHVsZTogbnVsbCwgZXJyb3IgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzeW5jaHJvbm91cyB0aW1lb3V0XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWUgVGhlIHRpbWUgaW4gbXMgdG8gd2FpdFxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHVua25vd24+fVxuICAgICAqL1xuICAgIHN0YXRpYyB3YWl0KHRpbWU6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dCh0aW1lLCB1bmRlZmluZWQsIHsgcmVmOiBmYWxzZSB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgbm9vcCgpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG5cbiAgICBzdGF0aWMgYXN5bmMgZ2V0RmV0Y2goKSB7XG4gICAgICAgIGlmICgnZmV0Y2gnIGluIGdsb2JhbFRoaXMpIHJldHVybiBnbG9iYWxUaGlzLmZldGNoO1xuICAgICAgICBmb3IgKGNvbnN0IGxpYiBvZiBbJ25vZGUtZmV0Y2gnLCAndW5kaWNpJ10pIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGltcG9ydChsaWIpLnRoZW4oKHJlcykgPT4gcmVzLmZldGNoIHx8IHJlcy5kZWZhdWx0Py5mZXRjaCB8fCByZXMuZGVmYXVsdCk7XG4gICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gcmVxdWlyZShsaWIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzKSByZXR1cm4gcmVzLmZldGNoIHx8IHJlcy5kZWZhdWx0Py5mZXRjaCB8fCByZXMuZGVmYXVsdDtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbm8/XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIHdhcm4obWVzc2FnZTogc3RyaW5nLCBjb2RlID0gJ0RlcHJlY2F0aW9uV2FybmluZycsIGRldGFpbD86IHN0cmluZykge1xuICAgICAgICBwcm9jZXNzLmVtaXRXYXJuaW5nKG1lc3NhZ2UsIHtcbiAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICBkZXRhaWxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIHJhbmRvbUNob2ljZTxUPihzcmM6IFRbXSk6IFQge1xuICAgICAgICByZXR1cm4gc3JjW3JhbmRvbUludChzcmMubGVuZ3RoKV07XG4gICAgfVxuXG4gICAgc3RhdGljIGFycmF5Q2xvbmVTaHVmZmxlPFQ+KHNyYzogVFtdKTogVFtdIHtcbiAgICAgICAgY29uc3QgYXJyID0gc3JjLnNsaWNlKCk7XG5cbiAgICAgICAgbGV0IG0gPSBhcnIubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChtKSB7XG4gICAgICAgICAgICBjb25zdCBpID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbS0tKTtcbiAgICAgICAgICAgIFthcnJbbV0sIGFycltpXV0gPSBbYXJyW2ldLCBhcnJbbV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBWQUxJREFURV9RVUVVRV9DQVAgPSAocXVldWU6IEd1aWxkUXVldWUsIGl0ZW1zOiBQbGF5bGlzdCB8IFRyYWNrIHwgVHJhY2tbXSkgPT4ge1xuICAgIGNvbnN0IHRyYWNrcyA9IGl0ZW1zIGluc3RhbmNlb2YgUGxheWxpc3QgPyBpdGVtcy50cmFja3MgOiBBcnJheS5pc0FycmF5KGl0ZW1zKSA/IGl0ZW1zIDogW2l0ZW1zXTtcblxuICAgIGlmIChxdWV1ZS5tYXhTaXplIDwgMSB8fCBxdWV1ZS5tYXhTaXplID09PSBJbmZpbml0eSkgcmV0dXJuO1xuXG4gICAgY29uc3QgbWF4Q2FwID0gcXVldWUuZ2V0Q2FwYWNpdHkoKTtcblxuICAgIGlmIChtYXhDYXAgPCB0cmFja3MubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IEV4Y2VwdGlvbnMuRVJSX09VVF9PRl9TUEFDRSgndHJhY2tzIHF1ZXVlJywgbWF4Q2FwLCB0cmFja3MubGVuZ3RoKTtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBVdGlsIH07XG4iLCAiaW1wb3J0IHsgVXNlciwgZXNjYXBlTWFya2Rvd24sIFNub3dmbGFrZVV0aWwsIEd1aWxkVm9pY2VDaGFubmVsUmVzb2x2YWJsZSwgQVBJVXNlciB9IGZyb20gJ2Rpc2NvcmQuanMnO1xuaW1wb3J0IHsgUGxheWVyLCBQbGF5ZXJOb2RlSW5pdGlhbGl6YXRpb25SZXN1bHQsIFBsYXllck5vZGVJbml0aWFsaXplck9wdGlvbnMgfSBmcm9tICcuLi9QbGF5ZXInO1xuaW1wb3J0IHsgUmF3VHJhY2tEYXRhLCBTZWFyY2hRdWVyeVR5cGUsIFRyYWNrSlNPTiB9IGZyb20gJy4uL3R5cGVzL3R5cGVzJztcbmltcG9ydCB7IFBsYXlsaXN0IH0gZnJvbSAnLi9QbGF5bGlzdCc7XG5pbXBvcnQgeyBHdWlsZFF1ZXVlIH0gZnJvbSAnLi4vcXVldWUvR3VpbGRRdWV1ZSc7XG5pbXBvcnQgeyBCYXNlRXh0cmFjdG9yIH0gZnJvbSAnLi4vZXh0cmFjdG9ycy9CYXNlRXh0cmFjdG9yJztcbmltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tICdAZGlzY29yZC1wbGF5ZXIvdXRpbHMnO1xuaW1wb3J0IHsgVHlwZVV0aWwgfSBmcm9tICcuLi91dGlscy9UeXBlVXRpbCc7XG5pbXBvcnQgeyBTZXJpYWxpemVkVHlwZSwgdHJ5SW50b1RodW1ibmFpbFN0cmluZyB9IGZyb20gJy4uL3V0aWxzL3NlcmRlJztcbmltcG9ydCB7IEV4Y2VwdGlvbnMgfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgVXRpbCB9IGZyb20gJy4uL3V0aWxzL1V0aWwnO1xuXG5leHBvcnQgdHlwZSBUcmFja1Jlc29sdmFibGUgPSBUcmFjayB8IHN0cmluZyB8IG51bWJlcjtcblxuZXhwb3J0IHR5cGUgV2l0aE1ldGFkYXRhPFQgZXh0ZW5kcyBvYmplY3QsIE0+ID0gVCAmIHtcbiAgICBtZXRhZGF0YTogTTtcbiAgICByZXF1ZXN0TWV0YWRhdGEoKTogUHJvbWlzZTxNPjtcbn07XG5cbmV4cG9ydCB0eXBlIFNlcmlhbGl6ZWRUcmFjayA9IFJldHVyblR5cGU8VHJhY2tbJ3NlcmlhbGl6ZSddPjtcblxuZXhwb3J0IGNsYXNzIFRyYWNrPFQgPSB1bmtub3duPiB7XG4gICAgcHVibGljIHRpdGxlOiBzdHJpbmc7XG4gICAgcHVibGljIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgcHVibGljIGF1dGhvcjogc3RyaW5nO1xuICAgIHB1YmxpYyB1cmw6IHN0cmluZztcbiAgICBwdWJsaWMgdGh1bWJuYWlsOiBzdHJpbmc7XG4gICAgcHVibGljIGR1cmF0aW9uOiBzdHJpbmc7XG4gICAgcHVibGljIHZpZXdzOiBudW1iZXI7XG4gICAgcHVibGljIHJlcXVlc3RlZEJ5OiBVc2VyIHwgbnVsbCA9IG51bGw7XG4gICAgcHVibGljIHBsYXlsaXN0PzogUGxheWxpc3Q7XG4gICAgcHVibGljIHF1ZXJ5VHlwZTogU2VhcmNoUXVlcnlUeXBlIHwgbnVsbCB8IHVuZGVmaW5lZCA9IG51bGw7XG4gICAgcHVibGljIHJhdzogUmF3VHJhY2tEYXRhID0ge1xuICAgICAgICBzb3VyY2U6ICdhcmJpdHJhcnknXG4gICAgfSBhcyBSYXdUcmFja0RhdGE7XG4gICAgcHVibGljIGV4dHJhY3RvcjogQmFzZUV4dHJhY3RvciB8IG51bGwgPSBudWxsO1xuICAgIHB1YmxpYyByZWFkb25seSBpZCA9IFNub3dmbGFrZVV0aWwuZ2VuZXJhdGUoKS50b1N0cmluZygpO1xuICAgIHByaXZhdGUgX19tZXRhZGF0YTogVCB8IG51bGwgPSBudWxsO1xuICAgIHByaXZhdGUgX19yZXFNZXRhZGF0YUZuOiAoKSA9PiBQcm9taXNlPFQgfCBudWxsPjtcbiAgICBwdWJsaWMgY2xlYW5UaXRsZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVHJhY2sgY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gcGxheWVyIFRoZSBwbGF5ZXIgdGhhdCBpbnN0YW50aWF0ZWQgdGhpcyBUcmFja1xuICAgICAqIEBwYXJhbSBkYXRhIFRyYWNrIGRhdGFcbiAgICAgKi9cbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHBsYXllcjogUGxheWVyLCBkYXRhOiBQYXJ0aWFsPFdpdGhNZXRhZGF0YTxSYXdUcmFja0RhdGEsIFQ+Pikge1xuICAgICAgICB0aGlzLnRpdGxlID0gZXNjYXBlTWFya2Rvd24oZGF0YS50aXRsZSA/PyAnJyk7XG4gICAgICAgIHRoaXMuYXV0aG9yID0gZGF0YS5hdXRob3IgPz8gJyc7XG4gICAgICAgIHRoaXMudXJsID0gZGF0YS51cmwgPz8gJyc7XG4gICAgICAgIHRoaXMudGh1bWJuYWlsID0gZGF0YS50aHVtYm5haWwgPz8gJyc7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uID8/ICcnO1xuICAgICAgICB0aGlzLnZpZXdzID0gZGF0YS52aWV3cyA/PyAwO1xuICAgICAgICB0aGlzLnF1ZXJ5VHlwZSA9IGRhdGEucXVlcnlUeXBlO1xuICAgICAgICB0aGlzLnJlcXVlc3RlZEJ5ID0gZGF0YS5yZXF1ZXN0ZWRCeSB8fCBudWxsO1xuICAgICAgICB0aGlzLnBsYXlsaXN0ID0gZGF0YS5wbGF5bGlzdDtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGAke3RoaXMudGl0bGV9IGJ5ICR7dGhpcy5hdXRob3J9YDtcbiAgICAgICAgdGhpcy5yYXcgPSBPYmplY3QuYXNzaWduKHt9LCB7IHNvdXJjZTogZGF0YS5yYXc/LnNvdXJjZSA/PyBkYXRhLnNvdXJjZSB9LCBkYXRhLnJhdyA/PyBkYXRhKTtcbiAgICAgICAgdGhpcy5fX21ldGFkYXRhID0gZGF0YS5tZXRhZGF0YSA/PyBudWxsO1xuICAgICAgICB0aGlzLl9fcmVxTWV0YWRhdGFGbiA9IGRhdGEucmVxdWVzdE1ldGFkYXRhIHx8ICgoKSA9PiBQcm9taXNlLnJlc29sdmU8VCB8IG51bGw+KG51bGwpKTtcbiAgICAgICAgdGhpcy5jbGVhblRpdGxlID0gZGF0YS5jbGVhblRpdGxlID8/IFV0aWwuY2xlYW5UaXRsZSh0aGlzLnRpdGxlLCB0aGlzLnNvdXJjZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVxdWVzdCBtZXRhZGF0YSBmb3IgdGhpcyB0cmFja1xuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyByZXF1ZXN0TWV0YWRhdGEoKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuX19yZXFNZXRhZGF0YUZuKCk7XG5cbiAgICAgICAgdGhpcy5zZXRNZXRhZGF0YShyZXMpO1xuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IG1ldGFkYXRhIGZvciB0aGlzIHRyYWNrXG4gICAgICovXG4gICAgcHVibGljIHNldE1ldGFkYXRhKG06IFQgfCBudWxsKSB7XG4gICAgICAgIHRoaXMuX19tZXRhZGF0YSA9IG07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWV0YWRhdGEgb2YgdGhpcyB0cmFja1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgbWV0YWRhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fbWV0YWRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgdGhpcyB0cmFjayBoYXMgbWV0YWRhdGFcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGhhc01ldGFkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXRhZGF0YSAhPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBxdWV1ZSBpbiB3aGljaCB0aGlzIHRyYWNrIGlzIGxvY2F0ZWRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHF1ZXVlKCk6IEd1aWxkUXVldWUge1xuICAgICAgICByZXR1cm4gdGhpcy5wbGF5ZXIubm9kZXMuY2FjaGUuZmluZCgocSkgPT4gcS50cmFja3Muc29tZSgoYWIpID0+IGFiLmlkID09PSB0aGlzLmlkKSkhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSB0cmFjayBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgZHVyYXRpb25NUygpOiBudW1iZXIge1xuICAgICAgICBjb25zdCB0aW1lcyA9IChuOiBudW1iZXIsIHQ6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgbGV0IHRuID0gMTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdDsgaSsrKSB0biAqPSBuO1xuICAgICAgICAgICAgcmV0dXJuIHQgPD0gMCA/IDEwMDAgOiB0biAqIDEwMDA7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZHVyYXRpb25cbiAgICAgICAgICAgIC5zcGxpdCgnOicpXG4gICAgICAgICAgICAucmV2ZXJzZSgpXG4gICAgICAgICAgICAubWFwKChtLCBpKSA9PiBwYXJzZUludChtKSAqIHRpbWVzKDYwLCBpKSlcbiAgICAgICAgICAgIC5yZWR1Y2UoKGEsIGMpID0+IGEgKyBjLCAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNjb3JkIGh5cGVybGluayByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHRyYWNrXG4gICAgICovXG4gICAgcHVibGljIHRvSHlwZXJsaW5rKCk6IHN0cmluZyAvKiBub3QgdXNpbmcgYFske3N0cmluZ31dKCR7c3RyaW5nfSlgIHlldCAqLyB7XG4gICAgICAgIHJldHVybiBgWyR7dGhpcy50aXRsZX1dKCR7dGhpcy51cmx9KWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzb3VyY2Ugb2YgdGhpcyB0cmFja1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgc291cmNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYXc/LnNvdXJjZSA/PyAnYXJiaXRyYXJ5JztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyB0cmFja1xuICAgICAqL1xuICAgIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy50aXRsZX0gYnkgJHt0aGlzLmF1dGhvcn1gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJhdyBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgdHJhY2tcbiAgICAgKi9cbiAgICBwdWJsaWMgdG9KU09OKGhpZGVQbGF5bGlzdD86IGJvb2xlYW4pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgICAgICAgdGl0bGU6IHRoaXMudGl0bGUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGF1dGhvcjogdGhpcy5hdXRob3IsXG4gICAgICAgICAgICB1cmw6IHRoaXMudXJsLFxuICAgICAgICAgICAgdGh1bWJuYWlsOiB0aGlzLnRodW1ibmFpbCxcbiAgICAgICAgICAgIGR1cmF0aW9uOiB0aGlzLmR1cmF0aW9uLFxuICAgICAgICAgICAgZHVyYXRpb25NUzogdGhpcy5kdXJhdGlvbk1TLFxuICAgICAgICAgICAgdmlld3M6IHRoaXMudmlld3MsXG4gICAgICAgICAgICByZXF1ZXN0ZWRCeTogdGhpcy5yZXF1ZXN0ZWRCeT8uaWQgfHwgbnVsbCxcbiAgICAgICAgICAgIHBsYXlsaXN0OiBoaWRlUGxheWxpc3QgPyBudWxsIDogdGhpcy5wbGF5bGlzdD8udG9KU09OKCkgPz8gbnVsbFxuICAgICAgICB9IGFzIFRyYWNrSlNPTjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXJpYWxpemVkIHRyYWNrIGRhdGEgdGhhdCBjYW4gYmUgcmVjb25zdHJ1Y3RlZFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXJpYWxpemUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0aXRsZTogdGhpcy50aXRsZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgYXV0aG9yOiB0aGlzLmF1dGhvcixcbiAgICAgICAgICAgIHVybDogdGhpcy51cmwsXG4gICAgICAgICAgICB0aHVtYm5haWw6IFR5cGVVdGlsLmlzU3RyaW5nKHRoaXMudGh1bWJuYWlsKSA/IHRoaXMudGh1bWJuYWlsIDogdHJ5SW50b1RodW1ibmFpbFN0cmluZyh0aGlzLnRodW1ibmFpbCksXG4gICAgICAgICAgICBkdXJhdGlvbjogdGhpcy5kdXJhdGlvbixcbiAgICAgICAgICAgIHZpZXdzOiB0aGlzLnZpZXdzID8/IDAsXG4gICAgICAgICAgICByZXF1ZXN0ZWRfYnk6IHRoaXMucmVxdWVzdGVkQnk/LnRvSlNPTigpID8/IG51bGwsXG4gICAgICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlLFxuICAgICAgICAgICAgbGl2ZTogZmFsc2UsXG4gICAgICAgICAgICBxdWVyeV90eXBlOiB0aGlzLnF1ZXJ5VHlwZSxcbiAgICAgICAgICAgIGV4dHJhY3RvcjogdGhpcy5leHRyYWN0b3I/LmlkZW50aWZpZXIgPz8gbnVsbCxcbiAgICAgICAgICAgIG1ldGFkYXRhOiB0aGlzLm1ldGFkYXRhLFxuICAgICAgICAgICAgJHR5cGU6IFNlcmlhbGl6ZWRUeXBlLlRyYWNrLFxuICAgICAgICAgICAgJGVuY29kZXJfdmVyc2lvbjogJzYuNy4xJ1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdCBhIHRyYWNrIGZyb20gc2VyaWFsaXplZCBkYXRhXG4gICAgICogQHBhcmFtIHBsYXllciBQbGF5ZXIgaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gZGF0YSBTZXJpYWxpemVkIGRhdGFcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGZyb21TZXJpYWxpemVkKHBsYXllcjogUGxheWVyLCBkYXRhOiBSZXR1cm5UeXBlPFRyYWNrWydzZXJpYWxpemUnXT4pIHtcbiAgICAgICAgaWYgKGRhdGEuJHR5cGUgIT09IFNlcmlhbGl6ZWRUeXBlLlRyYWNrKSB0aHJvdyBFeGNlcHRpb25zLkVSUl9JTlZBTElEX0FSR19UWVBFKCdkYXRhJywgJ1NlcmlhbGl6ZWRUcmFjaycsICdtYWxmb3JtZWQgZGF0YScpO1xuICAgICAgICBjb25zdCB0cmFjayA9IG5ldyBUcmFjayhwbGF5ZXIsIHtcbiAgICAgICAgICAgIC4uLmRhdGEsXG4gICAgICAgICAgICByZXF1ZXN0ZWRCeTogZGF0YS5yZXF1ZXN0ZWRfYnlcbiAgICAgICAgICAgICAgICA/ICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gZGF0YS5yZXF1ZXN0ZWRfYnkgYXMgQVBJVXNlcjtcbiAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNvbHZlZCA9IHBsYXllci5jbGllbnQudXNlcnMucmVzb2x2ZShyZXMuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZWQpIHJldHVybiByZXNvbHZlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllci5jbGllbnQudXNlcnMuY2FjaGUuaGFzKHJlcy5pZCkpIHJldHVybiBwbGF5ZXIuY2xpZW50LnVzZXJzLmNhY2hlLmdldChyZXMuaWQpITtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1c2VyID0gbmV3IFVzZXIocGxheWVyLmNsaWVudCwgcmVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXI7XG4gICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pKClcbiAgICAgICAgICAgICAgICA6IG51bGwsXG4gICAgICAgICAgICBxdWVyeVR5cGU6IGRhdGEucXVlcnlfdHlwZSA/PyB1bmRlZmluZWRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdHJhY2suc2V0TWV0YWRhdGEoZGF0YS5tZXRhZGF0YSk7XG5cbiAgICAgICAgcmV0dXJuIHRyYWNrO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBiZWxvbmdpbmcgcXVldWVzIG9mIHRoaXMgdHJhY2tcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0QmVsb25naW5nUXVldWVzKCkge1xuICAgICAgICBjb25zdCBub2RlcyA9IHRoaXMucGxheWVyLm5vZGVzLmNhY2hlLmZpbHRlcigobm9kZSkgPT4gbm9kZS50cmFja3Muc29tZSgodCkgPT4gdC5pZCA9PT0gdGhpcy5pZCkpO1xuXG4gICAgICAgIHJldHVybiBub2RlcyBhcyBDb2xsZWN0aW9uPHN0cmluZywgR3VpbGRRdWV1ZTx1bmtub3duPj47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGxheSB0aGlzIHRyYWNrIHRvIHRoZSBnaXZlbiB2b2ljZSBjaGFubmVsLiBJZiBxdWV1ZSBleGlzdHMgYW5kIGFub3RoZXIgdHJhY2sgaXMgYmVpbmcgcGxheWVkLCB0aGlzIHRyYWNrIHdpbGwgYmUgYWRkZWQgdG8gdGhlIHF1ZXVlLlxuICAgICAqIEBwYXJhbSBjaGFubmVsIFZvaWNlIGNoYW5uZWwgb24gd2hpY2ggdGhpcyB0cmFjayBzaGFsbCBiZSBwbGF5ZWRcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBOb2RlIGluaXRpYWxpemF0aW9uIG9wdGlvbnNcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgcGxheTxUID0gdW5rbm93bj4oY2hhbm5lbDogR3VpbGRWb2ljZUNoYW5uZWxSZXNvbHZhYmxlLCBvcHRpb25zPzogUGxheWVyTm9kZUluaXRpYWxpemVyT3B0aW9uczxUPik6IFByb21pc2U8UGxheWVyTm9kZUluaXRpYWxpemF0aW9uUmVzdWx0PFQ+PiB7XG4gICAgICAgIGNvbnN0IGZuID0gdGhpcy5wbGF5ZXIucGxheS5iaW5kKHRoaXMucGxheWVyKTtcblxuICAgICAgICByZXR1cm4gYXdhaXQgZm4oY2hhbm5lbCwgdGhpcywgb3B0aW9ucyk7XG4gICAgfVxufVxuIiwgImV4cG9ydCBjbGFzcyBUeXBlVXRpbCB7XG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgcmV0dXJuIFR5cGVVdGlsO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG4gICAgcHVibGljIHN0YXRpYyBpc0Z1bmN0aW9uKHQ6IHVua25vd24pOiB0IGlzIEZ1bmN0aW9uIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0ID09PSAnZnVuY3Rpb24nO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgaXNOdW1iZXIodDogdW5rbm93bik6IHQgaXMgbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0ID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBpc1N0cmluZyh0OiB1bmtub3duKTogdCBpcyBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHQgPT09ICdzdHJpbmcnO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgaXNCb29sZWFuKHQ6IHVua25vd24pOiB0IGlzIGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHQgPT09ICdib29sZWFuJztcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGlzTnVsbGlzaCh0OiB1bmtub3duKTogdCBpcyBudWxsIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHQgPT0gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGlzQXJyYXkodDogdW5rbm93bik6IHQgaXMgdW5rbm93bltdIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBpc0Vycm9yKHQ6IHVua25vd24pOiB0IGlzIEVycm9yIHtcbiAgICAgICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBFcnJvcjtcbiAgICB9XG59XG4iLCAiY29uc3QgRGlzY29yZFBsYXllckVycm9ycyA9IHtcbiAgICBFUlJfT1VUX09GX1NQQUNFOiB7XG4gICAgICAgIG5hbWU6ICdFUlJfT1VUX09GX1NQQUNFJyxcbiAgICAgICAgdHlwZTogUmFuZ2VFcnJvcixcbiAgICAgICAgY3JlYXRlRXJyb3IodGFyZ2V0OiBzdHJpbmcsIGNhcGFjaXR5OiBudW1iZXIsIHRvdGFsOiBudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBgWyR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfV0gTWF4IGNhcGFjaXR5IHJlYWNoZWQgZm9yICR7dGFyZ2V0fSAoQ2FwYWNpdHkgJHtjYXBhY2l0eX0vVG90YWwgJHt0b3RhbH0pYDtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgRVJSX0lOVkFMSURfQVJHX1RZUEU6IHtcbiAgICAgICAgbmFtZTogJ0VSUl9JTlZBTElEX0FSR19UWVBFJyxcbiAgICAgICAgdHlwZTogVHlwZUVycm9yLFxuICAgICAgICBjcmVhdGVFcnJvcih0YXJnZXQ6IHN0cmluZywgZXhwZWN0YXRpb246IHN0cmluZywgZm91bmQ6IHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIGBbJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9XSBFeHBlY3RlZCAke3RhcmdldH0gdG8gYmUgXCIke2V4cGVjdGF0aW9ufVwiLCByZWNlaXZlZCBcIiR7Zm91bmR9XCJgO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBFUlJfTk9fUkVTVUxUOiB7XG4gICAgICAgIG5hbWU6ICdFUlJfTk9fUkVTVUxUJyxcbiAgICAgICAgdHlwZTogRXJyb3IsXG4gICAgICAgIGNyZWF0ZUVycm9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIGBbJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9XSAke21lc3NhZ2V9YDtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgRVJSX05PVF9JTVBMRU1FTlRFRDoge1xuICAgICAgICBuYW1lOiAnRVJSX05PVF9JTVBMRU1FTlRFRCcsXG4gICAgICAgIHR5cGU6IEVycm9yLFxuICAgICAgICBjcmVhdGVFcnJvcih0YXJnZXQ6IHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIGBbJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9XSAke3RhcmdldH0gaXMgbm90IHlldCBpbXBsZW1lbnRlZGA7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIEVSUl9OT1RfRVhJU1RJTkc6IHtcbiAgICAgICAgbmFtZTogJ0VSUl9OT1RfRVhJU1RJTkcnLFxuICAgICAgICB0eXBlOiBFcnJvcixcbiAgICAgICAgY3JlYXRlRXJyb3IodGFyZ2V0OiBzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBgWyR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfV0gJHt0YXJnZXR9IGRvZXMgbm90IGV4aXN0YDtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgRVJSX09VVF9PRl9SQU5HRToge1xuICAgICAgICBuYW1lOiAnRVJSX09VVF9PRl9SQU5HRScsXG4gICAgICAgIHR5cGU6IFJhbmdlRXJyb3IsXG4gICAgICAgIGNyZWF0ZUVycm9yKHRhcmdldDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBtaW5pbXVtOiBzdHJpbmcsIG1heGltdW06IHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIGBbJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9XSAke3RhcmdldH0gaXMgb3V0IG9mIHJhbmdlIChFeHBlY3RlZCBtaW5pbXVtICR7bWF4aW11bX0gYW5kIG1heGltdW0gJHttYXhpbXVtfSwgZ290ICR7dmFsdWV9KWA7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIEVSUl9OT19WT0lDRV9DT05ORUNUSU9OOiB7XG4gICAgICAgIG5hbWU6ICdFUlJfTk9fVk9JQ0VfQ09OTkVDVElPTicsXG4gICAgICAgIHR5cGU6IEVycm9yLFxuICAgICAgICBjcmVhdGVFcnJvcihtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gYFske3RoaXMuY29uc3RydWN0b3IubmFtZX1dIGAgKyAobWVzc2FnZSB8fCAnTm8gdm9pY2UgY29ubmVjdGlvbiBhdmFpbGFibGUsIG1heWJlIGNvbm5lY3QgdG8gYSB2b2ljZSBjaGFubmVsIGZpcnN0PycpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBFUlJfVk9JQ0VfQ09OTkVDVElPTl9ERVNUUk9ZRUQ6IHtcbiAgICAgICAgbmFtZTogJ0VSUl9WT0lDRV9DT05ORUNUSU9OX0RFU1RST1lFRCcsXG4gICAgICAgIHR5cGU6IEVycm9yLFxuICAgICAgICBjcmVhdGVFcnJvcigpIHtcbiAgICAgICAgICAgIHJldHVybiBgWyR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfV0gYCArICdDYW5ub3QgdXNlIGRlc3Ryb3llZCB2b2ljZSBjb25uZWN0aW9uJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgRVJSX05PX1ZPSUNFX0NIQU5ORUw6IHtcbiAgICAgICAgbmFtZTogJ0VSUl9OT19WT0lDRV9DSEFOTkVMJyxcbiAgICAgICAgdHlwZTogRXJyb3IsXG4gICAgICAgIGNyZWF0ZUVycm9yKCkge1xuICAgICAgICAgICAgcmV0dXJuIGBbJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9XSBgICsgJ0NvdWxkIG5vdCBnZXQgdGhlIHZvaWNlIGNoYW5uZWwnO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBFUlJfSU5WQUxJRF9WT0lDRV9DSEFOTkVMOiB7XG4gICAgICAgIG5hbWU6ICdFUlJfSU5WQUxJRF9WT0lDRV9DSEFOTkVMJyxcbiAgICAgICAgdHlwZTogRXJyb3IsXG4gICAgICAgIGNyZWF0ZUVycm9yKCkge1xuICAgICAgICAgICAgcmV0dXJuIGBbJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9XSBgICsgJ0V4cGVjdGVkIGEgdm9pY2UgY2hhbm5lbCc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIEVSUl9OT19SRUNFSVZFUjoge1xuICAgICAgICBuYW1lOiAnRVJSX05PX1JFQ0VJVkVSJyxcbiAgICAgICAgdHlwZTogRXJyb3IsXG4gICAgICAgIGNyZWF0ZUVycm9yKG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBgWyR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfV0gYCArIChtZXNzYWdlIHx8ICdObyB2b2ljZSByZWNlaXZlciBpcyBhdmFpbGFibGUsIG1heWJlIGNvbm5lY3QgdG8gYSB2b2ljZSBjaGFubmVsIGZpcnN0PycpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBFUlJfRkZNUEVHX0xPQ0FUT1I6IHtcbiAgICAgICAgbmFtZTogJ0VSUl9GRk1QRUdfTE9DQVRPUicsXG4gICAgICAgIHR5cGU6IEVycm9yLFxuICAgICAgICBjcmVhdGVFcnJvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBgWyR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfV0gYCArIG1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIEVSUl9OT19BVURJT19SRVNPVVJDRToge1xuICAgICAgICBuYW1lOiAnRVJSX05PX0FVRElPX1JFU09VUkNFJyxcbiAgICAgICAgdHlwZTogRXJyb3IsXG4gICAgICAgIGNyZWF0ZUVycm9yKG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBgWyR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfV0gYCArIChtZXNzYWdlIHx8ICdFeHBlY3RlZCBhbiBhdWRpbyByZXNvdXJjZScpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBFUlJfTk9fR1VJTERfUVVFVUU6IHtcbiAgICAgICAgbmFtZTogJ0VSUl9OT19HVUlMRF9RVUVVRScsXG4gICAgICAgIHR5cGU6IEVycm9yLFxuICAgICAgICBjcmVhdGVFcnJvcihtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gYFske3RoaXMuY29uc3RydWN0b3IubmFtZX1dIGAgKyAobWVzc2FnZSB8fCAnRXhwZWN0ZWQgYSBndWlsZCBxdWV1ZScpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBFUlJfTk9fR1VJTEQ6IHtcbiAgICAgICAgbmFtZTogJ0VSUl9OT19HVUlMRCcsXG4gICAgICAgIHR5cGU6IEVycm9yLFxuICAgICAgICBjcmVhdGVFcnJvcihtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gYFske3RoaXMuY29uc3RydWN0b3IubmFtZX1dIGAgKyAobWVzc2FnZSB8fCAnRXhwZWN0ZWQgYSBndWlsZCcpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBFUlJfSU5GT19SRVFVSVJFRDoge1xuICAgICAgICBuYW1lOiAnRVJSX0lORk9fUkVRVUlSRUQnLFxuICAgICAgICB0eXBlOiBFcnJvcixcbiAgICAgICAgY3JlYXRlRXJyb3IodGFyZ2V0OiBzdHJpbmcsIGFjdHVhbDogc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gYFske3RoaXMuY29uc3RydWN0b3IubmFtZX1dIEV4cGVjdGVkICR7dGFyZ2V0fSwgZm91bmQgXCIke2FjdHVhbH1cImA7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIEVSUl9TRVJJQUxJWkFUSU9OX0ZBSUxFRDoge1xuICAgICAgICBuYW1lOiAnRVJSX1NFUklBTElaQVRJT05fRkFJTEVEJyxcbiAgICAgICAgdHlwZTogRXJyb3IsXG4gICAgICAgIGNyZWF0ZUVycm9yKCkge1xuICAgICAgICAgICAgcmV0dXJuIGBbJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9XWAgKyBcIkRvbid0IGtub3cgaG93IHRvIHNlcmlhbGl6ZSB0aGlzIGRhdGFcIjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgRVJSX0RFU0VSSUFMSVpBVElPTl9GQUlMRUQ6IHtcbiAgICAgICAgbmFtZTogJ0VSUl9ERVNFUklBTElaQVRJT05fRkFJTEVEJyxcbiAgICAgICAgdHlwZTogRXJyb3IsXG4gICAgICAgIGNyZWF0ZUVycm9yKCkge1xuICAgICAgICAgICAgcmV0dXJuIGBbJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9XWAgKyBcIkRvbid0IGtub3cgaG93IHRvIGRlc2VyaWFsaXplIHRoaXMgZGF0YVwiO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBFUlJfSUxMRUdBTF9IT09LX0lOVk9DQVRJT046IHtcbiAgICAgICAgbmFtZTogJ0VSUl9JTExFR0FMX0hPT0tfSU5WT0NBVElPTicsXG4gICAgICAgIHR5cGU6IEVycm9yLFxuICAgICAgICBjcmVhdGVFcnJvcih0YXJnZXQ6IHN0cmluZywgbWVzc2FnZT86IHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIGBbJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9XWAgKyBgSWxsZWdhbCBpbnZvY2F0aW9uIG9mICR7dGFyZ2V0fSBob29rLiR7bWVzc2FnZSA/IGAgJHttZXNzYWdlfWAgOiAnJ31gO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBFUlJfTk9UX0VYSVNUSU5HX01PRFVMRToge1xuICAgICAgICBuYW1lOiAnRVJSX05PVF9FWElTVElOR19NT0RVTEUnLFxuICAgICAgICB0eXBlOiBFcnJvcixcbiAgICAgICAgY3JlYXRlRXJyb3IodGFyZ2V0OiBzdHJpbmcsIGRlc2NyaXB0aW9uID0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiBgWyR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfV1gICsgYCR7dGFyZ2V0fSBtb2R1bGUgZG9lcyBub3QgZXhpc3QuIEluc3RhbGwgaXQgd2l0aCBcXGBucG0gaW5zdGFsbCAke3RhcmdldH1cXGAuJHtkZXNjcmlwdGlvbiA/ICcgJyArIGRlc2NyaXB0aW9uIDogJyd9YDtcbiAgICAgICAgfVxuICAgIH1cbn0gYXMgY29uc3Q7XG5cbnR5cGUgRmluYWxFeGNlcHRpb248TyBleHRlbmRzICh0eXBlb2YgRGlzY29yZFBsYXllckVycm9ycylba2V5b2YgdHlwZW9mIERpc2NvcmRQbGF5ZXJFcnJvcnNdPiA9IHtcbiAgICBuYW1lOiBPWyduYW1lJ107XG59ICYgSW5zdGFuY2VUeXBlPE9bJ3R5cGUnXT47XG5cbnR5cGUgRGlzY29yZFBsYXllckV4Y2VwdGlvbiA9IHtcbiAgICBbSyBpbiBrZXlvZiB0eXBlb2YgRGlzY29yZFBsYXllckVycm9yc106ICguLi5hcmdzOiBQYXJhbWV0ZXJzPCh0eXBlb2YgRGlzY29yZFBsYXllckVycm9ycylbS11bJ2NyZWF0ZUVycm9yJ10+KSA9PiBGaW5hbEV4Y2VwdGlvbjwodHlwZW9mIERpc2NvcmRQbGF5ZXJFcnJvcnMpW0tdPjtcbn07XG5cbmNvbnN0IHRhcmdldCA9IHt9IGFzIERpc2NvcmRQbGF5ZXJFeGNlcHRpb247XG5cbmNvbnN0IGhhbmRsZXI6IFByb3h5SGFuZGxlcjx0eXBlb2YgdGFyZ2V0PiA9IHtcbiAgICBnZXQodGFyZ2V0LCBwOiBrZXlvZiB0eXBlb2YgRGlzY29yZFBsYXllckVycm9ycywgcmVjZWl2ZXIpIHtcbiAgICAgICAgY29uc3QgZXJyID0gRGlzY29yZFBsYXllckVycm9yc1twXTtcblxuICAgICAgICBpZiAoIWVycikgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcCwgcmVjZWl2ZXIpO1xuXG4gICAgICAgIHJldHVybiAoLi4uYXJnczogUGFyYW1ldGVyczwodHlwZW9mIGVycilbJ2NyZWF0ZUVycm9yJ10+KSA9PiB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgZXJyLnR5cGUoZXJyLmNyZWF0ZUVycm9yKC4uLmFyZ3MpKTtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsTmFtZSA9IGV4Y2VwdGlvbi5uYW1lO1xuICAgICAgICAgICAgZXhjZXB0aW9uLm5hbWUgPSBgJHtlcnIubmFtZX0gWyR7b3JpZ2luYWxOYW1lfV1gO1xuXG4gICAgICAgICAgICByZXR1cm4gZXhjZXB0aW9uO1xuICAgICAgICB9O1xuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCBFcnJvckNvZGVzID0gKCgpID0+IHtcbiAgICB0eXBlIEVyckNvZGVzID0ge1xuICAgICAgICAtcmVhZG9ubHkgW0sgaW4ga2V5b2YgdHlwZW9mIERpc2NvcmRQbGF5ZXJFcnJvcnNdOiAodHlwZW9mIERpc2NvcmRQbGF5ZXJFcnJvcnMpW0tdWyduYW1lJ107XG4gICAgfTtcblxuICAgIGNvbnN0IGRpY3QgPSB7fSBhcyBFcnJDb2RlcztcblxuICAgIGZvciAoY29uc3QgcHJvcCBpbiBEaXNjb3JkUGxheWVyRXJyb3JzKSB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgZGljdFtwcm9wXSA9IHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUoZGljdCk7XG59KSgpO1xuZXhwb3J0IGNvbnN0IEV4Y2VwdGlvbnMgPSBuZXcgUHJveHkodGFyZ2V0LCBoYW5kbGVyKTtcbiIsICIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5cbmltcG9ydCB7IEV4Y2VwdGlvbnMgfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgUGxheWxpc3QsIHR5cGUgU2VyaWFsaXplZFRyYWNrLCBUcmFjaywgU2VyaWFsaXplZFBsYXlsaXN0IH0gZnJvbSAnLi4vZmFicmljJztcbmltcG9ydCB7IFR5cGVVdGlsIH0gZnJvbSAnLi9UeXBlVXRpbCc7XG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXInO1xuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnLi4vUGxheWVyJztcblxuZXhwb3J0IGVudW0gU2VyaWFsaXplZFR5cGUge1xuICAgIFRyYWNrID0gJ3RyYWNrJyxcbiAgICBQbGF5bGlzdCA9ICdwbGF5bGlzdCdcbn1cblxuZXhwb3J0IHR5cGUgRW5jb2RhYmxlID0gU2VyaWFsaXplZFRyYWNrIHwgU2VyaWFsaXplZFBsYXlsaXN0O1xuXG5jb25zdCBpc1RyYWNrID0gKGRhdGE6IGFueSk6IGRhdGEgaXMgU2VyaWFsaXplZFRyYWNrID0+IGRhdGEuJHR5cGUgPT09IFNlcmlhbGl6ZWRUeXBlLlRyYWNrO1xuY29uc3QgaXNQbGF5bGlzdCA9IChkYXRhOiBhbnkpOiBkYXRhIGlzIFNlcmlhbGl6ZWRQbGF5bGlzdCA9PiBkYXRhLiR0eXBlID09PSBTZXJpYWxpemVkVHlwZS5QbGF5bGlzdDtcblxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZShkYXRhOiBUcmFjayB8IFBsYXlsaXN0IHwgYW55KSB7XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBUcmFjaykgcmV0dXJuIGRhdGEuc2VyaWFsaXplKCk7XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBQbGF5bGlzdCkgcmV0dXJuIGRhdGEuc2VyaWFsaXplKCk7XG5cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZGF0YS50b0pTT04oKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgICAgdGhyb3cgRXhjZXB0aW9ucy5FUlJfU0VSSUFMSVpBVElPTl9GQUlMRUQoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXNlcmlhbGl6ZShwbGF5ZXI6IFBsYXllciwgZGF0YTogRW5jb2RhYmxlKSB7XG4gICAgaWYgKGlzVHJhY2soZGF0YSkpIHJldHVybiBUcmFjay5mcm9tU2VyaWFsaXplZChwbGF5ZXIsIGRhdGEpO1xuICAgIGlmIChpc1BsYXlsaXN0KGRhdGEpKSByZXR1cm4gUGxheWxpc3QuZnJvbVNlcmlhbGl6ZWQocGxheWVyLCBkYXRhKTtcblxuICAgIHRocm93IEV4Y2VwdGlvbnMuRVJSX0RFU0VSSUFMSVpBVElPTl9GQUlMRUQoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZShkYXRhOiBFbmNvZGFibGUpIHtcbiAgICBjb25zdCBzdHIgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcblxuICAgIHJldHVybiBCdWZmZXIuZnJvbShzdHIpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZShkYXRhOiBzdHJpbmcpIHtcbiAgICBjb25zdCBzdHIgPSBCdWZmZXIuZnJvbShkYXRhLCAnYmFzZTY0JykudG9TdHJpbmcoKTtcblxuICAgIHJldHVybiBKU09OLnBhcnNlKHN0cik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cnlJbnRvVGh1bWJuYWlsU3RyaW5nKGRhdGE6IGFueSkge1xuICAgIGlmICghZGF0YSkgcmV0dXJuIG51bGw7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKFR5cGVVdGlsLmlzU3RyaW5nKGRhdGEpKSByZXR1cm4gZGF0YTtcbiAgICAgICAgcmV0dXJuIGRhdGE/LnVybCA/PyBkYXRhPy50aHVtYm5haWw/LnVybCA/PyBudWxsO1xuICAgIH0gY2F0Y2gge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgUGxheWVyLCBQbGF5ZXJOb2RlSW5pdGlhbGl6YXRpb25SZXN1bHQsIFBsYXllck5vZGVJbml0aWFsaXplck9wdGlvbnMgfSBmcm9tICcuLi9QbGF5ZXInO1xuaW1wb3J0IHsgVHJhY2sgfSBmcm9tICcuL1RyYWNrJztcbmltcG9ydCB7IFBsYXlsaXN0SW5pdERhdGEsIFBsYXlsaXN0SlNPTiwgVHJhY2tKU09OLCBUcmFja1NvdXJjZSB9IGZyb20gJy4uL3R5cGVzL3R5cGVzJztcbmltcG9ydCB7IFV0aWwgfSBmcm9tICcuLi91dGlscy9VdGlsJztcbmltcG9ydCB7IEd1aWxkVm9pY2VDaGFubmVsUmVzb2x2YWJsZSB9IGZyb20gJ2Rpc2NvcmQuanMnO1xuaW1wb3J0IHsgU2VyaWFsaXplZFR5cGUsIHRyeUludG9UaHVtYm5haWxTdHJpbmcgfSBmcm9tICcuLi91dGlscy9zZXJkZSc7XG5pbXBvcnQgeyBUeXBlVXRpbCB9IGZyb20gJy4uL3V0aWxzL1R5cGVVdGlsJztcbmltcG9ydCB7IEV4Y2VwdGlvbnMgfSBmcm9tICcuLi9lcnJvcnMnO1xuXG5leHBvcnQgdHlwZSBTZXJpYWxpemVkUGxheWxpc3QgPSBSZXR1cm5UeXBlPFBsYXlsaXN0WydzZXJpYWxpemUnXT47XG5cbmV4cG9ydCBjbGFzcyBQbGF5bGlzdCB7XG4gICAgcHVibGljIHJlYWRvbmx5IHBsYXllcjogUGxheWVyO1xuICAgIHB1YmxpYyB0cmFja3M6IFRyYWNrW107XG4gICAgcHVibGljIHRpdGxlOiBzdHJpbmc7XG4gICAgcHVibGljIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgcHVibGljIHRodW1ibmFpbDogc3RyaW5nO1xuICAgIHB1YmxpYyB0eXBlOiAnYWxidW0nIHwgJ3BsYXlsaXN0JztcbiAgICBwdWJsaWMgc291cmNlOiBUcmFja1NvdXJjZTtcbiAgICBwdWJsaWMgYXV0aG9yOiB7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgdXJsOiBzdHJpbmc7XG4gICAgfTtcbiAgICBwdWJsaWMgaWQ6IHN0cmluZztcbiAgICBwdWJsaWMgdXJsOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IHJhd1BsYXlsaXN0PzogYW55OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcblxuICAgIC8qKlxuICAgICAqIFBsYXlsaXN0IGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllciBUaGUgcGxheWVyXG4gICAgICogQHBhcmFtIHtQbGF5bGlzdEluaXREYXRhfSBkYXRhIFRoZSBkYXRhXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocGxheWVyOiBQbGF5ZXIsIGRhdGE6IFBsYXlsaXN0SW5pdERhdGEpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBwbGF5ZXJcbiAgICAgICAgICogQG5hbWUgUGxheWxpc3QjcGxheWVyXG4gICAgICAgICAqIEB0eXBlIHtQbGF5ZXJ9XG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wbGF5ZXIgPSBwbGF5ZXI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB0cmFja3MgaW4gdGhpcyBwbGF5bGlzdFxuICAgICAgICAgKiBAbmFtZSBQbGF5bGlzdCN0cmFja3NcbiAgICAgICAgICogQHR5cGUge1RyYWNrW119XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRyYWNrcyA9IGRhdGEudHJhY2tzID8/IFtdO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYXV0aG9yIG9mIHRoaXMgcGxheWxpc3RcbiAgICAgICAgICogQG5hbWUgUGxheWxpc3QjYXV0aG9yXG4gICAgICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmF1dGhvciA9IGRhdGEuYXV0aG9yO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZGVzY3JpcHRpb25cbiAgICAgICAgICogQG5hbWUgUGxheWxpc3QjZGVzY3JpcHRpb25cbiAgICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkYXRhLmRlc2NyaXB0aW9uO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdGh1bWJuYWlsIG9mIHRoaXMgcGxheWxpc3RcbiAgICAgICAgICogQG5hbWUgUGxheWxpc3QjdGh1bWJuYWlsXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRodW1ibmFpbCA9IGRhdGEudGh1bWJuYWlsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcGxheWxpc3QgdHlwZTpcbiAgICAgICAgICogLSBgYWxidW1gXG4gICAgICAgICAqIC0gYHBsYXlsaXN0YFxuICAgICAgICAgKiBAbmFtZSBQbGF5bGlzdCN0eXBlXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnR5cGUgPSBkYXRhLnR5cGU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzb3VyY2Ugb2YgdGhpcyBwbGF5bGlzdDpcbiAgICAgICAgICogLSBgeW91dHViZWBcbiAgICAgICAgICogLSBgc291bmRjbG91ZGBcbiAgICAgICAgICogLSBgc3BvdGlmeWBcbiAgICAgICAgICogLSBgYXJiaXRyYXJ5YFxuICAgICAgICAgKiBAbmFtZSBQbGF5bGlzdCNzb3VyY2VcbiAgICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc291cmNlID0gZGF0YS5zb3VyY2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBwbGF5bGlzdCBpZFxuICAgICAgICAgKiBAbmFtZSBQbGF5bGlzdCNpZFxuICAgICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pZCA9IGRhdGEuaWQ7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBwbGF5bGlzdCB1cmxcbiAgICAgICAgICogQG5hbWUgUGxheWxpc3QjdXJsXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVybCA9IGRhdGEudXJsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcGxheWxpc3QgdGl0bGVcbiAgICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudGl0bGUgPSBkYXRhLnRpdGxlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmFtZSBQbGF5bGlzdCNyYXdQbGF5bGlzdFxuICAgICAgICAgKiBAdHlwZSB7YW55fVxuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgfVxuXG4gICAgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgICAgICB5aWVsZCogdGhpcy50cmFja3M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXN0aW1hdGVkIGR1cmF0aW9uIG9mIHRoaXMgcGxheWxpc3RcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGVzdGltYXRlZER1cmF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFja3MucmVkdWNlKChwLCBjKSA9PiBwICsgYy5kdXJhdGlvbk1TLCAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3JtYXR0ZWQgZXN0aW1hdGVkIGR1cmF0aW9uIG9mIHRoaXMgcGxheWxpc3RcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGR1cmF0aW9uRm9ybWF0dGVkKCkge1xuICAgICAgICByZXR1cm4gVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyh0aGlzLmVzdGltYXRlZER1cmF0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHBsYXlsaXN0XG4gICAgICogQHBhcmFtIHtib29sZWFufSBbd2l0aFRyYWNrcz10cnVlXSBJZiBpdCBzaG91bGQgYnVpbGQganNvbiB3aXRoIHRyYWNrc1xuICAgICAqIEByZXR1cm5zIHtQbGF5bGlzdEpTT059XG4gICAgICovXG4gICAgdG9KU09OKHdpdGhUcmFja3MgPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICAgICAgICBpZDogdGhpcy5pZCxcbiAgICAgICAgICAgIHVybDogdGhpcy51cmwsXG4gICAgICAgICAgICB0aXRsZTogdGhpcy50aXRsZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgdGh1bWJuYWlsOiB0aGlzLnRodW1ibmFpbCxcbiAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcy5zb3VyY2UsXG4gICAgICAgICAgICBhdXRob3I6IHRoaXMuYXV0aG9yLFxuICAgICAgICAgICAgdHJhY2tzOiBbXSBhcyBUcmFja0pTT05bXVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh3aXRoVHJhY2tzKSBwYXlsb2FkLnRyYWNrcyA9IHRoaXMudHJhY2tzLm1hcCgobSkgPT4gbS50b0pTT04odHJ1ZSkpO1xuXG4gICAgICAgIHJldHVybiBwYXlsb2FkIGFzIFBsYXlsaXN0SlNPTjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXJpYWxpemUgdGhpcyBwbGF5bGlzdCBpbnRvIHJlY29uc3RydWN0YWJsZSBkYXRhXG4gICAgICovXG4gICAgcHVibGljIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRyYWNrczogdGhpcy50cmFja3MubWFwKChtKSA9PiBtLnNlcmlhbGl6ZSgpKSxcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLnRpdGxlLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICB0aHVtYm5haWw6IFR5cGVVdGlsLmlzU3RyaW5nKHRoaXMudGh1bWJuYWlsKSA/IHRoaXMudGh1bWJuYWlsIDogdHJ5SW50b1RodW1ibmFpbFN0cmluZyh0aGlzLnRodW1ibmFpbCksXG4gICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlLFxuICAgICAgICAgICAgYXV0aG9yOiB0aGlzLmF1dGhvcixcbiAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgICAgICAgdXJsOiB0aGlzLnVybCxcbiAgICAgICAgICAgICR0eXBlOiBTZXJpYWxpemVkVHlwZS5QbGF5bGlzdCxcbiAgICAgICAgICAgICRlbmNvZGVyX3ZlcnNpb246ICc2LjcuMSdcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXNlcmlhbGl6ZSB0aGlzIHBsYXlsaXN0IGZyb20gc2VyaWFsaXplZCBkYXRhXG4gICAgICogQHBhcmFtIHBsYXllciBQbGF5ZXIgaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gZGF0YSBTZXJpYWxpemVkIGRhdGFcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGZyb21TZXJpYWxpemVkKHBsYXllcjogUGxheWVyLCBkYXRhOiBTZXJpYWxpemVkUGxheWxpc3QpIHtcbiAgICAgICAgaWYgKGRhdGEuJHR5cGUgIT09IFNlcmlhbGl6ZWRUeXBlLlBsYXlsaXN0KSB0aHJvdyBFeGNlcHRpb25zLkVSUl9JTlZBTElEX0FSR19UWVBFKCdkYXRhJywgJ1NlcmlhbGl6ZWRQbGF5bGlzdCcsICdtYWxmb3JtZWQgZGF0YScpO1xuICAgICAgICByZXR1cm4gbmV3IFBsYXlsaXN0KHBsYXllciwge1xuICAgICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgICAgIHRyYWNrczogZGF0YS50cmFja3MubWFwKChtKSA9PiBUcmFjay5mcm9tU2VyaWFsaXplZChwbGF5ZXIsIG0pKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQbGF5IHRoaXMgcGxheWxpc3QgdG8gdGhlIGdpdmVuIHZvaWNlIGNoYW5uZWwuIElmIHF1ZXVlIGV4aXN0cyBhbmQgYW5vdGhlciB0cmFjayBpcyBiZWluZyBwbGF5ZWQsIHRoaXMgcGxheWxpc3Qgd2lsbCBiZSBhZGRlZCB0byB0aGUgcXVldWUuXG4gICAgICogQHBhcmFtIGNoYW5uZWwgVm9pY2UgY2hhbm5lbCBvbiB3aGljaCB0aGlzIHBsYXlsaXN0IHNoYWxsIGJlIHBsYXllZFxuICAgICAqIEBwYXJhbSBvcHRpb25zIE5vZGUgaW5pdGlhbGl6YXRpb24gb3B0aW9uc1xuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBwbGF5PFQgPSB1bmtub3duPihjaGFubmVsOiBHdWlsZFZvaWNlQ2hhbm5lbFJlc29sdmFibGUsIG9wdGlvbnM/OiBQbGF5ZXJOb2RlSW5pdGlhbGl6ZXJPcHRpb25zPFQ+KTogUHJvbWlzZTxQbGF5ZXJOb2RlSW5pdGlhbGl6YXRpb25SZXN1bHQ8VD4+IHtcbiAgICAgICAgY29uc3QgZm4gPSB0aGlzLnBsYXllci5wbGF5LmJpbmQodGhpcy5wbGF5ZXIpO1xuXG4gICAgICAgIHJldHVybiBhd2FpdCBmbihjaGFubmVsLCB0aGlzLCBvcHRpb25zKTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBVc2VyLCBVc2VyUmVzb2x2YWJsZSwgVm9pY2VTdGF0ZSB9IGZyb20gJ2Rpc2NvcmQuanMnO1xuaW1wb3J0IHR5cGUgeyBHdWlsZFF1ZXVlIH0gZnJvbSAnLi4vcXVldWUnO1xuaW1wb3J0IHR5cGUgeyBUcmFjayB9IGZyb20gJy4uL2ZhYnJpYy9UcmFjayc7XG5pbXBvcnQgdHlwZSB7IFBsYXlsaXN0IH0gZnJvbSAnLi4vZmFicmljL1BsYXlsaXN0JztcbmltcG9ydCB0eXBlIHsgZG93bmxvYWRPcHRpb25zIH0gZnJvbSAneXRkbC1jb3JlJztcbmltcG9ydCB0eXBlIHsgUXVlcnlDYWNoZVByb3ZpZGVyIH0gZnJvbSAnLi4vdXRpbHMvUXVlcnlDYWNoZSc7XG5pbXBvcnQgdHlwZSB7IElQUm90YXRpb25Db25maWcgfSBmcm9tICcuLi91dGlscy9JUFJvdGF0b3InO1xuXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgdHlwZSB7IEJyaWRnZVByb3ZpZGVyIH0gZnJvbSAnQGRpc2NvcmQtcGxheWVyL2V4dHJhY3Rvcic7XG5cbmV4cG9ydCB0eXBlIEZpbHRlcnNOYW1lID0ga2V5b2YgUXVldWVGaWx0ZXJzO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBsYXllclNlYXJjaFJlc3VsdCB7XG4gICAgcGxheWxpc3Q6IFBsYXlsaXN0IHwgbnVsbDtcbiAgICB0cmFja3M6IFRyYWNrW107XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBGRm1wZWcgZmlsdGVyc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFF1ZXVlRmlsdGVycyB7XG4gICAgYmFzc2Jvb3N0X2xvdz86IGJvb2xlYW47XG4gICAgYmFzc2Jvb3N0PzogYm9vbGVhbjtcbiAgICBiYXNzYm9vc3RfaGlnaD86IGJvb2xlYW47XG4gICAgJzhEJz86IGJvb2xlYW47XG4gICAgdmFwb3J3YXZlPzogYm9vbGVhbjtcbiAgICBuaWdodGNvcmU/OiBib29sZWFuO1xuICAgIHBoYXNlcj86IGJvb2xlYW47XG4gICAgdHJlbW9sbz86IGJvb2xlYW47XG4gICAgdmlicmF0bz86IGJvb2xlYW47XG4gICAgcmV2ZXJzZT86IGJvb2xlYW47XG4gICAgdHJlYmxlPzogYm9vbGVhbjtcbiAgICBub3JtYWxpemVyPzogYm9vbGVhbjtcbiAgICBub3JtYWxpemVyMj86IGJvb2xlYW47XG4gICAgc3Vycm91bmRpbmc/OiBib29sZWFuO1xuICAgIHB1bHNhdG9yPzogYm9vbGVhbjtcbiAgICBzdWJib29zdD86IGJvb2xlYW47XG4gICAga2FyYW9rZT86IGJvb2xlYW47XG4gICAgZmxhbmdlcj86IGJvb2xlYW47XG4gICAgZ2F0ZT86IGJvb2xlYW47XG4gICAgaGFhcz86IGJvb2xlYW47XG4gICAgbWNvbXBhbmQ/OiBib29sZWFuO1xuICAgIG1vbm8/OiBib29sZWFuO1xuICAgIG1zdGxyPzogYm9vbGVhbjtcbiAgICBtc3Rycj86IGJvb2xlYW47XG4gICAgY29tcHJlc3Nvcj86IGJvb2xlYW47XG4gICAgZXhwYW5kZXI/OiBib29sZWFuO1xuICAgIHNvZnRsaW1pdGVyPzogYm9vbGVhbjtcbiAgICBjaG9ydXM/OiBib29sZWFuO1xuICAgIGNob3J1czJkPzogYm9vbGVhbjtcbiAgICBjaG9ydXMzZD86IGJvb2xlYW47XG4gICAgZmFkZWluPzogYm9vbGVhbjtcbiAgICBkaW0/OiBib29sZWFuO1xuICAgIGVhcnJhcGU/OiBib29sZWFuO1xuICAgIGxvZmk/OiBib29sZWFuO1xuICAgIHNpbGVuY2VyZW1vdmU/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIFRoZSB0cmFjayBzb3VyY2U6XG4gKiAtIHNvdW5kY2xvdWRcbiAqIC0geW91dHViZVxuICogLSBzcG90aWZ5XG4gKiAtIGFwcGxlX211c2ljXG4gKiAtIGFyYml0cmFyeVxuICovXG5leHBvcnQgdHlwZSBUcmFja1NvdXJjZSA9ICdzb3VuZGNsb3VkJyB8ICd5b3V0dWJlJyB8ICdzcG90aWZ5JyB8ICdhcHBsZV9tdXNpYycgfCAnYXJiaXRyYXJ5JztcblxuZXhwb3J0IGludGVyZmFjZSBSYXdUcmFja0RhdGEge1xuICAgIC8qKlxuICAgICAqIFRoZSB0aXRsZVxuICAgICAqL1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGRlc2NyaXB0aW9uXG4gICAgICovXG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgYXV0aG9yXG4gICAgICovXG4gICAgYXV0aG9yOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHVybFxuICAgICAqL1xuICAgIHVybDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB0aHVtYm5haWxcbiAgICAgKi9cbiAgICB0aHVtYm5haWw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgZHVyYXRpb25cbiAgICAgKi9cbiAgICBkdXJhdGlvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBkdXJhdGlvbiBpbiBtc1xuICAgICAqL1xuICAgIHZpZXdzOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIHVzZXIgd2hvIHJlcXVlc3RlZCB0aGlzIHRyYWNrXG4gICAgICovXG4gICAgcmVxdWVzdGVkQnk/OiBVc2VyIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBUaGUgcGxheWxpc3RcbiAgICAgKi9cbiAgICBwbGF5bGlzdD86IFBsYXlsaXN0O1xuICAgIC8qKlxuICAgICAqIFRoZSBzb3VyY2VcbiAgICAgKi9cbiAgICBzb3VyY2U/OiBUcmFja1NvdXJjZTtcbiAgICAvKipcbiAgICAgKiBUaGUgZW5naW5lXG4gICAgICovXG4gICAgZW5naW5lPzogYW55OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAvKipcbiAgICAgKiBJZiB0aGlzIHRyYWNrIGlzIGxpdmVcbiAgICAgKi9cbiAgICBsaXZlPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUaGUgcmF3IGRhdGFcbiAgICAgKi9cbiAgICByYXc/OiBhbnk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIC8qKlxuICAgICAqIFRoZSBxdWVyeSB0eXBlXG4gICAgICovXG4gICAgcXVlcnlUeXBlPzogU2VhcmNoUXVlcnlUeXBlO1xuICAgIC8qKlxuICAgICAqIFRoZSBzZXJhbGlzZWQgdGl0bGVcbiAgICAgKi9cbiAgICBjbGVhblRpdGxlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRpbWVEYXRhIHtcbiAgICAvKipcbiAgICAgKiBUaW1lIGluIGRheXNcbiAgICAgKi9cbiAgICBkYXlzOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGltZSBpbiBob3Vyc1xuICAgICAqL1xuICAgIGhvdXJzOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGltZSBpbiBtaW51dGVzXG4gICAgICovXG4gICAgbWludXRlczogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRpbWUgaW4gc2Vjb25kc1xuICAgICAqL1xuICAgIHNlY29uZHM6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQbGF5ZXJQcm9ncmVzc2Jhck9wdGlvbnMge1xuICAgIC8qKlxuICAgICAqIElmIGl0IHNob3VsZCByZW5kZXIgdGltZSBjb2Rlc1xuICAgICAqL1xuICAgIHRpbWVjb2Rlcz86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogSWYgaXQgc2hvdWxkIGNyZWF0ZSBwcm9ncmVzcyBiYXIgZm9yIHRoZSB3aG9sZSBxdWV1ZVxuICAgICAqL1xuICAgIGxlbmd0aD86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgYmFyIGxlbmd0aFxuICAgICAqL1xuICAgIGxlZnRDaGFyPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBlbGFwc2VkIHRpbWUgdHJhY2tcbiAgICAgKi9cbiAgICByaWdodENoYXI/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHJlbWFpbmluZyB0aW1lIHRyYWNrXG4gICAgICovXG4gICAgc2VwYXJhdG9yPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBzZXBhcmF0aW9uIGJldHdlZW4gdGltZXN0YW1wIGFuZCBsaW5lXG4gICAgICovXG4gICAgaW5kaWNhdG9yPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBpbmRpY2F0b3JcbiAgICAgKi9cbiAgICBxdWV1ZT86IGJvb2xlYW47XG59XG5cbi8qKlxuICogVGhlIHNlYXJjaCBxdWVyeSB0eXBlXG4gKiBUaGlzIGNhbiBiZSBvbmUgb2Y6XG4gKiAtIEFVVE9cbiAqIC0gWU9VVFVCRVxuICogLSBZT1VUVUJFX1BMQVlMSVNUXG4gKiAtIFNPVU5EQ0xPVURfVFJBQ0tcbiAqIC0gU09VTkRDTE9VRF9QTEFZTElTVFxuICogLSBTT1VORENMT1VEXG4gKiAtIFNQT1RJRllfU09OR1xuICogLSBTUE9USUZZX0FMQlVNXG4gKiAtIFNQT1RJRllfUExBWUxJU1RcbiAqIC0gU1BPVElGWV9TRUFSQ0hcbiAqIC0gRkFDRUJPT0tcbiAqIC0gVklNRU9cbiAqIC0gQVJCSVRSQVJZXG4gKiAtIFJFVkVSQk5BVElPTlxuICogLSBZT1VUVUJFX1NFQVJDSFxuICogLSBZT1VUVUJFX1ZJREVPXG4gKiAtIFNPVU5EQ0xPVURfU0VBUkNIXG4gKiAtIEFQUExFX01VU0lDX1NPTkdcbiAqIC0gQVBQTEVfTVVTSUNfQUxCVU1cbiAqIC0gQVBQTEVfTVVTSUNfUExBWUxJU1RcbiAqIC0gQVBQTEVfTVVTSUNfU0VBUkNIXG4gKiAtIEZJTEVcbiAqIC0gQVVUT19TRUFSQ0hcbiAqIEB0eXBlZGVmIHtzdHJpbmd9IFF1ZXJ5VHlwZVxuICovXG5leHBvcnQgY29uc3QgUXVlcnlUeXBlID0ge1xuICAgIEFVVE86ICdhdXRvJyxcbiAgICBZT1VUVUJFOiAneW91dHViZScsXG4gICAgWU9VVFVCRV9QTEFZTElTVDogJ3lvdXR1YmVQbGF5bGlzdCcsXG4gICAgU09VTkRDTE9VRF9UUkFDSzogJ3NvdW5kY2xvdWRUcmFjaycsXG4gICAgU09VTkRDTE9VRF9QTEFZTElTVDogJ3NvdW5kY2xvdWRQbGF5bGlzdCcsXG4gICAgU09VTkRDTE9VRDogJ3NvdW5kY2xvdWQnLFxuICAgIFNQT1RJRllfU09ORzogJ3Nwb3RpZnlTb25nJyxcbiAgICBTUE9USUZZX0FMQlVNOiAnc3BvdGlmeUFsYnVtJyxcbiAgICBTUE9USUZZX1BMQVlMSVNUOiAnc3BvdGlmeVBsYXlsaXN0JyxcbiAgICBTUE9USUZZX1NFQVJDSDogJ3Nwb3RpZnlTZWFyY2gnLFxuICAgIEZBQ0VCT09LOiAnZmFjZWJvb2snLFxuICAgIFZJTUVPOiAndmltZW8nLFxuICAgIEFSQklUUkFSWTogJ2FyYml0cmFyeScsXG4gICAgUkVWRVJCTkFUSU9OOiAncmV2ZXJibmF0aW9uJyxcbiAgICBZT1VUVUJFX1NFQVJDSDogJ3lvdXR1YmVTZWFyY2gnLFxuICAgIFlPVVRVQkVfVklERU86ICd5b3V0dWJlVmlkZW8nLFxuICAgIFNPVU5EQ0xPVURfU0VBUkNIOiAnc291bmRjbG91ZFNlYXJjaCcsXG4gICAgQVBQTEVfTVVTSUNfU09ORzogJ2FwcGxlTXVzaWNTb25nJyxcbiAgICBBUFBMRV9NVVNJQ19BTEJVTTogJ2FwcGxlTXVzaWNBbGJ1bScsXG4gICAgQVBQTEVfTVVTSUNfUExBWUxJU1Q6ICdhcHBsZU11c2ljUGxheWxpc3QnLFxuICAgIEFQUExFX01VU0lDX1NFQVJDSDogJ2FwcGxlTXVzaWNTZWFyY2gnLFxuICAgIEZJTEU6ICdmaWxlJyxcbiAgICBBVVRPX1NFQVJDSDogJ2F1dG9TZWFyY2gnXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgdHlwZSBTZWFyY2hRdWVyeVR5cGUgPSBrZXlvZiB0eXBlb2YgUXVlcnlUeXBlIHwgKHR5cGVvZiBRdWVyeVR5cGUpW2tleW9mIHR5cGVvZiBRdWVyeVR5cGVdO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5leHBvcnQgaW50ZXJmYWNlIFBsYXllckV2ZW50cyB7XG4gICAgZGVidWc6IChtZXNzYWdlOiBzdHJpbmcpID0+IGFueTtcbiAgICBlcnJvcjogKGVycm9yOiBFcnJvcikgPT4gYW55O1xuICAgIHZvaWNlU3RhdGVVcGRhdGU6IChxdWV1ZTogR3VpbGRRdWV1ZSwgb2xkU3RhdGU6IFZvaWNlU3RhdGUsIG5ld1N0YXRlOiBWb2ljZVN0YXRlKSA9PiBhbnk7XG59XG5cbmV4cG9ydCBjb25zdCBQbGF5ZXJFdmVudCA9IHtcbiAgICBkZWJ1ZzogJ2RlYnVnJyxcbiAgICBEZWJ1ZzogJ2RlYnVnJyxcbiAgICBlcnJvcjogJ2Vycm9yJyxcbiAgICBFcnJvcjogJ2Vycm9yJyxcbiAgICB2b2ljZVN0YXRlVXBkYXRlOiAndm9pY2VTdGF0ZVVwZGF0ZScsXG4gICAgVm9pY2VTdGF0ZVVwZGF0ZTogJ3ZvaWNlU3RhdGVVcGRhdGUnXG59IGFzIGNvbnN0O1xuZXhwb3J0IHR5cGUgUGxheWVyRXZlbnQgPSAodHlwZW9mIFBsYXllckV2ZW50KVtrZXlvZiB0eXBlb2YgUGxheWVyRXZlbnRdO1xuXG4vKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cblxuZXhwb3J0IGludGVyZmFjZSBQbGF5T3B0aW9ucyB7XG4gICAgLyoqXG4gICAgICogSWYgdGhpcyBwbGF5IHdhcyB0cmlnZ2VyZWQgZm9yIGZpbHRlcnMgdXBkYXRlXG4gICAgICovXG4gICAgZmlsdGVyc1VwZGF0ZT86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRkZtcGVnIGFyZ3MgcGFzc2VkIHRvIGVuY29kZXJcbiAgICAgKi9cbiAgICBlbmNvZGVyQXJncz86IHN0cmluZ1tdO1xuICAgIC8qKlxuICAgICAqIFRpbWUgdG8gc2VlayB0byBiZWZvcmUgcGxheWluZ1xuICAgICAqL1xuICAgIHNlZWs/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogSWYgaXQgc2hvdWxkIHN0YXJ0IHBsYXlpbmcgdGhlIHByb3ZpZGVkIHRyYWNrIGltbWVkaWF0ZWx5XG4gICAgICovXG4gICAgaW1tZWRpYXRlPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IHR5cGUgUXVlcnlFeHRyYWN0b3JTZWFyY2ggPSBgZXh0OiR7c3RyaW5nfWA7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VhcmNoT3B0aW9ucyB7XG4gICAgLyoqXG4gICAgICogVGhlIHVzZXIgd2hvIHJlcXVlc3RlZCB0aGlzIHNlYXJjaFxuICAgICAqL1xuICAgIHJlcXVlc3RlZEJ5PzogVXNlclJlc29sdmFibGU7XG4gICAgLyoqXG4gICAgICogVGhlIHF1ZXJ5IHNlYXJjaCBlbmdpbmUsIGNhbiBiZSBleHRyYWN0b3IgbmFtZSB0byB0YXJnZXQgc3BlY2lmaWMgb25lIChjdXN0b20pXG4gICAgICovXG4gICAgc2VhcmNoRW5naW5lPzogU2VhcmNoUXVlcnlUeXBlIHwgUXVlcnlFeHRyYWN0b3JTZWFyY2g7XG4gICAgLyoqXG4gICAgICogTGlzdCBvZiB0aGUgZXh0cmFjdG9ycyB0byBibG9ja1xuICAgICAqL1xuICAgIGJsb2NrRXh0cmFjdG9ycz86IHN0cmluZ1tdO1xuICAgIC8qKlxuICAgICAqIElmIGl0IHNob3VsZCBpZ25vcmUgcXVlcnkgY2FjaGUgbG9va3VwXG4gICAgICovXG4gICAgaWdub3JlQ2FjaGU/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEZhbGxiYWNrIHNlYXJjaCBlbmdpbmUgdG8gdXNlXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICByZXF1ZXN0T3B0aW9ucz86IGFueTtcbiAgICAvKipcbiAgICAgKiBGYWxsYmFjayBzZWFyY2ggZW5naW5lIHRvIHVzZVxuICAgICAqL1xuICAgIGZhbGxiYWNrU2VhcmNoRW5naW5lPzogKHR5cGVvZiBRdWVyeVR5cGUpW2tleW9mIHR5cGVvZiBRdWVyeVR5cGVdO1xufVxuXG4vKipcbiAqIFRoZSBxdWV1ZSByZXBlYXQgbW9kZS4gVGhpcyBjYW4gYmUgb25lIG9mOlxuICogLSBPRkZcbiAqIC0gVFJBQ0tcbiAqIC0gUVVFVUVcbiAqIC0gQVVUT1BMQVlcbiAqL1xuZXhwb3J0IGVudW0gUXVldWVSZXBlYXRNb2RlIHtcbiAgICAvKipcbiAgICAgKiBEaXNhYmxlIHJlcGVhdCBtb2RlLlxuICAgICAqL1xuICAgIE9GRiA9IDAsXG4gICAgLyoqXG4gICAgICogUmVwZWF0IHRoZSBjdXJyZW50IHRyYWNrLlxuICAgICAqL1xuICAgIFRSQUNLID0gMSxcbiAgICAvKipcbiAgICAgKiBSZXBlYXQgdGhlIGVudGlyZSBxdWV1ZS5cbiAgICAgKi9cbiAgICBRVUVVRSA9IDIsXG4gICAgLyoqXG4gICAgICogV2hlbiBsYXN0IHRyYWNrIGVuZHMsIHBsYXkgc2ltaWxhciB0cmFja3MgaW4gdGhlIGZ1dHVyZSBpZiBxdWV1ZSBpcyBlbXB0eS5cbiAgICAgKi9cbiAgICBBVVRPUExBWSA9IDNcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQbGF5bGlzdEluaXREYXRhIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdHJhY2tzIG9mIHRoaXMgcGxheWxpc3RcbiAgICAgKi9cbiAgICB0cmFja3M6IFRyYWNrW107XG4gICAgLyoqXG4gICAgICogVGhlIHBsYXlsaXN0IHRpdGxlXG4gICAgICovXG4gICAgdGl0bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgZGVzY3JpcHRpb25cbiAgICAgKi9cbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB0aHVtYm5haWxcbiAgICAgKi9cbiAgICB0aHVtYm5haWw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgcGxheWxpc3QgdHlwZTogYGFsYnVtYCB8IGBwbGF5bGlzdGBcbiAgICAgKi9cbiAgICB0eXBlOiAnYWxidW0nIHwgJ3BsYXlsaXN0JztcbiAgICAvKipcbiAgICAgKiBUaGUgcGxheWxpc3Qgc291cmNlXG4gICAgICovXG4gICAgc291cmNlOiBUcmFja1NvdXJjZTtcbiAgICAvKipcbiAgICAgKiBUaGUgcGxheWxpc3QgYXV0aG9yXG4gICAgICovXG4gICAgYXV0aG9yOiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYXV0aG9yIG5hbWVcbiAgICAgICAgICovXG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBhdXRob3IgdXJsXG4gICAgICAgICAqL1xuICAgICAgICB1cmw6IHN0cmluZztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSBwbGF5bGlzdCBpZFxuICAgICAqL1xuICAgIGlkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHBsYXlsaXN0IHVybFxuICAgICAqL1xuICAgIHVybDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSByYXcgcGxheWxpc3QgZGF0YVxuICAgICAqL1xuICAgIHJhd1BsYXlsaXN0PzogYW55OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUcmFja0pTT04ge1xuICAgIC8qKlxuICAgICAqIFRoZSB0cmFjayBpZFxuICAgICAqL1xuICAgIGlkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHRyYWNrIHRpdGxlXG4gICAgICovXG4gICAgdGl0bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgdHJhY2sgZGVzY3JpcHRpb25cbiAgICAgKi9cbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB0cmFjayBhdXRob3JcbiAgICAgKi9cbiAgICBhdXRob3I6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgdHJhY2sgdXJsXG4gICAgICovXG4gICAgdXJsOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHRyYWNrIHRodW1ibmFpbFxuICAgICAqL1xuICAgIHRodW1ibmFpbDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB0cmFjayBkdXJhdGlvblxuICAgICAqL1xuICAgIGR1cmF0aW9uOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHRyYWNrIGR1cmF0aW9uIGluIG1zXG4gICAgICovXG4gICAgZHVyYXRpb25NUzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSB0cmFjayB2aWV3c1xuICAgICAqL1xuICAgIHZpZXdzOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIHVzZXIgaWQgd2hvIHJlcXVlc3RlZCB0aGlzIHRyYWNrXG4gICAgICovXG4gICAgcmVxdWVzdGVkQnk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgcGxheWxpc3QgaW5mbyAoaWYgYW55KVxuICAgICAqL1xuICAgIHBsYXlsaXN0PzogUGxheWxpc3RKU09OO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBsYXlsaXN0SlNPTiB7XG4gICAgLyoqXG4gICAgICogVGhlIHBsYXlsaXN0IGlkXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgcGxheWxpc3QgdXJsXG4gICAgICovXG4gICAgdXJsOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHBsYXlsaXN0IHRpdGxlXG4gICAgICovXG4gICAgdGl0bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgcGxheWxpc3QgZGVzY3JpcHRpb25cbiAgICAgKi9cbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB0aHVtYm5haWxcbiAgICAgKi9cbiAgICB0aHVtYm5haWw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgcGxheWxpc3QgdHlwZTogYGFsYnVtYCB8IGBwbGF5bGlzdGBcbiAgICAgKi9cbiAgICB0eXBlOiAnYWxidW0nIHwgJ3BsYXlsaXN0JztcbiAgICAvKipcbiAgICAgKiBUaGUgdHJhY2sgc291cmNlXG4gICAgICovXG4gICAgc291cmNlOiBUcmFja1NvdXJjZTtcbiAgICAvKipcbiAgICAgKiBUaGUgcGxheWxpc3QgYXV0aG9yXG4gICAgICovXG4gICAgYXV0aG9yOiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYXV0aG9yIG5hbWVcbiAgICAgICAgICovXG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBhdXRob3IgdXJsXG4gICAgICAgICAqL1xuICAgICAgICB1cmw6IHN0cmluZztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSB0cmFja3MgZGF0YSAoaWYgYW55KVxuICAgICAqL1xuICAgIHRyYWNrczogVHJhY2tKU09OW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGxheWVySW5pdE9wdGlvbnMge1xuICAgIC8qKlxuICAgICAqIFRoZSBvcHRpb25zIHBhc3NlZCB0byBgeXRkbC1jb3JlYC5cbiAgICAgKi9cbiAgICB5dGRsT3B0aW9ucz86IGRvd25sb2FkT3B0aW9ucztcbiAgICAvKipcbiAgICAgKiBUaGUgdm9pY2UgY29ubmVjdGlvbiB0aW1lb3V0XG4gICAgICovXG4gICAgY29ubmVjdGlvblRpbWVvdXQ/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGltZSBpbiBtcyB0byByZS1tb25pdG9yIGV2ZW50IGxvb3AgbGFnXG4gICAgICovXG4gICAgbGFnTW9uaXRvcj86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBQcmV2ZW50IHZvaWNlIHN0YXRlIGhhbmRsZXIgZnJvbSBiZWluZyBvdmVycmlkZGVuXG4gICAgICovXG4gICAgbG9ja1ZvaWNlU3RhdGVIYW5kbGVyPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIGV4dHJhY3RvcnMgdG8gZGlzYWJsZSBxdWVyeWluZyBtZXRhZGF0YSBmcm9tXG4gICAgICovXG4gICAgYmxvY2tFeHRyYWN0b3JzPzogc3RyaW5nW107XG4gICAgLyoqXG4gICAgICogTGlzdCBvZiBleHRyYWN0b3JzIHRvIGRpc2FibGUgc3RyZWFtaW5nIGZyb21cbiAgICAgKi9cbiAgICBibG9ja1N0cmVhbUZyb20/OiBzdHJpbmdbXTtcbiAgICAvKipcbiAgICAgKiBRdWVyeSBjYWNoZSBwcm92aWRlclxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgcXVlcnlDYWNoZT86IFF1ZXJ5Q2FjaGVQcm92aWRlcjxhbnk+IHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBJZ25vcmUgcGxheWVyIGluc3RhbmNlXG4gICAgICovXG4gICAgaWdub3JlSW5zdGFuY2U/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFVzZSBsZWdhY3kgdmVyc2lvbiBvZiBmZm1wZWdcbiAgICAgKi9cbiAgICB1c2VMZWdhY3lGRm1wZWc/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldCBicmlkZ2UgcHJvdmlkZXJcbiAgICAgKi9cbiAgICBicmlkZ2VQcm92aWRlcj86IEJyaWRnZVByb3ZpZGVyO1xuICAgIC8qKlxuICAgICAqIElQIHJvdGF0b3IgY29uZmlnXG4gICAgICovXG4gICAgaXBjb25maWc/OiBJUFJvdGF0aW9uQ29uZmlnO1xuICAgIC8qKlxuICAgICAqIFNraXAgZmZtcGVnIHByb2Nlc3Mgd2hlbiBwb3NzaWJsZVxuICAgICAqL1xuICAgIHNraXBGRm1wZWc/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSBwcm9iZSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcy4gRGVmYXVsdHMgdG8gNTAwMC5cbiAgICAgKi9cbiAgICBwcm9iZVRpbWVvdXQ/OiBudW1iZXI7XG59XG4iLCAiaW1wb3J0IHsgVXNlciB9IGZyb20gJ2Rpc2NvcmQuanMnO1xuaW1wb3J0IHsgQmFzZUV4dHJhY3RvciB9IGZyb20gJy4uL2V4dHJhY3RvcnMvQmFzZUV4dHJhY3Rvcic7XG5pbXBvcnQgeyBQbGF5ZXIgfSBmcm9tICcuLi9QbGF5ZXInO1xuaW1wb3J0IHsgUXVlcnlFeHRyYWN0b3JTZWFyY2gsIFF1ZXJ5VHlwZSwgU2VhcmNoUXVlcnlUeXBlIH0gZnJvbSAnLi4vdHlwZXMvdHlwZXMnO1xuaW1wb3J0IHsgUGxheWxpc3QgfSBmcm9tICcuL1BsYXlsaXN0JztcbmltcG9ydCB7IFRyYWNrIH0gZnJvbSAnLi9UcmFjayc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VhcmNoUmVzdWx0RGF0YSB7XG4gICAgcXVlcnk6IHN0cmluZztcbiAgICBxdWVyeVR5cGU/OiBTZWFyY2hRdWVyeVR5cGUgfCBRdWVyeUV4dHJhY3RvclNlYXJjaCB8IG51bGw7XG4gICAgZXh0cmFjdG9yPzogQmFzZUV4dHJhY3RvciB8IG51bGw7XG4gICAgcGxheWxpc3Q/OiBQbGF5bGlzdCB8IG51bGw7XG4gICAgdHJhY2tzPzogVHJhY2tbXTtcbiAgICByZXF1ZXN0ZWRCeT86IFVzZXIgfCBudWxsO1xufVxuXG5leHBvcnQgY2xhc3MgU2VhcmNoUmVzdWx0IHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIHBsYXllcjogUGxheWVyLCBwcml2YXRlIF9kYXRhOiBTZWFyY2hSZXN1bHREYXRhKSB7XG4gICAgICAgIHRoaXMuX2RhdGEudHJhY2tzPy5mb3JFYWNoKCh0cmFjaykgPT4ge1xuICAgICAgICAgICAgdHJhY2suZXh0cmFjdG9yID8/PSB0aGlzLl9kYXRhLmV4dHJhY3RvciB8fCBudWxsO1xuICAgICAgICAgICAgdHJhY2sucmVxdWVzdGVkQnkgPz89IF9kYXRhLnJlcXVlc3RlZEJ5IHx8IG51bGw7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRRdWVyeVR5cGUodHlwZTogU2VhcmNoUXVlcnlUeXBlIHwgUXVlcnlFeHRyYWN0b3JTZWFyY2gpIHtcbiAgICAgICAgdGhpcy5fZGF0YS5xdWVyeVR5cGUgPSB0eXBlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0UmVxdWVzdGVkQnkodXNlcjogVXNlcikge1xuICAgICAgICB0aGlzLl9kYXRhLnJlcXVlc3RlZEJ5ID0gdXNlcjtcbiAgICAgICAgdGhpcy5fZGF0YS50cmFja3M/LmZvckVhY2goKHRyYWNrKSA9PiB7XG4gICAgICAgICAgICB0cmFjay5yZXF1ZXN0ZWRCeSA9IHVzZXI7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0RXh0cmFjdG9yKGV4dHJhY3RvcjogQmFzZUV4dHJhY3Rvcikge1xuICAgICAgICB0aGlzLl9kYXRhLmV4dHJhY3RvciA9IGV4dHJhY3RvcjtcbiAgICAgICAgdGhpcy5fZGF0YS50cmFja3M/LmZvckVhY2goKHRyYWNrKSA9PiB7XG4gICAgICAgICAgICB0cmFjay5leHRyYWN0b3IgPSBleHRyYWN0b3I7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0VHJhY2tzKHRyYWNrczogVHJhY2tbXSkge1xuICAgICAgICB0aGlzLl9kYXRhLnRyYWNrcyA9IHRyYWNrcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIHNldFF1ZXJ5KHF1ZXJ5OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fZGF0YS5xdWVyeSA9IHF1ZXJ5O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0UGxheWxpc3QocGxheWxpc3Q6IFBsYXlsaXN0KSB7XG4gICAgICAgIHRoaXMuX2RhdGEucGxheWxpc3QgPSBwbGF5bGlzdDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHNlYXJjaCBxdWVyeVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgcXVlcnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhLnF1ZXJ5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBzZWFyY2ggcXVlcnkgdHlwZVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgcXVlcnlUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5xdWVyeVR5cGUgfHwgUXVlcnlUeXBlLkFVVE87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGV4dHJhY3RvclxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgZXh0cmFjdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5leHRyYWN0b3IgfHwgbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQbGF5bGlzdCByZXN1bHRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHBsYXlsaXN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5wbGF5bGlzdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmFja3MgcmVzdWx0XG4gICAgICovXG4gICAgcHVibGljIGdldCB0cmFja3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhLnRyYWNrcyB8fCBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0ZWQgYnlcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHJlcXVlc3RlZEJ5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5yZXF1ZXN0ZWRCeSB8fCBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlLWV4ZWN1dGUgdGhpcyBzZWFyY2hcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgZXhlY3V0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGxheWVyLnNlYXJjaCh0aGlzLnF1ZXJ5LCB7XG4gICAgICAgICAgICBzZWFyY2hFbmdpbmU6IHRoaXMucXVlcnlUeXBlLFxuICAgICAgICAgICAgcmVxdWVzdGVkQnk6IHRoaXMucmVxdWVzdGVkQnkhXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIHRoaXMgc2VhcmNoIHJlc3VsdCBpcyBlbXB0eVxuICAgICAqL1xuICAgIHB1YmxpYyBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gIXRoaXMudHJhY2tzLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiB0aGlzIHNlYXJjaCByZXN1bHQgaGFzIHBsYXlsaXN0XG4gICAgICovXG4gICAgcHVibGljIGhhc1BsYXlsaXN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wbGF5bGlzdCAhPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIHRoaXMgc2VhcmNoIHJlc3VsdCBoYXMgdHJhY2tzXG4gICAgICovXG4gICAgcHVibGljIGhhc1RyYWNrcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhY2tzLmxlbmd0aCA+IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHNlYXJjaFxuICAgICAqL1xuICAgIHB1YmxpYyB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBxdWVyeTogdGhpcy5xdWVyeSxcbiAgICAgICAgICAgIHF1ZXJ5VHlwZTogdGhpcy5xdWVyeVR5cGUsXG4gICAgICAgICAgICBwbGF5bGlzdDogdGhpcy5wbGF5bGlzdD8udG9KU09OKGZhbHNlKSB8fCBudWxsLFxuICAgICAgICAgICAgdHJhY2tzOiB0aGlzLnRyYWNrcy5tYXAoKG0pID0+IG0udG9KU09OKHRydWUpKSxcbiAgICAgICAgICAgIGV4dHJhY3RvcjogdGhpcy5leHRyYWN0b3I/LmlkZW50aWZpZXIgfHwgbnVsbCxcbiAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiB0aGlzLnJlcXVlc3RlZEJ5Py50b0pTT04oKSB8fCBudWxsXG4gICAgICAgIH07XG4gICAgfVxufVxuIiwgImltcG9ydCB7IEZpbHRlcnNOYW1lIH0gZnJvbSAnLi4vdHlwZXMvdHlwZXMnO1xuXG5jb25zdCBiYXNzID0gKGc6IG51bWJlcikgPT4gYGJhc3M9Zz0ke2d9OmY9MTEwOnc9MC4zYDtcblxuZXhwb3J0IGNsYXNzIEF1ZGlvRmlsdGVycyB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICByZXR1cm4gQXVkaW9GaWx0ZXJzO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZmlsdGVyczogUmVjb3JkPEZpbHRlcnNOYW1lLCBzdHJpbmc+ID0ge1xuICAgICAgICBiYXNzYm9vc3RfbG93OiBiYXNzKDE1KSxcbiAgICAgICAgYmFzc2Jvb3N0OiBiYXNzKDIwKSxcbiAgICAgICAgYmFzc2Jvb3N0X2hpZ2g6IGJhc3MoMzApLFxuICAgICAgICAnOEQnOiAnYXB1bHNhdG9yPWh6PTAuMDknLFxuICAgICAgICB2YXBvcndhdmU6ICdhcmVzYW1wbGU9NDgwMDAsYXNldHJhdGU9NDgwMDAqMC44JyxcbiAgICAgICAgbmlnaHRjb3JlOiAnYXJlc2FtcGxlPTQ4MDAwLGFzZXRyYXRlPTQ4MDAwKjEuMjUnLFxuICAgICAgICBsb2ZpOiAnYXJlc2FtcGxlPTQ4MDAwLGFzZXRyYXRlPTQ4MDAwKjAuOSxleHRyYXN0ZXJlbz1tPTIuNTpjPWRpc2FibGVkJyxcbiAgICAgICAgcGhhc2VyOiAnYXBoYXNlcj1pbl9nYWluPTAuNCcsXG4gICAgICAgIHRyZW1vbG86ICd0cmVtb2xvJyxcbiAgICAgICAgdmlicmF0bzogJ3ZpYnJhdG89Zj02LjUnLFxuICAgICAgICByZXZlcnNlOiAnYXJldmVyc2UnLFxuICAgICAgICB0cmVibGU6ICd0cmVibGU9Zz01JyxcbiAgICAgICAgbm9ybWFsaXplcjI6ICdkeW5hdWRub3JtPWc9MTAxJyxcbiAgICAgICAgbm9ybWFsaXplcjogJ2Fjb21wcmVzc29yJyxcbiAgICAgICAgc3Vycm91bmRpbmc6ICdzdXJyb3VuZCcsXG4gICAgICAgIHB1bHNhdG9yOiAnYXB1bHNhdG9yPWh6PTEnLFxuICAgICAgICBzdWJib29zdDogJ2FzdWJib29zdCcsXG4gICAgICAgIGthcmFva2U6ICdzdGVyZW90b29scz1tbGV2PTAuMDMnLFxuICAgICAgICBmbGFuZ2VyOiAnZmxhbmdlcicsXG4gICAgICAgIGdhdGU6ICdhZ2F0ZScsXG4gICAgICAgIGhhYXM6ICdoYWFzJyxcbiAgICAgICAgbWNvbXBhbmQ6ICdtY29tcGFuZCcsXG4gICAgICAgIG1vbm86ICdwYW49bW9ub3xjMD0uNSpjMCsuNSpjMScsXG4gICAgICAgIG1zdGxyOiAnc3RlcmVvdG9vbHM9bW9kZT1tcz5scicsXG4gICAgICAgIG1zdHJyOiAnc3RlcmVvdG9vbHM9bW9kZT1tcz5ycicsXG4gICAgICAgIGNvbXByZXNzb3I6ICdjb21wYW5kPXBvaW50cz0tODAvLTEwNXwtNjIvLTgwfC0xNS40Ly0xNS40fDAvLTEyfDIwLy03LjYnLFxuICAgICAgICBleHBhbmRlcjogJ2NvbXBhbmQ9YXR0YWNrcz0wOnBvaW50cz0tODAvLTE2OXwtNTQvLTgwfC00OS41Ly02NC42fC00MS4xLy00MS4xfC0yNS44Ly0xNXwtMTAuOC8tNC41fDAvMHwyMC84LjMnLFxuICAgICAgICBzb2Z0bGltaXRlcjogJ2NvbXBhbmQ9YXR0YWNrcz0wOnBvaW50cz0tODAvLTgwfC0xMi40Ly0xMi40fC02Ly04fDAvLTYuOHwyMC8tMi44JyxcbiAgICAgICAgY2hvcnVzOiAnY2hvcnVzPTAuNzowLjk6NTU6MC40OjAuMjU6MicsXG4gICAgICAgIGNob3J1czJkOiAnY2hvcnVzPTAuNjowLjk6NTB8NjA6MC40fDAuMzI6MC4yNXwwLjQ6MnwxLjMnLFxuICAgICAgICBjaG9ydXMzZDogJ2Nob3J1cz0wLjU6MC45OjUwfDYwfDQwOjAuNHwwLjMyfDAuMzowLjI1fDAuNHwwLjM6MnwyLjN8MS4zJyxcbiAgICAgICAgZmFkZWluOiAnYWZhZGU9dD1pbjpzcz0wOmQ9MTAnLFxuICAgICAgICBkaW06IGBhZmZ0ZmlsdD1cIidyZWFsPXJlICogKDEtY2xpcCgoYi9uYikqYiwwLDEpKSc6aW1hZz0naW0gKiAoMS1jbGlwKChiL25iKSpiLDAsMSkpJ1wiYCxcbiAgICAgICAgZWFycmFwZTogJ2NoYW5uZWxzcGxpdCxzaWRlY2hhaW5nYXRlPWxldmVsX2luPTY0JyxcbiAgICAgICAgc2lsZW5jZXJlbW92ZTogJ3NpbGVuY2VyZW1vdmU9MTowOi01MGRCJ1xuICAgIH07XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldDxLIGV4dGVuZHMgRmlsdGVyc05hbWU+KG5hbWU6IEspIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyc1tuYW1lXSA/PyBuYW1lO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgaGFzPEsgZXh0ZW5kcyBGaWx0ZXJzTmFtZT4obmFtZTogSykge1xuICAgICAgICByZXR1cm4gbmFtZSBpbiB0aGlzLmZpbHRlcnM7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyAqW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjx7IG5hbWU6IEZpbHRlcnNOYW1lOyB2YWx1ZTogc3RyaW5nIH0+IHtcbiAgICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5maWx0ZXJzKSkge1xuICAgICAgICAgICAgeWllbGQgeyBuYW1lOiBrIGFzIEZpbHRlcnNOYW1lLCB2YWx1ZTogdiBhcyBzdHJpbmcgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IG5hbWVzKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5maWx0ZXJzKSBhcyBGaWx0ZXJzTmFtZVtdO1xuICAgIH1cblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBwdWJsaWMgc3RhdGljIGdldCBsZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWVzLmxlbmd0aDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lcy5tYXAoKG0pID0+ICh0aGlzIGFzIGFueSlbbV0pLmpvaW4oJywnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGZmbXBlZyBhcmdzIGZyb20gdGhlIHNwZWNpZmllZCBmaWx0ZXJzIG5hbWVcbiAgICAgKiBAcGFyYW0gZmlsdGVyIFRoZSBmaWx0ZXIgbmFtZVxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGU8SyBleHRlbmRzIEZpbHRlcnNOYW1lPihmaWx0ZXJzPzogKEsgfCBzdHJpbmcpW10pIHtcbiAgICAgICAgaWYgKCFmaWx0ZXJzIHx8ICFBcnJheS5pc0FycmF5KGZpbHRlcnMpKSByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gZmlsdGVyc1xuICAgICAgICAgICAgLmZpbHRlcigocHJlZGljYXRlKSA9PiB0eXBlb2YgcHJlZGljYXRlID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgIC5tYXAoKG0pID0+IHRoaXMuZ2V0KG0gYXMgSykpXG4gICAgICAgICAgICAuam9pbignLCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmluZXMgYXVkaW8gZmlsdGVyXG4gICAgICogQHBhcmFtIGZpbHRlck5hbWUgVGhlIG5hbWUgb2YgdGhlIGZpbHRlclxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgZmZtcGVnIGFyZ3NcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGRlZmluZShmaWx0ZXJOYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5maWx0ZXJzW2ZpbHRlck5hbWUgYXMgRmlsdGVyc05hbWVdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBtdWx0aXBsZSBhdWRpbyBmaWx0ZXJzXG4gICAgICogQHBhcmFtIGZpbHRlcnNBcnJheSBBcnJheSBvZiBmaWx0ZXJzIGNvbnRhaW5pbmcgdGhlIGZpbHRlciBuYW1lIGFuZCBmZm1wZWcgYXJnc1xuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZGVmaW5lQnVsayhmaWx0ZXJzQXJyYXk6IHsgbmFtZTogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIH1bXSkge1xuICAgICAgICBmaWx0ZXJzQXJyYXkuZm9yRWFjaCgoYXJyKSA9PiB0aGlzLmRlZmluZShhcnIubmFtZSwgYXJyLnZhbHVlKSk7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IFVzZXIgfSBmcm9tICdkaXNjb3JkLmpzJztcbmltcG9ydCB7IFJlYWRhYmxlIH0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7IFBsYXlsaXN0IH0gZnJvbSAnLi4vZmFicmljL1BsYXlsaXN0JztcbmltcG9ydCB7IFRyYWNrIH0gZnJvbSAnLi4vZmFicmljL1RyYWNrJztcbmltcG9ydCB7IFBsYXllckV2ZW50cywgU2VhcmNoUXVlcnlUeXBlIH0gZnJvbSAnLi4vdHlwZXMvdHlwZXMnO1xuaW1wb3J0IHsgRXh0cmFjdG9yRXhlY3V0aW9uQ29udGV4dCB9IGZyb20gJy4vRXh0cmFjdG9yRXhlY3V0aW9uQ29udGV4dCc7XG5pbXBvcnQgdHlwZSB7IFJlcXVlc3RPcHRpb25zIH0gZnJvbSAnaHR0cCc7XG5pbXBvcnQgeyBFeGNlcHRpb25zIH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB0eXBlIHsgR3VpbGRRdWV1ZUhpc3RvcnkgfSBmcm9tICcuLi9xdWV1ZSc7XG5cbmV4cG9ydCB0eXBlIEV4dHJhY3RvclN0cmVhbWFibGUgPVxuICAgIHwgUmVhZGFibGVcbiAgICB8IHN0cmluZ1xuICAgIHwge1xuICAgICAgICAgICRmbXQ6IHN0cmluZztcbiAgICAgICAgICBzdHJlYW06IFJlYWRhYmxlO1xuICAgICAgfTtcblxuZXhwb3J0IGNsYXNzIEJhc2VFeHRyYWN0b3I8VCBleHRlbmRzIG9iamVjdCA9IG9iamVjdD4ge1xuICAgIC8qKlxuICAgICAqIElkZW50aWZpZXIgZm9yIHRoaXMgZXh0cmFjdG9yXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBpZGVudGlmaWVyID0gJ2NvbS5kaXNjb3JkLXBsYXllci5leHRyYWN0b3InO1xuXG4gICAgLyoqXG4gICAgICogUHJpb3JpdHkgb2YgdGhpcyBleHRyYWN0b3IuIEhpZ2hlciB2YWx1ZSBtZWFucyBoaWdoZXIgcHJpb3JpdHkgKHdpbGwgYmUgZXhlY3V0ZWQgZmlyc3QpLlxuICAgICAqL1xuICAgIHB1YmxpYyBwcmlvcml0eSA9IDE7XG5cbiAgICAvKipcbiAgICAgKiBBIGxpc3Qgb2YgcXVlcnkgcHJvdG9jb2xzIHRoYXQgdGhpcyBleHRyYWN0b3Igc3VwcG9ydHMuXG4gICAgICovXG4gICAgcHVibGljIHByb3RvY29sczogc3RyaW5nW10gPSBbXTtcblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSBicmlkZ2UgcXVlcnkgY3JlYXRpb25cbiAgICAgKiBAcGFyYW0gdHJhY2sgVGhlIHRyYWNrIHRvIGJ1aWxkIHF1ZXJ5IGZvclxuICAgICAqL1xuICAgIHB1YmxpYyBjcmVhdGVCcmlkZ2VRdWVyeSA9ICh0cmFjazogVHJhY2spID0+IGAke3RyYWNrLnRpdGxlfSBieSAke3RyYWNrLmF1dGhvcn0gb2ZmaWNpYWwgYXVkaW9gO1xuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdG9yIGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIGNvbnRleHQgQ29udGV4dCB0aGF0IGluc3RhbnRpYXRlZCB0aGlzIGV4dHJhY3RvclxuICAgICAqIEBwYXJhbSBvcHRpb25zIEluaXRpYWxpemF0aW9uIG9wdGlvbnMgZm9yIHRoaXMgZXh0cmFjdG9yXG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBjb250ZXh0OiBFeHRyYWN0b3JFeGVjdXRpb25Db250ZXh0LCBwdWJsaWMgb3B0aW9uczogVCA9IDxUPnt9KSB7fVxuXG4gICAgLyoqXG4gICAgICogSWRlbnRpZmllciBvZiB0aGlzIGV4dHJhY3RvclxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgaWRlbnRpZmllcigpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmNvbnN0cnVjdG9yIGFzIHR5cGVvZiBCYXNlRXh0cmFjdG9yKS5pZGVudGlmaWVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY29uZmlndXJlcyB0aGlzIGV4dHJhY3RvclxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBuZXcgb3B0aW9ucyB0byBhcHBseVxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyByZWNvbmZpZ3VyZShvcHRpb25zOiBUKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIGF3YWl0IHRoaXMuZGVhY3RpdmF0ZSgpO1xuICAgICAgICBhd2FpdCB0aGlzLmFjdGl2YXRlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2Qgd2lsbCBiZSBleGVjdXRlZCB3aGVuIHRoaXMgZXh0cmFjdG9yIGlzIGFjdGl2YXRlZFxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBhY3RpdmF0ZSgpIHtcbiAgICAgICAgLy8gZXhlY3V0ZWQgd2hlbiB0aGlzIGV4dHJhY3RvciBpcyBhY3RpdmF0ZWRcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgYmUgZXhlY3V0ZWQgd2hlbiB0aGlzIGV4dHJhY3RvciBpcyBkZWFjdGl2YXRlZFxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBkZWFjdGl2YXRlKCkge1xuICAgICAgICAvLyBleGVjdXRlZCB3aGVuIHRoaXMgZXh0cmFjdG9yIGlzIGRlYWN0aXZhdGVkXG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZSBpbmNvbWluZyBxdWVyeVxuICAgICAqIEBwYXJhbSBxdWVyeSBUaGUgcXVlcnkgdG8gdmFsaWRhdGVcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgdmFsaWRhdGUocXVlcnk6IHN0cmluZywgdHlwZT86IFNlYXJjaFF1ZXJ5VHlwZSB8IG51bGwpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgdm9pZCB0eXBlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RyZWFtIHRoZSBnaXZlbiB0cmFja1xuICAgICAqIEBwYXJhbSBpbmZvIFRoZSB0cmFjayB0byBzdHJlYW1cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgc3RyZWFtKGluZm86IFRyYWNrKTogUHJvbWlzZTxFeHRyYWN0b3JTdHJlYW1hYmxlPiB7XG4gICAgICAgIHZvaWQgaW5mbztcbiAgICAgICAgdGhyb3cgRXhjZXB0aW9ucy5FUlJfTk9UX0lNUExFTUVOVEVEKGAke3RoaXMuY29uc3RydWN0b3IubmFtZX0uc3RyZWFtKClgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgdGhlIGdpdmVuIHF1ZXJ5XG4gICAgICogQHBhcmFtIHF1ZXJ5IFRoZSBxdWVyeSB0byBoYW5kbGVcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgaGFuZGxlKHF1ZXJ5OiBzdHJpbmcsIGNvbnRleHQ6IEV4dHJhY3RvclNlYXJjaENvbnRleHQpOiBQcm9taXNlPEV4dHJhY3RvckluZm8+IHtcbiAgICAgICAgdm9pZCBjb250ZXh0O1xuICAgICAgICB0aHJvdyBFeGNlcHRpb25zLkVSUl9OT1RfSU1QTEVNRU5URUQoYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfS5oYW5kbGUoKWApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCByZWxhdGVkIHRyYWNrcyBmb3IgdGhlIGdpdmVuIHRyYWNrXG4gICAgICogQHBhcmFtIHRyYWNrIFRoZSB0cmFjayBzb3VyY2VcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgZ2V0UmVsYXRlZFRyYWNrcyh0cmFjazogVHJhY2ssIGhpc3Rvcnk6IEd1aWxkUXVldWVIaXN0b3J5KTogUHJvbWlzZTxFeHRyYWN0b3JJbmZvPiB7XG4gICAgICAgIHZvaWQgdHJhY2s7XG4gICAgICAgIHZvaWQgaGlzdG9yeTtcbiAgICAgICAgdGhyb3cgRXhjZXB0aW9ucy5FUlJfTk9UX0lNUExFTUVOVEVEKGAke3RoaXMuY29uc3RydWN0b3IubmFtZX0uZ2V0UmVsYXRlZFRyYWNrcygpYCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzdHJlYW0gbWlkZGxld2FyZSB0byBoYW5kbGUgc3RyZWFtcyBiZWZvcmUgcGFzc2luZyBpdCB0byB0aGUgcGxheWVyXG4gICAgICogQHBhcmFtIHN0cmVhbSBUaGUgaW5jb21pbmcgc3RyZWFtXG4gICAgICogQHBhcmFtIG5leHQgVGhlIG5leHQgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBwdWJsaWMgaGFuZGxlUG9zdFN0cmVhbShzdHJlYW06IFJlYWRhYmxlLCBuZXh0OiBOZXh0RnVuY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIG5leHQobnVsbCwgc3RyZWFtKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNwYXRjaCBhbiBldmVudCB0byB0aGUgcGxheWVyXG4gICAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byBkaXNwYXRjaFxuICAgICAqIEBwYXJhbSBhcmdzIFRoZSBkYXRhIHRvIGRpc3BhdGNoXG4gICAgICovXG4gICAgcHVibGljIGVtaXQ8SyBleHRlbmRzIGtleW9mIFBsYXllckV2ZW50cz4oZXZlbnQ6IEssIC4uLmFyZ3M6IFBhcmFtZXRlcnM8UGxheWVyRXZlbnRzW0tdPikge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0LnBsYXllci5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgZXh0cmFjdG9yIHJlc3BvbnNlXG4gICAgICogQHBhcmFtIHBsYXlsaXN0IFRoZSBwbGF5bGlzdFxuICAgICAqIEBwYXJhbSB0cmFja3MgVGhlIHRyYWNrIGFycmF5XG4gICAgICovXG4gICAgcHVibGljIGNyZWF0ZVJlc3BvbnNlKHBsYXlsaXN0PzogUGxheWxpc3QgfCBudWxsLCB0cmFja3M6IFRyYWNrW10gPSBwbGF5bGlzdD8udHJhY2tzIHx8IFtdKTogRXh0cmFjdG9ySW5mbyB7XG4gICAgICAgIHJldHVybiB7IHBsYXlsaXN0OiBwbGF5bGlzdCB8fCBudWxsLCB0cmFja3MgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXcml0ZSBkZWJ1ZyBtZXNzYWdlXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIGRlYnVnIG1lc3NhZ2VcbiAgICAgKi9cbiAgICBwdWJsaWMgZGVidWcobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQucGxheWVyLmRlYnVnKG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElQIHJvdGF0b3IgaW5zdGFuY2UsIGlmIGF2YWlsYWJsZVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgcm91dGVQbGFubmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0LnBsYXllci5yb3V0ZVBsYW5uZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBmbGFnIHRvIGluZGljYXRlIGBEZW11eGFibGVgIHN0cmVhbSBzdXBwb3J0IGZvciBgb3B1c2AvYG9nZy9vcHVzYC9gd2VibS9vcHVzYCBmb3JtYXRzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgc3VwcG9ydHNEZW11eCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5jb250ZXh0LnBsYXllci5vcHRpb25zLnNraXBGRm1wZWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHN0cmVhbSBleHRyYWN0aW9uIGZvciBhbm90aGVyIGV4dHJhY3RvclxuICAgICAqIEBwYXJhbSB0cmFjayBUaGUgdHJhY2sgdG8gYnJpZGdlXG4gICAgICogQHBhcmFtIHNvdXJjZUV4dHJhY3RvciBUaGUgc291cmNlIGV4dHJhY3RvclxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBicmlkZ2UodHJhY2s6IFRyYWNrLCBzb3VyY2VFeHRyYWN0b3I6IEJhc2VFeHRyYWN0b3IgfCBudWxsKTogUHJvbWlzZTxFeHRyYWN0b3JTdHJlYW1hYmxlIHwgbnVsbD4ge1xuICAgICAgICB2b2lkIHNvdXJjZUV4dHJhY3RvcjtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5leHBvcnQgdHlwZSBOZXh0RnVuY3Rpb24gPSAoZXJyb3I/OiBFcnJvciB8IG51bGwsIHN0cmVhbT86IFJlYWRhYmxlKSA9PiB2b2lkO1xuXG5leHBvcnQgaW50ZXJmYWNlIEV4dHJhY3RvckluZm8ge1xuICAgIHBsYXlsaXN0OiBQbGF5bGlzdCB8IG51bGw7XG4gICAgdHJhY2tzOiBUcmFja1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV4dHJhY3RvclNlYXJjaENvbnRleHQge1xuICAgIHR5cGU/OiBTZWFyY2hRdWVyeVR5cGUgfCBudWxsO1xuICAgIHJlcXVlc3RlZEJ5PzogVXNlciB8IG51bGw7XG4gICAgcmVxdWVzdE9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucztcbiAgICBwcm90b2NvbD86IHN0cmluZyB8IG51bGw7XG59XG4iLCAiaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnLi4vUGxheWVyJztcbmltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tICdAZGlzY29yZC1wbGF5ZXIvdXRpbHMnO1xuaW1wb3J0IHsgQmFzZUV4dHJhY3RvciwgRXh0cmFjdG9yU3RyZWFtYWJsZSB9IGZyb20gJy4vQmFzZUV4dHJhY3Rvcic7XG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vdXRpbHMvVXRpbCc7XG5pbXBvcnQgeyBQbGF5ZXJFdmVudHNFbWl0dGVyIH0gZnJvbSAnLi4vdXRpbHMvUGxheWVyRXZlbnRzRW1pdHRlcic7XG5pbXBvcnQgeyBUeXBlVXRpbCB9IGZyb20gJy4uL3V0aWxzL1R5cGVVdGlsJztcbmltcG9ydCB7IFRyYWNrIH0gZnJvbSAnLi4vZmFicmljJztcblxuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBrbm93bkV4dHJhY3RvcktleXMgPSBbXG4gICAgJ1Nwb3RpZnlFeHRyYWN0b3InLFxuICAgICdBcHBsZU11c2ljRXh0cmFjdG9yJyxcbiAgICAnU291bmRDbG91ZEV4dHJhY3RvcicsXG4gICAgJ1lvdVR1YmVFeHRyYWN0b3InLFxuICAgICdWaW1lb0V4dHJhY3RvcicsXG4gICAgJ1JldmVyYm5hdGlvbkV4dHJhY3RvcicsXG4gICAgJ0F0dGFjaG1lbnRFeHRyYWN0b3InXG5dIGFzIGNvbnN0O1xuY29uc3Qga25vd25FeHRyYWN0b3JMaWIgPSAnQGRpc2NvcmQtcGxheWVyL2V4dHJhY3Rvcic7XG5cbmV4cG9ydCB0eXBlIEV4dHJhY3RvckxvYWRlck9wdGlvbkRpY3QgPSB7XG4gICAgLy8gQHRzLWlnbm9yZSB0eXBlc1xuICAgIFtLIGluICh0eXBlb2Yga25vd25FeHRyYWN0b3JLZXlzKVtudW1iZXJdXT86IENvbnN0cnVjdG9yUGFyYW1ldGVyczx0eXBlb2YgaW1wb3J0KCdAZGlzY29yZC1wbGF5ZXIvZXh0cmFjdG9yJylbS10+WzFdO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBFeHRyYWN0b3JFeGVjdXRpb25FdmVudHMge1xuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBhIGV4dHJhY3RvciBpcyByZWdpc3RlcmVkXG4gICAgICogQHBhcmFtIGNvbnRleHQgVGhlIGNvbnRleHQgd2hlcmUgZXh0cmFjdG9yIHdhcyByZWdpc3RlcmVkXG4gICAgICogQHBhcmFtIGV4dHJhY3RvciBUaGUgZXh0cmFjdG9yIHRoYXQgd2FzIHJlZ2lzdGVyZWRcbiAgICAgKi9cbiAgICByZWdpc3RlcmVkOiAoY29udGV4dDogRXh0cmFjdG9yRXhlY3V0aW9uQ29udGV4dCwgZXh0cmFjdG9yOiBCYXNlRXh0cmFjdG9yKSA9PiB1bmtub3duO1xuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBhIGV4dHJhY3RvciBpcyB1bnJlZ2lzdGVyZWRcbiAgICAgKiBAcGFyYW0gY29udGV4dCBUaGUgY29udGV4dCB3aGVyZSBleHRyYWN0b3Igd2FzIHVucmVnaXN0ZXJlZFxuICAgICAqIEBwYXJhbSBleHRyYWN0b3IgVGhlIGV4dHJhY3RvciB0aGF0IHdhcyB1bnJlZ2lzdGVyZWRcbiAgICAgKi9cbiAgICB1bnJlZ2lzdGVyZWQ6IChjb250ZXh0OiBFeHRyYWN0b3JFeGVjdXRpb25Db250ZXh0LCBleHRyYWN0b3I6IEJhc2VFeHRyYWN0b3IpID0+IHVua25vd247XG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIGEgZXh0cmFjdG9yIGlzIGFjdGl2YXRlZFxuICAgICAqIEBwYXJhbSBjb250ZXh0IFRoZSBjb250ZXh0IHdoZXJlIHRoaXMgZXZlbnQgb2NjdXJyZWRcbiAgICAgKiBAcGFyYW0gZXh0cmFjdG9yIFRoZSBleHRyYWN0b3Igd2hpY2ggd2FzIGFjdGl2YXRlZFxuICAgICAqL1xuICAgIGFjdGl2YXRlOiAoY29udGV4dDogRXh0cmFjdG9yRXhlY3V0aW9uQ29udGV4dCwgZXh0cmFjdG9yOiBCYXNlRXh0cmFjdG9yKSA9PiB1bmtub3duO1xuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBhIGV4dHJhY3RvciBpcyBkZWFjdGl2YXRlZFxuICAgICAqIEBwYXJhbSBjb250ZXh0IFRoZSBjb250ZXh0IHdoZXJlIHRoaXMgZXZlbnQgb2NjdXJyZWRcbiAgICAgKiBAcGFyYW0gZXh0cmFjdG9yIFRoZSBleHRyYWN0b3Igd2hpY2ggd2FzIGRlYWN0aXZhdGVkXG4gICAgICovXG4gICAgZGVhY3RpdmF0ZTogKGNvbnRleHQ6IEV4dHJhY3RvckV4ZWN1dGlvbkNvbnRleHQsIGV4dHJhY3RvcjogQmFzZUV4dHJhY3RvcikgPT4gdW5rbm93bjtcbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gYSBleHRyYWN0b3IgZmFpbHMgdG8gYWN0aXZhdGUvZGVhY3RpdmF0ZVxuICAgICAqIEBwYXJhbSBjb250ZXh0IFRoZSBjb250ZXh0IHdoZXJlIHRoaXMgZXZlbnQgb2NjdXJyZWRcbiAgICAgKiBAcGFyYW0gZXh0cmFjdG9yIFRoZSBleHRyYWN0b3Igd2hpY2ggd2FzIGRlYWN0aXZhdGVkXG4gICAgICovXG4gICAgZXJyb3I6IChjb250ZXh0OiBFeHRyYWN0b3JFeGVjdXRpb25Db250ZXh0LCBleHRyYWN0b3I6IEJhc2VFeHRyYWN0b3IsIGVycm9yOiBFcnJvcikgPT4gdW5rbm93bjtcbn1cblxuZXhwb3J0IGNsYXNzIEV4dHJhY3RvckV4ZWN1dGlvbkNvbnRleHQgZXh0ZW5kcyBQbGF5ZXJFdmVudHNFbWl0dGVyPEV4dHJhY3RvckV4ZWN1dGlvbkV2ZW50cz4ge1xuICAgIC8qKlxuICAgICAqIFRoZSBleHRyYWN0b3JzIHN0b3JlXG4gICAgICovXG4gICAgcHVibGljIHN0b3JlID0gbmV3IENvbGxlY3Rpb248c3RyaW5nLCBCYXNlRXh0cmFjdG9yPigpO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBwbGF5ZXI6IFBsYXllcikge1xuICAgICAgICBzdXBlcihbJ2Vycm9yJ10pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvYWQgZGVmYXVsdCBleHRyYWN0b3JzIGZyb20gYEBkaXNjb3JkLXBsYXllci9leHRyYWN0b3JgXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGxvYWREZWZhdWx0KGZpbHRlcj86IChleHQ6ICh0eXBlb2Yga25vd25FeHRyYWN0b3JLZXlzKVtudW1iZXJdKSA9PiBib29sZWFuIHwgbnVsbCwgb3B0aW9ucz86IEV4dHJhY3RvckxvYWRlck9wdGlvbkRpY3QpIHtcbiAgICAgICAgY29uc3QgbW9kID0gYXdhaXQgVXRpbC5pbXBvcnQoa25vd25FeHRyYWN0b3JMaWIpO1xuICAgICAgICBpZiAobW9kLmVycm9yKSByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IG1vZC5lcnJvciBhcyBFcnJvciB9O1xuXG4gICAgICAgIChmaWx0ZXIgPyBrbm93bkV4dHJhY3RvcktleXMuZmlsdGVyKGZpbHRlcikgOiBrbm93bkV4dHJhY3RvcktleXMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFtb2QubW9kdWxlW2tleV0pIHJldHVybjtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdHlwZXNcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXIoPHR5cGVvZiBCYXNlRXh0cmFjdG9yPm1vZC5tb2R1bGVba2V5XSwgb3B0aW9ucz8uW2tleV0gfHwge30pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBlcnJvcjogbnVsbCB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlIGlmIHRoZSBnaXZlbiBleHRyYWN0b3IgaXMgcmVnaXN0ZXJlZFxuICAgICAqIEBwYXJhbSBpZGVudGlmaWVyIFRoZSBleHRyYWN0b3IgaWRlbnRpZmllclxuICAgICAqL1xuICAgIHB1YmxpYyBpc1JlZ2lzdGVyZWQoaWRlbnRpZmllcjogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JlLmhhcyhpZGVudGlmaWVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2l6ZSBvZiByZWdpc3RlcmVkIGV4dHJhY3RvcnNcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JlLnNpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHNpbmdsZSBleHRyYWN0b3JcbiAgICAgKiBAcGFyYW0gaWRlbnRpZmllciBUaGUgZXh0cmFjdG9yIHRvIGdldFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQoaWRlbnRpZmllcjogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JlLmdldChpZGVudGlmaWVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBzaW5nbGUgZXh0cmFjdG9yXG4gICAgICogQHBhcmFtIF9leHRyYWN0b3IgVGhlIGV4dHJhY3RvciB0byByZWdpc3RlclxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgc3VwcGxpZWQgdG8gdGhlIGV4dHJhY3RvclxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyByZWdpc3RlcjxPIGV4dGVuZHMgb2JqZWN0LCBUIGV4dGVuZHMgdHlwZW9mIEJhc2VFeHRyYWN0b3I8Tz4+KF9leHRyYWN0b3I6IFQsIG9wdGlvbnM6IENvbnN0cnVjdG9yUGFyYW1ldGVyczxUPlsnMSddKTogUHJvbWlzZTxJbnN0YW5jZVR5cGU8VD4gfCBudWxsPiB7XG4gICAgICAgIGlmICh0eXBlb2YgX2V4dHJhY3Rvci5pZGVudGlmaWVyICE9PSAnc3RyaW5nJyB8fCB0aGlzLnN0b3JlLmhhcyhfZXh0cmFjdG9yLmlkZW50aWZpZXIpKSByZXR1cm4gbnVsbDtcbiAgICAgICAgY29uc3QgZXh0cmFjdG9yID0gbmV3IF9leHRyYWN0b3IodGhpcywgb3B0aW9ucyk7XG5cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAodGhpcy5wbGF5ZXIub3B0aW9ucy5icmlkZ2VQcm92aWRlcikgb3B0aW9ucy5icmlkZ2VQcm92aWRlciA/Pz0gdGhpcy5wbGF5ZXIub3B0aW9ucy5icmlkZ2VQcm92aWRlcjtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5zdG9yZS5zZXQoX2V4dHJhY3Rvci5pZGVudGlmaWVyLCBleHRyYWN0b3IpO1xuICAgICAgICAgICAgaWYgKHRoaXMucGxheWVyLmhhc0RlYnVnZ2VyKSB0aGlzLnBsYXllci5kZWJ1ZyhgJHtfZXh0cmFjdG9yLmlkZW50aWZpZXJ9IGV4dHJhY3RvciBsb2FkZWQhYCk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlZ2lzdGVyZWQnLCB0aGlzLCBleHRyYWN0b3IpO1xuICAgICAgICAgICAgYXdhaXQgZXh0cmFjdG9yLmFjdGl2YXRlKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5wbGF5ZXIuaGFzRGVidWdnZXIpIHRoaXMucGxheWVyLmRlYnVnKGAke19leHRyYWN0b3IuaWRlbnRpZmllcn0gZXh0cmFjdG9yIGFjdGl2YXRlZCFgKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnYWN0aXZhdGUnLCB0aGlzLCBleHRyYWN0b3IpO1xuICAgICAgICAgICAgcmV0dXJuIGV4dHJhY3RvciBhcyB1bmtub3duIGFzIEluc3RhbmNlVHlwZTxUPjtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5zdG9yZS5kZWxldGUoX2V4dHJhY3Rvci5pZGVudGlmaWVyKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnBsYXllci5oYXNEZWJ1Z2dlcikgdGhpcy5wbGF5ZXIuZGVidWcoYCR7X2V4dHJhY3Rvci5pZGVudGlmaWVyfSBleHRyYWN0b3IgZmFpbGVkIHRvIGFjdGl2YXRlISBFcnJvcjogJHtlfWApO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHRoaXMsIGV4dHJhY3RvciwgZSBhcyBFcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVucmVnaXN0ZXIgc2luZ2xlIGV4dHJhY3RvclxuICAgICAqIEBwYXJhbSBfZXh0cmFjdG9yIFRoZSBleHRyYWN0b3IgdG8gdW5yZWdpc3RlclxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyB1bnJlZ2lzdGVyPEsgZXh0ZW5kcyBzdHJpbmcgfCBCYXNlRXh0cmFjdG9yPihfZXh0cmFjdG9yOiBLKSB7XG4gICAgICAgIGNvbnN0IGV4dHJhY3RvciA9IHR5cGVvZiBfZXh0cmFjdG9yID09PSAnc3RyaW5nJyA/IHRoaXMuc3RvcmUuZ2V0KF9leHRyYWN0b3IpIDogdGhpcy5zdG9yZS5maW5kKChyKSA9PiByID09PSBfZXh0cmFjdG9yKTtcbiAgICAgICAgaWYgKCFleHRyYWN0b3IpIHJldHVybjtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gZXh0cmFjdG9yLmlkZW50aWZpZXIgfHwgdGhpcy5zdG9yZS5maW5kS2V5KChlKSA9PiBlID09PSBleHRyYWN0b3IpITtcbiAgICAgICAgICAgIHRoaXMuc3RvcmUuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICBpZiAodGhpcy5wbGF5ZXIuaGFzRGVidWdnZXIpIHRoaXMucGxheWVyLmRlYnVnKGAke2V4dHJhY3Rvci5pZGVudGlmaWVyfSBleHRyYWN0b3IgZGlzYWJsZWQhYCk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3VucmVnaXN0ZXJlZCcsIHRoaXMsIGV4dHJhY3Rvcik7XG4gICAgICAgICAgICBhd2FpdCBleHRyYWN0b3IuZGVhY3RpdmF0ZSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMucGxheWVyLmhhc0RlYnVnZ2VyKSB0aGlzLnBsYXllci5kZWJ1ZyhgJHtleHRyYWN0b3IuaWRlbnRpZmllcn0gZXh0cmFjdG9yIGRlYWN0aXZhdGVkIWApO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdkZWFjdGl2YXRlJywgdGhpcywgZXh0cmFjdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucGxheWVyLmhhc0RlYnVnZ2VyKSB0aGlzLnBsYXllci5kZWJ1ZyhgJHtleHRyYWN0b3IuaWRlbnRpZmllcn0gZXh0cmFjdG9yIGZhaWxlZCB0byBkZWFjdGl2YXRlIWApO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHRoaXMsIGV4dHJhY3RvciwgZSBhcyBFcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVbnJlZ2lzdGVyIGFsbCBleHRyYWN0b3JzXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIHVucmVnaXN0ZXJBbGwoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbCh0aGlzLnN0b3JlLm1hcCgoZSkgPT4gdGhpcy51bnJlZ2lzdGVyKGUpKSk7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUnVuIGFsbCB0aGUgZXh0cmFjdG9yc1xuICAgICAqIEBwYXJhbSBmbiBUaGUgcnVubmVyIGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIGZpbHRlckJsb2NrZWQgRmlsdGVyIGJsb2NrZWQgZXh0cmFjdG9yc1xuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBydW48VCA9IHVua25vd24+KGZuOiBFeHRyYWN0b3JFeGVjdXRpb25GTjxUPiwgZmlsdGVyQmxvY2tlZCA9IHRydWUpIHtcbiAgICAgICAgY29uc3QgYmxvY2tlZCA9IHRoaXMucGxheWVyLm9wdGlvbnMuYmxvY2tFeHRyYWN0b3JzID8/IFtdO1xuXG4gICAgICAgIGlmICghdGhpcy5zdG9yZS5zaXplKSB7XG4gICAgICAgICAgICBVdGlsLndhcm4oJ1NraXBwaW5nIGV4dHJhY3RvcnMgZXhlY3V0aW9uIHNpbmNlIHplcm8gZXh0cmFjdG9ycyB3ZXJlIHJlZ2lzdGVyZWQnLCAnTm9FeHRyYWN0b3JzJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzb3J0IGJ5IHByaW9yaXR5IHNvIHRoYXQgZXh0cmFjdG9ycyB3aXRoIGhpZ2hlciBwcmlvcml0eSBhcmUgZXhlY3V0ZWQgZmlyc3RcbiAgICAgICAgY29uc3QgZXh0cmFjdG9ycyA9IHRoaXMuc3RvcmUuc29ydCgoYSwgYikgPT4gYi5wcmlvcml0eSAtIGEucHJpb3JpdHkpO1xuXG4gICAgICAgIGxldCBlcnI6IEVycm9yIHwgbnVsbCA9IG51bGwsXG4gICAgICAgICAgICBsYXN0RXh0OiBCYXNlRXh0cmFjdG9yIHwgbnVsbCA9IG51bGw7XG5cbiAgICAgICAgZm9yIChjb25zdCBleHQgb2YgZXh0cmFjdG9ycy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgaWYgKGZpbHRlckJsb2NrZWQgJiYgYmxvY2tlZC5zb21lKChlKSA9PiBlID09PSBleHQuaWRlbnRpZmllcikpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKHRoaXMucGxheWVyLmhhc0RlYnVnZ2VyKSB0aGlzLnBsYXllci5kZWJ1ZyhgRXhlY3V0aW5nIGV4dHJhY3RvciAke2V4dC5pZGVudGlmaWVyfS4uLmApO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZm4oZXh0KS50aGVuKFxuICAgICAgICAgICAgICAgIChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsYXllci5oYXNEZWJ1Z2dlcikgdGhpcy5wbGF5ZXIuZGVidWcoYEV4dHJhY3RvciAke2V4dC5pZGVudGlmaWVyfSBmYWlsZWQgd2l0aCBlcnJvcjogJHtlfWApO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBUeXBlVXRpbC5pc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcihgJHtlfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGxhc3RFeHQgPSBleHQ7XG5cbiAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgIVR5cGVVdGlsLmlzRXJyb3IocmVzdWx0KSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsYXllci5oYXNEZWJ1Z2dlcikgdGhpcy5wbGF5ZXIuZGVidWcoYEV4dHJhY3RvciAke2V4dC5pZGVudGlmaWVyfSBleGVjdXRlZCBzdWNjZXNzZnVsbHkhYCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBleHRyYWN0b3I6IGV4dCxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFxuICAgICAgICAgICAgICAgIH0gYXMgRXh0cmFjdG9yRXhlY3V0aW9uUmVzdWx0PFQ+O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChUeXBlVXRpbC5pc0Vycm9yKHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICBlcnIgPSByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBleHRyYWN0b3I6IGxhc3RFeHQhLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnIsXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBmYWxzZVxuICAgICAgICAgICAgfSBhcyBFeHRyYWN0b3JFeGVjdXRpb25SZXN1bHQ8ZmFsc2U+O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcXVlc3QgYnJpZGdlIGZvciBhIHRyYWNrXG4gICAgICogQHBhcmFtIHRyYWNrIFRoZSB0cmFjayB0byByZXF1ZXN0IGJyaWRnZSBmb3JcbiAgICAgKiBAcGFyYW0gc291cmNlRXh0cmFjdG9yIFRoZSBzb3VyY2UgZXh0cmFjdG9yIG9mIHRoZSB0cmFja1xuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyByZXF1ZXN0QnJpZGdlKHRyYWNrOiBUcmFjaywgc291cmNlRXh0cmFjdG9yOiBCYXNlRXh0cmFjdG9yIHwgbnVsbCA9IHRyYWNrLmV4dHJhY3Rvcikge1xuICAgICAgICByZXR1cm4gdGhpcy5ydW48RXh0cmFjdG9yU3RyZWFtYWJsZT4oYXN5bmMgKGV4dCkgPT4ge1xuICAgICAgICAgICAgaWYgKHNvdXJjZUV4dHJhY3RvciAmJiBleHQuaWRlbnRpZmllciA9PT0gc291cmNlRXh0cmFjdG9yLmlkZW50aWZpZXIpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGV4dC5icmlkZ2UodHJhY2ssIHNvdXJjZUV4dHJhY3Rvcik7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVxdWVzdCBicmlkZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIGV4dHJhY3RvclxuICAgICAqIEBwYXJhbSB0cmFjayBUaGUgdHJhY2sgdG8gcmVxdWVzdCBicmlkZ2UgZm9yXG4gICAgICogQHBhcmFtIHNvdXJjZUV4dHJhY3RvciBUaGUgc291cmNlIGV4dHJhY3RvciBvZiB0aGUgdHJhY2tcbiAgICAgKiBAcGFyYW0gdGFyZ2V0RXh0cmFjdG9yIFRoZSB0YXJnZXQgZXh0cmFjdG9yIHRvIGJyaWRnZSB0b1xuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyByZXF1ZXN0QnJpZGdlRnJvbSh0cmFjazogVHJhY2ssIHNvdXJjZUV4dHJhY3RvcjogQmFzZUV4dHJhY3RvciB8IG51bGwsIHRhcmdldEV4dHJhY3RvcjogRXh0cmFjdG9yUmVzb2x2YWJsZSkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnJlc29sdmUodGFyZ2V0RXh0cmFjdG9yKTtcbiAgICAgICAgaWYgKCF0YXJnZXQpIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gdGFyZ2V0LmJyaWRnZSh0cmFjaywgc291cmNlRXh0cmFjdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBleHRyYWN0b3IgaXMgZGlzYWJsZWRcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNEaXNhYmxlZChpZGVudGlmaWVyOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGxheWVyLm9wdGlvbnMuYmxvY2tFeHRyYWN0b3JzPy5pbmNsdWRlcyhpZGVudGlmaWVyKSA/PyBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBleHRyYWN0b3IgaXMgZW5hYmxlZFxuICAgICAqL1xuICAgIHB1YmxpYyBpc0VuYWJsZWQoaWRlbnRpZmllcjogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5pc0Rpc2FibGVkKGlkZW50aWZpZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc29sdmUgZXh0cmFjdG9yIGlkZW50aWZpZXJcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzb2x2ZUlkKHJlc29sdmFibGU6IEV4dHJhY3RvclJlc29sdmFibGUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiByZXNvbHZhYmxlID09PSAnc3RyaW5nJyA/IHJlc29sdmFibGUgOiByZXNvbHZhYmxlLmlkZW50aWZpZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzb2x2ZSBleHRyYWN0b3JcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzb2x2ZShyZXNvbHZhYmxlOiBFeHRyYWN0b3JSZXNvbHZhYmxlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgcmVzb2x2YWJsZSA9PT0gJ3N0cmluZycgPyB0aGlzLmdldChyZXNvbHZhYmxlKSA6IHJlc29sdmFibGU7XG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV4dHJhY3RvckV4ZWN1dGlvblJlc3VsdDxUID0gdW5rbm93bj4ge1xuICAgIGV4dHJhY3RvcjogQmFzZUV4dHJhY3RvcjtcbiAgICBlcnJvcjogRXJyb3IgfCBudWxsO1xuICAgIHJlc3VsdDogVDtcbn1cblxuZXhwb3J0IHR5cGUgRXh0cmFjdG9yRXhlY3V0aW9uRk48VCA9IHVua25vd24+ID0gKGV4dHJhY3RvcjogQmFzZUV4dHJhY3RvcikgPT4gUHJvbWlzZTxUIHwgYm9vbGVhbj47XG5cbmV4cG9ydCB0eXBlIEV4dHJhY3RvclJlc29sdmFibGUgPSBzdHJpbmcgfCBCYXNlRXh0cmFjdG9yO1xuIiwgImltcG9ydCB7IEVxdWFsaXplckJhbmQsIFBDTUZpbHRlcnMsIEJpcXVhZEZpbHRlcnMgfSBmcm9tICdAZGlzY29yZC1wbGF5ZXIvZXF1YWxpemVyJztcbmltcG9ydCB7IENvbGxlY3Rpb24sIFF1ZXVlU3RyYXRlZ3kgfSBmcm9tICdAZGlzY29yZC1wbGF5ZXIvdXRpbHMnO1xuaW1wb3J0IHsgR3VpbGRSZXNvbHZhYmxlIH0gZnJvbSAnZGlzY29yZC5qcyc7XG5pbXBvcnQgeyBQbGF5ZXIgfSBmcm9tICcuLi9QbGF5ZXInO1xuaW1wb3J0IHsgR3VpbGRRdWV1ZSwgT25BZnRlckNyZWF0ZVN0cmVhbUhhbmRsZXIsIE9uQmVmb3JlQ3JlYXRlU3RyZWFtSGFuZGxlciB9IGZyb20gJy4vR3VpbGRRdWV1ZSc7XG5pbXBvcnQgeyBGaWx0ZXJzTmFtZSwgUXVldWVSZXBlYXRNb2RlIH0gZnJvbSAnLi4vdHlwZXMvdHlwZXMnO1xuaW1wb3J0IHsgZ2V0R2xvYmFsUmVnaXN0cnkgfSBmcm9tICcuLi91dGlscy9fX2ludGVybmFsX18nO1xuaW1wb3J0IHsgRXhjZXB0aW9ucyB9IGZyb20gJy4uL2Vycm9ycyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgR3VpbGROb2RlQ3JlYXRlT3B0aW9uczxUID0gdW5rbm93bj4ge1xuICAgIHN0cmF0ZWd5PzogUXVldWVTdHJhdGVneTtcbiAgICB2b2x1bWU/OiBudW1iZXI7XG4gICAgZXF1YWxpemVyPzogRXF1YWxpemVyQmFuZFtdO1xuICAgIGFfZmlsdGVyPzogUENNRmlsdGVyc1tdO1xuICAgIGJpcXVhZD86IEJpcXVhZEZpbHRlcnM7XG4gICAgcmVzYW1wbGVyPzogbnVtYmVyO1xuICAgIGRpc2FibGVIaXN0b3J5PzogYm9vbGVhbjtcbiAgICBvbkJlZm9yZUNyZWF0ZVN0cmVhbT86IE9uQmVmb3JlQ3JlYXRlU3RyZWFtSGFuZGxlcjtcbiAgICBvbkFmdGVyQ3JlYXRlU3RyZWFtPzogT25BZnRlckNyZWF0ZVN0cmVhbUhhbmRsZXI7XG4gICAgcmVwZWF0TW9kZT86IFF1ZXVlUmVwZWF0TW9kZTtcbiAgICBwYXVzZU9uRW1wdHk/OiBib29sZWFuO1xuICAgIGxlYXZlT25FbXB0eT86IGJvb2xlYW47XG4gICAgbGVhdmVPbkVtcHR5Q29vbGRvd24/OiBudW1iZXI7XG4gICAgbGVhdmVPbkVuZD86IGJvb2xlYW47XG4gICAgbGVhdmVPbkVuZENvb2xkb3duPzogbnVtYmVyO1xuICAgIGxlYXZlT25TdG9wPzogYm9vbGVhbjtcbiAgICBsZWF2ZU9uU3RvcENvb2xkb3duPzogbnVtYmVyO1xuICAgIG1ldGFkYXRhPzogVCB8IG51bGw7XG4gICAgc2VsZkRlYWY/OiBib29sZWFuO1xuICAgIGNvbm5lY3Rpb25UaW1lb3V0PzogbnVtYmVyO1xuICAgIGRlZmF1bHRGRm1wZWdGaWx0ZXJzPzogRmlsdGVyc05hbWVbXTtcbiAgICBidWZmZXJpbmdUaW1lb3V0PzogbnVtYmVyO1xuICAgIG5vRW1pdEluc2VydD86IGJvb2xlYW47XG4gICAgbWF4U2l6ZT86IG51bWJlcjtcbiAgICBtYXhIaXN0b3J5U2l6ZT86IG51bWJlcjtcbiAgICBwcmVmZXJCcmlkZ2VkTWV0YWRhdGE/OiBib29sZWFuO1xuICAgIGRpc2FibGVWb2x1bWU/OiBib29sZWFuO1xuICAgIGRpc2FibGVFcXVhbGl6ZXI/OiBib29sZWFuO1xuICAgIGRpc2FibGVGaWx0ZXJlcj86IGJvb2xlYW47XG4gICAgZGlzYWJsZUJpcXVhZD86IGJvb2xlYW47XG4gICAgZGlzYWJsZVJlc2FtcGxlcj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIE5vZGVSZXNvbHZhYmxlID0gR3VpbGRRdWV1ZSB8IEd1aWxkUmVzb2x2YWJsZTtcblxuZXhwb3J0IGNsYXNzIEd1aWxkTm9kZU1hbmFnZXI8TWV0YSA9IHVua25vd24+IHtcbiAgICBwdWJsaWMgY2FjaGUgPSBuZXcgQ29sbGVjdGlvbjxzdHJpbmcsIEd1aWxkUXVldWU+KCk7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBwbGF5ZXI6IFBsYXllcikge31cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBndWlsZCBxdWV1ZSBpZiBpdCBkb2VzIG5vdCBleGlzdFxuICAgICAqIEBwYXJhbSBndWlsZCBUaGUgZ3VpbGQgd2hpY2ggd2lsbCBiZSB0aGUgb3duZXIgb2YgdGhlIHF1ZXVlXG4gICAgICogQHBhcmFtIG9wdGlvbnMgUXVldWUgaW5pdGlhbGl6ZXIgb3B0aW9uc1xuICAgICAqL1xuICAgIHB1YmxpYyBjcmVhdGU8VCA9IE1ldGE+KGd1aWxkOiBHdWlsZFJlc29sdmFibGUsIG9wdGlvbnM6IEd1aWxkTm9kZUNyZWF0ZU9wdGlvbnM8VD4gPSB7fSk6IEd1aWxkUXVldWU8VD4ge1xuICAgICAgICBjb25zdCBzZXJ2ZXIgPSB0aGlzLnBsYXllci5jbGllbnQuZ3VpbGRzLnJlc29sdmUoZ3VpbGQpO1xuICAgICAgICBpZiAoIXNlcnZlcikge1xuICAgICAgICAgICAgdGhyb3cgRXhjZXB0aW9ucy5FUlJfTk9fR1VJTEQoJ0ludmFsaWQgb3IgdW5rbm93biBndWlsZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY2FjaGUuaGFzKHNlcnZlci5pZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhY2hlLmdldChzZXJ2ZXIuaWQpIGFzIEd1aWxkUXVldWU8VD47XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zLnN0cmF0ZWd5ID8/PSAnRklGTyc7XG4gICAgICAgIG9wdGlvbnMudm9sdW1lID8/PSAxMDA7XG4gICAgICAgIG9wdGlvbnMuZXF1YWxpemVyID8/PSBbXTtcbiAgICAgICAgb3B0aW9ucy5hX2ZpbHRlciA/Pz0gW107XG4gICAgICAgIG9wdGlvbnMuZGlzYWJsZUhpc3RvcnkgPz89IGZhbHNlO1xuICAgICAgICBvcHRpb25zLmxlYXZlT25FbXB0eSA/Pz0gdHJ1ZTtcbiAgICAgICAgb3B0aW9ucy5sZWF2ZU9uRW1wdHlDb29sZG93biA/Pz0gMDtcbiAgICAgICAgb3B0aW9ucy5sZWF2ZU9uRW5kID8/PSB0cnVlO1xuICAgICAgICBvcHRpb25zLmxlYXZlT25FbmRDb29sZG93biA/Pz0gMDtcbiAgICAgICAgb3B0aW9ucy5sZWF2ZU9uU3RvcCA/Pz0gdHJ1ZTtcbiAgICAgICAgb3B0aW9ucy5sZWF2ZU9uU3RvcENvb2xkb3duID8/PSAwO1xuICAgICAgICBvcHRpb25zLnJlc2FtcGxlciA/Pz0gNDgwMDA7XG4gICAgICAgIG9wdGlvbnMuc2VsZkRlYWYgPz89IHRydWU7XG4gICAgICAgIG9wdGlvbnMuY29ubmVjdGlvblRpbWVvdXQgPz89IHRoaXMucGxheWVyLm9wdGlvbnMuY29ubmVjdGlvblRpbWVvdXQ7XG4gICAgICAgIG9wdGlvbnMuYnVmZmVyaW5nVGltZW91dCA/Pz0gMTAwMDtcbiAgICAgICAgb3B0aW9ucy5tYXhTaXplID8/PSBJbmZpbml0eTtcbiAgICAgICAgb3B0aW9ucy5tYXhIaXN0b3J5U2l6ZSA/Pz0gSW5maW5pdHk7XG4gICAgICAgIG9wdGlvbnMucHJlZmVyQnJpZGdlZE1ldGFkYXRhID8/PSB0cnVlO1xuICAgICAgICBvcHRpb25zLnBhdXNlT25FbXB0eSA/Pz0gdHJ1ZTtcbiAgICAgICAgLy8gdG9kbyh0d2xpdGUpOiBtYXliZSBkaXNhYmxlIHRoZXNlIGJ5IGRlZmF1bHQ/XG4gICAgICAgIG9wdGlvbnMuZGlzYWJsZUJpcXVhZCA/Pz0gZmFsc2U7XG4gICAgICAgIG9wdGlvbnMuZGlzYWJsZUVxdWFsaXplciA/Pz0gZmFsc2U7XG4gICAgICAgIG9wdGlvbnMuZGlzYWJsZUZpbHRlcmVyID8/PSBmYWxzZTtcbiAgICAgICAgb3B0aW9ucy5kaXNhYmxlVm9sdW1lID8/PSBmYWxzZTtcbiAgICAgICAgb3B0aW9ucy5kaXNhYmxlUmVzYW1wbGVyID8/PSB0cnVlO1xuXG4gICAgICAgIGlmIChnZXRHbG9iYWxSZWdpc3RyeSgpLmhhcygnQFtvbkJlZm9yZUNyZWF0ZVN0cmVhbV0nKSAmJiAhb3B0aW9ucy5vbkJlZm9yZUNyZWF0ZVN0cmVhbSkge1xuICAgICAgICAgICAgb3B0aW9ucy5vbkJlZm9yZUNyZWF0ZVN0cmVhbSA9IGdldEdsb2JhbFJlZ2lzdHJ5KCkuZ2V0KCdAW29uQmVmb3JlQ3JlYXRlU3RyZWFtXScpIGFzIE9uQmVmb3JlQ3JlYXRlU3RyZWFtSGFuZGxlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnZXRHbG9iYWxSZWdpc3RyeSgpLmhhcygnQFtvbkFmdGVyQ3JlYXRlU3RyZWFtXScpICYmICFvcHRpb25zLm9uQWZ0ZXJDcmVhdGVTdHJlYW0pIHtcbiAgICAgICAgICAgIG9wdGlvbnMub25BZnRlckNyZWF0ZVN0cmVhbSA9IGdldEdsb2JhbFJlZ2lzdHJ5KCkuZ2V0KCdAW29uQWZ0ZXJDcmVhdGVTdHJlYW1dJykgYXMgT25BZnRlckNyZWF0ZVN0cmVhbUhhbmRsZXI7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBxdWV1ZSA9IG5ldyBHdWlsZFF1ZXVlPFQ+KHRoaXMucGxheWVyLCB7XG4gICAgICAgICAgICBndWlsZDogc2VydmVyLFxuICAgICAgICAgICAgcXVldWVTdHJhdGVneTogb3B0aW9ucy5zdHJhdGVneSxcbiAgICAgICAgICAgIHZvbHVtZTogb3B0aW9ucy52b2x1bWUsXG4gICAgICAgICAgICBlcXVhbGl6ZXI6IG9wdGlvbnMuZXF1YWxpemVyLFxuICAgICAgICAgICAgZmlsdGVyZXI6IG9wdGlvbnMuYV9maWx0ZXIsXG4gICAgICAgICAgICBiaXF1YWQ6IG9wdGlvbnMuYmlxdWFkLFxuICAgICAgICAgICAgcmVzYW1wbGVyOiBvcHRpb25zLnJlc2FtcGxlcixcbiAgICAgICAgICAgIGRpc2FibGVIaXN0b3J5OiBvcHRpb25zLmRpc2FibGVIaXN0b3J5LFxuICAgICAgICAgICAgb25CZWZvcmVDcmVhdGVTdHJlYW06IG9wdGlvbnMub25CZWZvcmVDcmVhdGVTdHJlYW0sXG4gICAgICAgICAgICBvbkFmdGVyQ3JlYXRlU3RyZWFtOiBvcHRpb25zLm9uQWZ0ZXJDcmVhdGVTdHJlYW0sXG4gICAgICAgICAgICByZXBlYXRNb2RlOiBvcHRpb25zLnJlcGVhdE1vZGUsXG4gICAgICAgICAgICBsZWF2ZU9uRW1wdHk6IG9wdGlvbnMubGVhdmVPbkVtcHR5LFxuICAgICAgICAgICAgbGVhdmVPbkVtcHR5Q29vbGRvd246IG9wdGlvbnMubGVhdmVPbkVtcHR5Q29vbGRvd24sXG4gICAgICAgICAgICBsZWF2ZU9uRW5kOiBvcHRpb25zLmxlYXZlT25FbmQsXG4gICAgICAgICAgICBsZWF2ZU9uRW5kQ29vbGRvd246IG9wdGlvbnMubGVhdmVPbkVuZENvb2xkb3duLFxuICAgICAgICAgICAgbGVhdmVPblN0b3A6IG9wdGlvbnMubGVhdmVPblN0b3AsXG4gICAgICAgICAgICBsZWF2ZU9uU3RvcENvb2xkb3duOiBvcHRpb25zLmxlYXZlT25TdG9wQ29vbGRvd24sXG4gICAgICAgICAgICBtZXRhZGF0YTogb3B0aW9ucy5tZXRhZGF0YSxcbiAgICAgICAgICAgIGNvbm5lY3Rpb25UaW1lb3V0OiBvcHRpb25zLmNvbm5lY3Rpb25UaW1lb3V0ID8/IDEyMF8wMDAsXG4gICAgICAgICAgICBzZWxmRGVhZjogb3B0aW9ucy5zZWxmRGVhZixcbiAgICAgICAgICAgIGZmbXBlZ0ZpbHRlcnM6IG9wdGlvbnMuZGVmYXVsdEZGbXBlZ0ZpbHRlcnMgPz8gW10sXG4gICAgICAgICAgICBidWZmZXJpbmdUaW1lb3V0OiBvcHRpb25zLmJ1ZmZlcmluZ1RpbWVvdXQsXG4gICAgICAgICAgICBub0VtaXRJbnNlcnQ6IG9wdGlvbnMubm9FbWl0SW5zZXJ0ID8/IGZhbHNlLFxuICAgICAgICAgICAgcHJlZmVyQnJpZGdlZE1ldGFkYXRhOiBvcHRpb25zLnByZWZlckJyaWRnZWRNZXRhZGF0YSxcbiAgICAgICAgICAgIG1heEhpc3RvcnlTaXplOiBvcHRpb25zLm1heEhpc3RvcnlTaXplLFxuICAgICAgICAgICAgbWF4U2l6ZTogb3B0aW9ucy5tYXhTaXplLFxuICAgICAgICAgICAgcGF1c2VPbkVtcHR5OiBvcHRpb25zLnBhdXNlT25FbXB0eSxcbiAgICAgICAgICAgIGRpc2FibGVCaXF1YWQ6IG9wdGlvbnMuZGlzYWJsZUJpcXVhZCxcbiAgICAgICAgICAgIGRpc2FibGVFcXVhbGl6ZXI6IG9wdGlvbnMuZGlzYWJsZUVxdWFsaXplcixcbiAgICAgICAgICAgIGRpc2FibGVGaWx0ZXJlcjogb3B0aW9ucy5kaXNhYmxlRmlsdGVyZXIsXG4gICAgICAgICAgICBkaXNhYmxlUmVzYW1wbGVyOiBvcHRpb25zLmRpc2FibGVSZXNhbXBsZXIsXG4gICAgICAgICAgICBkaXNhYmxlVm9sdW1lOiBvcHRpb25zLmRpc2FibGVWb2x1bWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5jYWNoZS5zZXQoc2VydmVyLmlkLCBxdWV1ZSk7XG5cbiAgICAgICAgcmV0dXJuIHF1ZXVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBleGlzdGluZyBxdWV1ZVxuICAgICAqIEBwYXJhbSBub2RlIFF1ZXVlIHJlc29sdmFibGVcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0PFQgPSBNZXRhPihub2RlOiBOb2RlUmVzb2x2YWJsZSkge1xuICAgICAgICBjb25zdCBxdWV1ZSA9IHRoaXMucmVzb2x2ZShub2RlKTtcbiAgICAgICAgaWYgKCFxdWV1ZSkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgcmV0dXJuICh0aGlzLmNhY2hlLmdldChxdWV1ZS5pZCkgYXMgR3VpbGRRdWV1ZTxUPikgfHwgbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBhIHF1ZXVlIGV4aXN0c1xuICAgICAqIEBwYXJhbSBub2RlIFF1ZXVlIHJlc29sdmFibGVcbiAgICAgKi9cbiAgICBwdWJsaWMgaGFzKG5vZGU6IE5vZGVSZXNvbHZhYmxlKSB7XG4gICAgICAgIGNvbnN0IGlkID0gbm9kZSBpbnN0YW5jZW9mIEd1aWxkUXVldWUgPyBub2RlLmlkIDogdGhpcy5wbGF5ZXIuY2xpZW50Lmd1aWxkcy5yZXNvbHZlSWQobm9kZSkhO1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZS5oYXMoaWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBxdWV1ZVxuICAgICAqIEBwYXJhbSBub2RlIFF1ZXVlIHJlc29sdmFibGVcbiAgICAgKi9cbiAgICBwdWJsaWMgZGVsZXRlKG5vZGU6IE5vZGVSZXNvbHZhYmxlKSB7XG4gICAgICAgIGNvbnN0IHF1ZXVlID0gdGhpcy5yZXNvbHZlKG5vZGUpO1xuICAgICAgICBpZiAoIXF1ZXVlKSB7XG4gICAgICAgICAgICB0aHJvdyBFeGNlcHRpb25zLkVSUl9OT19HVUlMRF9RVUVVRSgnQ2Fubm90IGRlbGV0ZSBub24tZXhpc3RpbmcgcXVldWUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHF1ZXVlLnNldFRyYW5zaXRpb25pbmcodHJ1ZSk7XG4gICAgICAgIHF1ZXVlLm5vZGUuc3RvcCh0cnVlKTtcbiAgICAgICAgcXVldWUuY29ubmVjdGlvbj8ucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgIHF1ZXVlLmRpc3BhdGNoZXI/LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICBxdWV1ZS5kaXNwYXRjaGVyPy5kaXNjb25uZWN0KCk7XG4gICAgICAgIHF1ZXVlLnRpbWVvdXRzLmZvckVhY2goKHRtKSA9PiBjbGVhclRpbWVvdXQodG0pKTtcbiAgICAgICAgcXVldWUuaGlzdG9yeS5jbGVhcigpO1xuICAgICAgICBxdWV1ZS50cmFja3MuY2xlYXIoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZS5kZWxldGUocXVldWUuaWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc29sdmUgcXVldWVcbiAgICAgKiBAcGFyYW0gbm9kZSBRdWV1ZSByZXNvbHZhYmxlXG4gICAgICovXG4gICAgcHVibGljIHJlc29sdmU8VCA9IE1ldGE+KG5vZGU6IE5vZGVSZXNvbHZhYmxlKSB7XG4gICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgR3VpbGRRdWV1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZS5nZXQodGhpcy5wbGF5ZXIuY2xpZW50Lmd1aWxkcy5yZXNvbHZlSWQobm9kZSkhKSBhcyBHdWlsZFF1ZXVlPFQ+IHwgdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc29sdmUgcXVldWUgaWRcbiAgICAgKiBAcGFyYW0gbm9kZSBRdWV1ZSByZXNvbHZhYmxlXG4gICAgICovXG4gICAgcHVibGljIHJlc29sdmVJZChub2RlOiBOb2RlUmVzb2x2YWJsZSkge1xuICAgICAgICBjb25zdCBxID0gdGhpcy5yZXNvbHZlKG5vZGUpO1xuICAgICAgICByZXR1cm4gcT8uaWQgfHwgbnVsbDtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgUGxheWVyLCBQbGF5ZXJOb2RlSW5pdGlhbGl6ZXJPcHRpb25zLCBUcmFja0xpa2UgfSBmcm9tICcuLi9QbGF5ZXInO1xuaW1wb3J0IHsgQ2hhbm5lbFR5cGUsIEd1aWxkLCBHdWlsZFZvaWNlQ2hhbm5lbFJlc29sdmFibGUsIFZvaWNlQmFzZWRDaGFubmVsLCBWb2ljZVN0YXRlIH0gZnJvbSAnZGlzY29yZC5qcyc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uLCBRdWV1ZSwgUXVldWVTdHJhdGVneSB9IGZyb20gJ0BkaXNjb3JkLXBsYXllci91dGlscyc7XG5pbXBvcnQgeyBCaXF1YWRGaWx0ZXJzLCBFcXVhbGl6ZXJCYW5kLCBQQ01GaWx0ZXJzIH0gZnJvbSAnQGRpc2NvcmQtcGxheWVyL2VxdWFsaXplcic7XG5pbXBvcnQgeyBUcmFjaywgVHJhY2tSZXNvbHZhYmxlIH0gZnJvbSAnLi4vZmFicmljL1RyYWNrJztcbmltcG9ydCB7IFN0cmVhbURpc3BhdGNoZXIgfSBmcm9tICcuLi9Wb2ljZUludGVyZmFjZS9TdHJlYW1EaXNwYXRjaGVyJztcbmltcG9ydCB7IHR5cGUgQXVkaW9QbGF5ZXIsIEF1ZGlvUmVzb3VyY2UsIFN0cmVhbVR5cGUsIFZvaWNlQ29ubmVjdGlvbiwgVm9pY2VDb25uZWN0aW9uU3RhdHVzIH0gZnJvbSAnZGlzY29yZC12b2lwJztcbmltcG9ydCB7IFV0aWwsIFZBTElEQVRFX1FVRVVFX0NBUCB9IGZyb20gJy4uL3V0aWxzL1V0aWwnO1xuaW1wb3J0IHsgUGxheWxpc3QgfSBmcm9tICcuLi9mYWJyaWMvUGxheWxpc3QnO1xuaW1wb3J0IHsgR3VpbGRRdWV1ZUhpc3RvcnkgfSBmcm9tICcuL0d1aWxkUXVldWVIaXN0b3J5JztcbmltcG9ydCB7IEd1aWxkUXVldWVQbGF5ZXJOb2RlLCBTdHJlYW1Db25maWcgfSBmcm9tICcuL0d1aWxkUXVldWVQbGF5ZXJOb2RlJztcbmltcG9ydCB7IEd1aWxkUXVldWVBdWRpb0ZpbHRlcnMgfSBmcm9tICcuL0d1aWxkUXVldWVBdWRpb0ZpbHRlcnMnO1xuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHsgRmlsdGVyc05hbWUsIFF1ZXVlUmVwZWF0TW9kZSwgU2VhcmNoUXVlcnlUeXBlIH0gZnJvbSAnLi4vdHlwZXMvdHlwZXMnO1xuaW1wb3J0IHsgc2V0VGltZW91dCB9IGZyb20gJ3RpbWVycyc7XG5pbXBvcnQgeyBHdWlsZFF1ZXVlU3RhdGlzdGljcyB9IGZyb20gJy4vR3VpbGRRdWV1ZVN0YXRpc3RpY3MnO1xuaW1wb3J0IHsgVHlwZVV0aWwgfSBmcm9tICcuLi91dGlscy9UeXBlVXRpbCc7XG5pbXBvcnQgeyBBc3luY1F1ZXVlIH0gZnJvbSAnLi4vdXRpbHMvQXN5bmNRdWV1ZSc7XG5pbXBvcnQgeyBFeGNlcHRpb25zIH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7IFN5bmNlZEx5cmljc1Byb3ZpZGVyIH0gZnJvbSAnLi9TeW5jZWRMeXJpY3NQcm92aWRlcic7XG5pbXBvcnQgeyBMcmNHZXRSZXN1bHQsIExyY1NlYXJjaFJlc3VsdCB9IGZyb20gJy4uL2xyY2xpYi9McmNMaWInO1xuXG5leHBvcnQgaW50ZXJmYWNlIEd1aWxkTm9kZUluaXQ8TWV0YSA9IHVua25vd24+IHtcbiAgICBndWlsZDogR3VpbGQ7XG4gICAgcXVldWVTdHJhdGVneTogUXVldWVTdHJhdGVneTtcbiAgICBlcXVhbGl6ZXI6IEVxdWFsaXplckJhbmRbXSB8IGJvb2xlYW47XG4gICAgdm9sdW1lOiBudW1iZXIgfCBib29sZWFuO1xuICAgIGJpcXVhZDogQmlxdWFkRmlsdGVycyB8IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG4gICAgcmVzYW1wbGVyOiBudW1iZXIgfCBib29sZWFuO1xuICAgIGZpbHRlcmVyOiBQQ01GaWx0ZXJzW10gfCBib29sZWFuO1xuICAgIGZmbXBlZ0ZpbHRlcnM6IEZpbHRlcnNOYW1lW107XG4gICAgZGlzYWJsZUhpc3Rvcnk6IGJvb2xlYW47XG4gICAgb25CZWZvcmVDcmVhdGVTdHJlYW0/OiBPbkJlZm9yZUNyZWF0ZVN0cmVhbUhhbmRsZXI7XG4gICAgb25BZnRlckNyZWF0ZVN0cmVhbT86IE9uQWZ0ZXJDcmVhdGVTdHJlYW1IYW5kbGVyO1xuICAgIHJlcGVhdE1vZGU/OiBRdWV1ZVJlcGVhdE1vZGU7XG4gICAgbGVhdmVPbkVtcHR5OiBib29sZWFuO1xuICAgIGxlYXZlT25FbXB0eUNvb2xkb3duOiBudW1iZXI7XG4gICAgbGVhdmVPbkVuZDogYm9vbGVhbjtcbiAgICBsZWF2ZU9uRW5kQ29vbGRvd246IG51bWJlcjtcbiAgICBsZWF2ZU9uU3RvcDogYm9vbGVhbjtcbiAgICBsZWF2ZU9uU3RvcENvb2xkb3duOiBudW1iZXI7XG4gICAgY29ubmVjdGlvblRpbWVvdXQ6IG51bWJlcjtcbiAgICBzZWxmRGVhZj86IGJvb2xlYW47XG4gICAgbWV0YWRhdGE/OiBNZXRhIHwgbnVsbDtcbiAgICBidWZmZXJpbmdUaW1lb3V0OiBudW1iZXI7XG4gICAgbm9FbWl0SW5zZXJ0OiBib29sZWFuO1xuICAgIG1heFNpemU/OiBudW1iZXI7XG4gICAgbWF4SGlzdG9yeVNpemU/OiBudW1iZXI7XG4gICAgcHJlZmVyQnJpZGdlZE1ldGFkYXRhOiBib29sZWFuO1xuICAgIHBhdXNlT25FbXB0eT86IGJvb2xlYW47XG4gICAgZGlzYWJsZVZvbHVtZTogYm9vbGVhbjtcbiAgICBkaXNhYmxlRXF1YWxpemVyOiBib29sZWFuO1xuICAgIGRpc2FibGVGaWx0ZXJlcjogYm9vbGVhbjtcbiAgICBkaXNhYmxlQmlxdWFkOiBib29sZWFuO1xuICAgIGRpc2FibGVSZXNhbXBsZXI6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVm9pY2VDb25uZWN0Q29uZmlnIHtcbiAgICBkZWFmPzogYm9vbGVhbjtcbiAgICB0aW1lb3V0PzogbnVtYmVyO1xuICAgIGdyb3VwPzogc3RyaW5nO1xuICAgIGF1ZGlvUGxheWVyPzogQXVkaW9QbGF5ZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9zdFByb2Nlc3NlZFJlc3VsdCB7XG4gICAgc3RyZWFtOiBSZWFkYWJsZTtcbiAgICB0eXBlOiBTdHJlYW1UeXBlO1xufVxuXG5leHBvcnQgdHlwZSBPbkJlZm9yZUNyZWF0ZVN0cmVhbUhhbmRsZXIgPSAodHJhY2s6IFRyYWNrLCBxdWVyeVR5cGU6IFNlYXJjaFF1ZXJ5VHlwZSwgcXVldWU6IEd1aWxkUXVldWUpID0+IFByb21pc2U8UmVhZGFibGUgfCBudWxsPjtcbmV4cG9ydCB0eXBlIE9uQWZ0ZXJDcmVhdGVTdHJlYW1IYW5kbGVyID0gKHN0cmVhbTogUmVhZGFibGUsIHF1ZXVlOiBHdWlsZFF1ZXVlKSA9PiBQcm9taXNlPFBvc3RQcm9jZXNzZWRSZXN1bHQgfCBudWxsPjtcblxuZXhwb3J0IHR5cGUgUGxheWVyVHJpZ2dlcmVkUmVhc29uID0gJ2ZpbHRlcnMnIHwgJ25vcm1hbCc7XG5cbmV4cG9ydCBjb25zdCBHdWlsZFF1ZXVlRXZlbnQgPSB7XG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIGF1ZGlvIHRyYWNrIGlzIGFkZGVkIHRvIHRoZSBxdWV1ZVxuICAgICAqL1xuICAgIGF1ZGlvVHJhY2tBZGQ6ICdhdWRpb1RyYWNrQWRkJyxcbiAgICBBdWRpb1RyYWNrQWRkOiAnYXVkaW9UcmFja0FkZCcsXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIGF1ZGlvIHRyYWNrcyB3ZXJlIGFkZGVkIHRvIHRoZSBxdWV1ZVxuICAgICAqL1xuICAgIGF1ZGlvVHJhY2tzQWRkOiAnYXVkaW9UcmFja3NBZGQnLFxuICAgIEF1ZGlvVHJhY2tzQWRkOiAnYXVkaW9UcmFja3NBZGQnLFxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBhdWRpbyB0cmFjayBpcyByZW1vdmVkIGZyb20gdGhlIHF1ZXVlXG4gICAgICovXG4gICAgYXVkaW9UcmFja1JlbW92ZTogJ2F1ZGlvVHJhY2tSZW1vdmUnLFxuICAgIEF1ZGlvVHJhY2tSZW1vdmU6ICdhdWRpb1RyYWNrUmVtb3ZlJyxcbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gYXVkaW8gdHJhY2tzIGFyZSByZW1vdmVkIGZyb20gdGhlIHF1ZXVlXG4gICAgICovXG4gICAgYXVkaW9UcmFja3NSZW1vdmU6ICdhdWRpb1RyYWNrc1JlbW92ZScsXG4gICAgQXVkaW9UcmFja3NSZW1vdmU6ICdhdWRpb1RyYWNrc1JlbW92ZScsXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIGEgY29ubmVjdGlvbiBpcyBjcmVhdGVkXG4gICAgICovXG4gICAgY29ubmVjdGlvbjogJ2Nvbm5lY3Rpb24nLFxuICAgIENvbm5lY3Rpb246ICdjb25uZWN0aW9uJyxcbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gYSB2b2ljZSBjb25uZWN0aW9uIGlzIGRlc3Ryb3llZFxuICAgICAqL1xuICAgIGNvbm5lY3Rpb25EZXN0cm95ZWQ6ICdjb25uZWN0aW9uRGVzdHJveWVkJyxcbiAgICBDb25uZWN0aW9uRGVzdHJveWVkOiAnY29ubmVjdGlvbkRlc3Ryb3llZCcsXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIHRoZSBib3QgaXMgZGlzY29ubmVjdGVkIGZyb20gdGhlIGNoYW5uZWxcbiAgICAgKi9cbiAgICBkaXNjb25uZWN0OiAnZGlzY29ubmVjdCcsXG4gICAgRGlzY29ubmVjdDogJ2Rpc2Nvbm5lY3QnLFxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiB0aGUgcXVldWUgc2VuZHMgYSBkZWJ1ZyBpbmZvXG4gICAgICovXG4gICAgZGVidWc6ICdkZWJ1ZycsXG4gICAgRGVidWc6ICdkZWJ1ZycsXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIHRoZSBxdWV1ZSBlbmNvdW50ZXJzIGVycm9yXG4gICAgICovXG4gICAgZXJyb3I6ICdlcnJvcicsXG4gICAgRXJyb3I6ICdlcnJvcicsXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIHRoZSB2b2ljZSBjaGFubmVsIGlzIGVtcHR5XG4gICAgICovXG4gICAgZW1wdHlDaGFubmVsOiAnZW1wdHlDaGFubmVsJyxcbiAgICBFbXB0eUNoYW5uZWw6ICdlbXB0eUNoYW5uZWwnLFxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiB0aGUgcXVldWUgaXMgZW1wdHlcbiAgICAgKi9cbiAgICBlbXB0eVF1ZXVlOiAnZW1wdHlRdWV1ZScsXG4gICAgRW1wdHlRdWV1ZTogJ2VtcHR5UXVldWUnLFxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiB0aGUgYXVkaW8gcGxheWVyIHN0YXJ0cyBzdHJlYW1pbmcgYXVkaW8gdHJhY2tcbiAgICAgKi9cbiAgICBwbGF5ZXJTdGFydDogJ3BsYXllclN0YXJ0JyxcbiAgICBQbGF5ZXJTdGFydDogJ3BsYXllclN0YXJ0JyxcbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gdGhlIGF1ZGlvIHBsYXllciBlcnJvcnMgd2hpbGUgc3RyZWFtaW5nIGF1ZGlvIHRyYWNrXG4gICAgICovXG4gICAgcGxheWVyRXJyb3I6ICdwbGF5ZXJFcnJvcicsXG4gICAgUGxheWVyRXJyb3I6ICdwbGF5ZXJFcnJvcicsXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIHRoZSBhdWRpbyBwbGF5ZXIgZmluaXNoZXMgc3RyZWFtaW5nIGF1ZGlvIHRyYWNrXG4gICAgICovXG4gICAgcGxheWVyRmluaXNoOiAncGxheWVyRmluaXNoJyxcbiAgICBQbGF5ZXJGaW5pc2g6ICdwbGF5ZXJGaW5pc2gnLFxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiB0aGUgYXVkaW8gcGxheWVyIHNraXBzIGN1cnJlbnQgdHJhY2tcbiAgICAgKi9cbiAgICBwbGF5ZXJTa2lwOiAncGxheWVyU2tpcCcsXG4gICAgUGxheWVyU2tpcDogJ3BsYXllclNraXAnLFxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiB0aGUgYXVkaW8gcGxheWVyIGlzIHRyaWdnZXJlZFxuICAgICAqL1xuICAgIHBsYXllclRyaWdnZXI6ICdwbGF5ZXJUcmlnZ2VyJyxcbiAgICBQbGF5ZXJUcmlnZ2VyOiAncGxheWVyVHJpZ2dlcicsXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIHRoZSB2b2ljZSBzdGF0ZSBpcyB1cGRhdGVkLiBDb25zdW1pbmcgdGhpcyBldmVudCBtYXkgZGlzYWJsZSBkZWZhdWx0IHZvaWNlIHN0YXRlIHVwZGF0ZSBoYW5kbGVyIGlmIGBQbGF5ZXIuaXNWb2ljZVN0YXRlSGFuZGxlckxvY2tlZCgpYCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICovXG4gICAgdm9pY2VTdGF0ZVVwZGF0ZTogJ3ZvaWNlU3RhdGVVcGRhdGUnLFxuICAgIFZvaWNlU3RhdGVVcGRhdGU6ICd2b2ljZVN0YXRlVXBkYXRlJyxcbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gdm9sdW1lIGlzIHVwZGF0ZWRcbiAgICAgKi9cbiAgICB2b2x1bWVDaGFuZ2U6ICd2b2x1bWVDaGFuZ2UnLFxuICAgIFZvbHVtZUNoYW5nZTogJ3ZvbHVtZUNoYW5nZScsXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIHBsYXllciBpcyBwYXVzZWRcbiAgICAgKi9cbiAgICBwbGF5ZXJQYXVzZTogJ3BsYXllclBhdXNlJyxcbiAgICBQbGF5ZXJQYXVzZTogJ3BsYXllclBhdXNlJyxcbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gcGxheWVyIGlzIHJlc3VtZWRcbiAgICAgKi9cbiAgICBwbGF5ZXJSZXN1bWU6ICdwbGF5ZXJSZXN1bWUnLFxuICAgIFBsYXllclJlc3VtZTogJ3BsYXllclJlc3VtZScsXG4gICAgLyoqXG4gICAgICogQmlxdWFkIEZpbHRlcnMgVXBkYXRlXG4gICAgICovXG4gICAgYmlxdWFkRmlsdGVyc1VwZGF0ZTogJ2JpcXVhZEZpbHRlcnNVcGRhdGUnLFxuICAgIEJpcXVhZEZpbHRlcnNVcGRhdGU6ICdiaXF1YWRGaWx0ZXJzVXBkYXRlJyxcbiAgICAvKipcbiAgICAgKiBFcXVhbGl6ZXIgVXBkYXRlXG4gICAgICovXG4gICAgZXF1YWxpemVyVXBkYXRlOiAnZXF1YWxpemVyVXBkYXRlJyxcbiAgICBFcXVhbGl6ZXJVcGRhdGU6ICdlcXVhbGl6ZXJVcGRhdGUnLFxuICAgIC8qKlxuICAgICAqIERTUCB1cGRhdGVcbiAgICAgKi9cbiAgICBkc3BVcGRhdGU6ICdkc3BVcGRhdGUnLFxuICAgIERTUFVwZGF0ZTogJ2RzcFVwZGF0ZScsXG4gICAgLyoqXG4gICAgICogQXVkaW8gRmlsdGVycyBVcGRhdGVcbiAgICAgKi9cbiAgICBhdWRpb0ZpbHRlcnNVcGRhdGU6ICdhdWRpb0ZpbHRlcnNVcGRhdGUnLFxuICAgIEF1ZGlvRmlsdGVyc1VwZGF0ZTogJ2F1ZGlvRmlsdGVyc1VwZGF0ZScsXG4gICAgLyoqXG4gICAgICogQXVkaW8gcGxheWVyIHdpbGwgcGxheSBuZXh0IHRyYWNrXG4gICAgICovXG4gICAgd2lsbFBsYXlUcmFjazogJ3dpbGxQbGF5VHJhY2snLFxuICAgIFdpbGxQbGF5VHJhY2s6ICd3aWxsUGxheVRyYWNrJyxcbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gYSB2b2ljZSBjaGFubmVsIGlzIHJlcG9wdWxhdGVkXG4gICAgICovXG4gICAgY2hhbm5lbFBvcHVsYXRlOiAnY2hhbm5lbFBvcHVsYXRlJyxcbiAgICBDaGFubmVsUG9wdWxhdGU6ICdjaGFubmVsUG9wdWxhdGUnLFxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBhIHF1ZXVlIGlzIHN1Y2Nlc3NmdWxseSBjcmVhdGVkXG4gICAgICovXG4gICAgcXVldWVDcmVhdGU6ICdxdWV1ZUNyZWF0ZScsXG4gICAgUXVldWVDcmVhdGU6ICdxdWV1ZUNyZWF0ZScsXG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIGEgcXVldWUgaXMgZGVsZXRlZFxuICAgICAqL1xuICAgIHF1ZXVlRGVsZXRlOiAncXVldWVEZWxldGUnLFxuICAgIFF1ZXVlRGVsZXRlOiAncXVldWVEZWxldGUnLFxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBhIHF1ZXVlIGlzIHRyeWluZyB0byBhZGQgc2ltaWxhciB0cmFjayBmb3IgYXV0b3BsYXlcbiAgICAgKi9cbiAgICB3aWxsQXV0b1BsYXk6ICd3aWxsQXV0b1BsYXknLFxuICAgIFdpbGxBdXRvUGxheTogJ3dpbGxBdXRvUGxheSdcbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCB0eXBlIEd1aWxkUXVldWVFdmVudCA9ICh0eXBlb2YgR3VpbGRRdWV1ZUV2ZW50KVtrZXlvZiB0eXBlb2YgR3VpbGRRdWV1ZUV2ZW50XTtcblxuZXhwb3J0IGVudW0gVHJhY2tTa2lwUmVhc29uIHtcbiAgICBOb1N0cmVhbSA9ICdFUlJfTk9fU1RSRUFNJyxcbiAgICBNYW51YWwgPSAnTUFOVUFMJyxcbiAgICBTRUVLX09WRVJfVEhSRVNIT0xEID0gJ1NFRUtfT1ZFUl9USFJFU0hPTEQnLFxuICAgIEp1bXAgPSAnSlVNUEVEX1RPX0FOT1RIRVJfVFJBQ0snLFxuICAgIFNraXBUbyA9ICdTS0lQX1RPX0FOT1RIRVJfVFJBQ0snLFxuICAgIEhpc3RvcnlOZXh0ID0gJ0hJU1RPUllfTkVYVF9UUkFDSydcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBpbnRlcmZhY2UgR3VpbGRRdWV1ZUV2ZW50czxNZXRhID0gYW55PiB7XG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIGF1ZGlvIHRyYWNrIGlzIGFkZGVkIHRvIHRoZSBxdWV1ZVxuICAgICAqIEBwYXJhbSBxdWV1ZSBUaGUgcXVldWUgd2hlcmUgdGhpcyBldmVudCBvY2N1cnJlZFxuICAgICAqIEBwYXJhbSB0cmFjayBUaGUgdHJhY2tcbiAgICAgKi9cbiAgICBbR3VpbGRRdWV1ZUV2ZW50LkF1ZGlvVHJhY2tBZGRdOiAocXVldWU6IEd1aWxkUXVldWU8TWV0YT4sIHRyYWNrOiBUcmFjaykgPT4gdW5rbm93bjtcbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gYXVkaW8gdHJhY2tzIHdlcmUgYWRkZWQgdG8gdGhlIHF1ZXVlXG4gICAgICogQHBhcmFtIHF1ZXVlIFRoZSBxdWV1ZSB3aGVyZSB0aGlzIGV2ZW50IG9jY3VycmVkXG4gICAgICogQHBhcmFtIHRyYWNrcyBUaGUgdHJhY2tzIGFycmF5XG4gICAgICovXG4gICAgW0d1aWxkUXVldWVFdmVudC5BdWRpb1RyYWNrc0FkZF06IChxdWV1ZTogR3VpbGRRdWV1ZTxNZXRhPiwgdHJhY2s6IFRyYWNrW10pID0+IHVua25vd247XG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIGF1ZGlvIHRyYWNrIGlzIHJlbW92ZWQgZnJvbSB0aGUgcXVldWVcbiAgICAgKiBAcGFyYW0gcXVldWUgVGhlIHF1ZXVlIHdoZXJlIHRoaXMgZXZlbnQgb2NjdXJyZWRcbiAgICAgKiBAcGFyYW0gdHJhY2sgVGhlIHRyYWNrXG4gICAgICovXG4gICAgW0d1aWxkUXVldWVFdmVudC5BdWRpb1RyYWNrUmVtb3ZlXTogKHF1ZXVlOiBHdWlsZFF1ZXVlPE1ldGE+LCB0cmFjazogVHJhY2spID0+IHVua25vd247XG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIGF1ZGlvIHRyYWNrcyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBxdWV1ZVxuICAgICAqIEBwYXJhbSBxdWV1ZSBUaGUgcXVldWUgd2hlcmUgdGhpcyBldmVudCBvY2N1cnJlZFxuICAgICAqIEBwYXJhbSB0cmFjayBUaGUgdHJhY2tcbiAgICAgKi9cbiAgICBbR3VpbGRRdWV1ZUV2ZW50LkF1ZGlvVHJhY2tzUmVtb3ZlXTogKHF1ZXVlOiBHdWlsZFF1ZXVlPE1ldGE+LCB0cmFjazogVHJhY2tbXSkgPT4gdW5rbm93bjtcbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gYSBjb25uZWN0aW9uIGlzIGNyZWF0ZWRcbiAgICAgKiBAcGFyYW0gcXVldWUgVGhlIHF1ZXVlIHdoZXJlIHRoaXMgZXZlbnQgb2NjdXJyZWRcbiAgICAgKi9cbiAgICBbR3VpbGRRdWV1ZUV2ZW50LkNvbm5lY3Rpb25dOiAocXVldWU6IEd1aWxkUXVldWU8TWV0YT4pID0+IHVua25vd247XG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIGEgY29ubmVjdGlvbiBpcyBkZXN0cm95ZWRcbiAgICAgKiBAcGFyYW0gcXVldWUgVGhlIHF1ZXVlIHdoZXJlIHRoaXMgZXZlbnQgb2NjdXJyZWRcbiAgICAgKi9cbiAgICBbR3VpbGRRdWV1ZUV2ZW50LkNvbm5lY3Rpb25EZXN0cm95ZWRdOiAocXVldWU6IEd1aWxkUXVldWU8TWV0YT4pID0+IHVua25vd247XG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIHRoZSBib3QgaXMgZGlzY29ubmVjdGVkIGZyb20gdGhlIGNoYW5uZWxcbiAgICAgKiBAcGFyYW0gcXVldWUgVGhlIHF1ZXVlIHdoZXJlIHRoaXMgZXZlbnQgb2NjdXJyZWRcbiAgICAgKi9cbiAgICBbR3VpbGRRdWV1ZUV2ZW50LkRpc2Nvbm5lY3RdOiAocXVldWU6IEd1aWxkUXVldWU8TWV0YT4pID0+IHVua25vd247XG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIHRoZSBxdWV1ZSBzZW5kcyBhIGRlYnVnIGluZm9cbiAgICAgKiBAcGFyYW0gcXVldWUgVGhlIHF1ZXVlIHdoZXJlIHRoaXMgZXZlbnQgb2NjdXJyZWRcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgZGVidWcgbWVzc2FnZVxuICAgICAqL1xuICAgIFtHdWlsZFF1ZXVlRXZlbnQuRGVidWddOiAocXVldWU6IEd1aWxkUXVldWU8TWV0YT4sIG1lc3NhZ2U6IHN0cmluZykgPT4gdW5rbm93bjtcbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gdGhlIHF1ZXVlIGVuY291bnRlcnMgZXJyb3JcbiAgICAgKiBAcGFyYW0gcXVldWUgVGhlIHF1ZXVlIHdoZXJlIHRoaXMgZXZlbnQgb2NjdXJyZWRcbiAgICAgKiBAcGFyYW0gZXJyb3IgVGhlIGVycm9yXG4gICAgICovXG4gICAgW0d1aWxkUXVldWVFdmVudC5FcnJvcl06IChxdWV1ZTogR3VpbGRRdWV1ZTxNZXRhPiwgZXJyb3I6IEVycm9yKSA9PiB1bmtub3duO1xuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiB0aGUgdm9pY2UgY2hhbm5lbCBpcyBlbXB0eVxuICAgICAqIEBwYXJhbSBxdWV1ZSBUaGUgcXVldWUgd2hlcmUgdGhpcyBldmVudCBvY2N1cnJlZFxuICAgICAqL1xuICAgIFtHdWlsZFF1ZXVlRXZlbnQuRW1wdHlDaGFubmVsXTogKHF1ZXVlOiBHdWlsZFF1ZXVlPE1ldGE+KSA9PiB1bmtub3duO1xuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiB0aGUgcXVldWUgaXMgZW1wdHlcbiAgICAgKiBAcGFyYW0gcXVldWUgVGhlIHF1ZXVlIHdoZXJlIHRoaXMgZXZlbnQgb2NjdXJyZWRcbiAgICAgKi9cbiAgICBbR3VpbGRRdWV1ZUV2ZW50LkVtcHR5UXVldWVdOiAocXVldWU6IEd1aWxkUXVldWU8TWV0YT4pID0+IHVua25vd247XG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIHRoZSBhdWRpbyBwbGF5ZXIgc3RhcnRzIHN0cmVhbWluZyBhdWRpbyB0cmFja1xuICAgICAqIEBwYXJhbSBxdWV1ZSBUaGUgcXVldWUgd2hlcmUgdGhpcyBldmVudCBvY2N1cnJlZFxuICAgICAqIEBwYXJhbSB0cmFjayBUaGUgdHJhY2sgdGhhdCBpcyBiZWluZyBzdHJlYW1lZFxuICAgICAqL1xuICAgIFtHdWlsZFF1ZXVlRXZlbnQuUGxheWVyU3RhcnRdOiAocXVldWU6IEd1aWxkUXVldWU8TWV0YT4sIHRyYWNrOiBUcmFjaykgPT4gdW5rbm93bjtcbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gdGhlIGF1ZGlvIHBsYXllciBlcnJvcnMgd2hpbGUgc3RyZWFtaW5nIGF1ZGlvIHRyYWNrXG4gICAgICogQHBhcmFtIHF1ZXVlIFRoZSBxdWV1ZSB3aGVyZSB0aGlzIGV2ZW50IG9jY3VycmVkXG4gICAgICogQHBhcmFtIGVycm9yIFRoZSBlcnJvclxuICAgICAqIEBwYXJhbSB0cmFjayBUaGUgdHJhY2sgdGhhdCBpcyBiZWluZyBzdHJlYW1lZFxuICAgICAqL1xuICAgIFtHdWlsZFF1ZXVlRXZlbnQuUGxheWVyRXJyb3JdOiAocXVldWU6IEd1aWxkUXVldWU8TWV0YT4sIGVycm9yOiBFcnJvciwgdHJhY2s6IFRyYWNrKSA9PiB1bmtub3duO1xuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiB0aGUgYXVkaW8gcGxheWVyIGZpbmlzaGVzIHN0cmVhbWluZyBhdWRpbyB0cmFja1xuICAgICAqIEBwYXJhbSBxdWV1ZSBUaGUgcXVldWUgd2hlcmUgdGhpcyBldmVudCBvY2N1cnJlZFxuICAgICAqIEBwYXJhbSB0cmFjayBUaGUgdHJhY2sgdGhhdCB3YXMgYmVpbmcgc3RyZWFtZWRcbiAgICAgKi9cbiAgICBbR3VpbGRRdWV1ZUV2ZW50LlBsYXllckZpbmlzaF06IChxdWV1ZTogR3VpbGRRdWV1ZTxNZXRhPiwgdHJhY2s6IFRyYWNrKSA9PiB1bmtub3duO1xuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiB0aGUgYXVkaW8gcGxheWVyIHNraXBzIGN1cnJlbnQgdHJhY2tcbiAgICAgKiBAcGFyYW0gcXVldWUgVGhlIHF1ZXVlIHdoZXJlIHRoaXMgZXZlbnQgb2NjdXJyZWRcbiAgICAgKiBAcGFyYW0gdHJhY2sgVGhlIHRyYWNrIHRoYXQgd2FzIHNraXBwZWRcbiAgICAgKiBAcGFyYW0gcmVhc29uIFRoZSByZWFzb24gZm9yIHNraXBwaW5nXG4gICAgICogQHBhcmFtIGRlc2NyaXB0aW9uIFRoZSBkZXNjcmlwdGlvbiBmb3Igc2tpcHBpbmdcbiAgICAgKi9cbiAgICBbR3VpbGRRdWV1ZUV2ZW50LlBsYXllclNraXBdOiAocXVldWU6IEd1aWxkUXVldWU8TWV0YT4sIHRyYWNrOiBUcmFjaywgcmVhc29uOiBUcmFja1NraXBSZWFzb24sIGRlc2NyaXB0aW9uOiBzdHJpbmcpID0+IHVua25vd247XG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIHRoZSBhdWRpbyBwbGF5ZXIgaXMgdHJpZ2dlcmVkXG4gICAgICogQHBhcmFtIHF1ZXVlIFRoZSBxdWV1ZSB3aGVyZSB0aGlzIGV2ZW50IG9jY3VycmVkXG4gICAgICogQHBhcmFtIHRyYWNrIFRoZSB0cmFjayB3aGljaCB3YXMgcGxheWVkIGluIHRoaXMgZXZlbnRcbiAgICAgKi9cbiAgICBbR3VpbGRRdWV1ZUV2ZW50LlBsYXllclRyaWdnZXJdOiAocXVldWU6IEd1aWxkUXVldWU8TWV0YT4sIHRyYWNrOiBUcmFjaywgcmVhc29uOiBQbGF5ZXJUcmlnZ2VyZWRSZWFzb24pID0+IHVua25vd247XG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIHRoZSB2b2ljZSBzdGF0ZSBpcyB1cGRhdGVkLiBDb25zdW1pbmcgdGhpcyBldmVudCBtYXkgZGlzYWJsZSBkZWZhdWx0IHZvaWNlIHN0YXRlIHVwZGF0ZSBoYW5kbGVyIGlmIGBQbGF5ZXIuaXNWb2ljZVN0YXRlSGFuZGxlckxvY2tlZCgpYCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICogQHBhcmFtIHF1ZXVlIFRoZSBxdWV1ZSB3aGVyZSB0aGlzIGV2ZW50IG9jY3VycmVkXG4gICAgICogQHBhcmFtIG9sZFN0YXRlIFRoZSBvbGQgdm9pY2Ugc3RhdGVcbiAgICAgKiBAcGFyYW0gbmV3U3RhdGUgVGhlIG5ldyB2b2ljZSBzdGF0ZVxuICAgICAqL1xuICAgIFtHdWlsZFF1ZXVlRXZlbnQuVm9pY2VTdGF0ZVVwZGF0ZV06IChxdWV1ZTogR3VpbGRRdWV1ZTxNZXRhPiwgb2xkU3RhdGU6IFZvaWNlU3RhdGUsIG5ld1N0YXRlOiBWb2ljZVN0YXRlKSA9PiB1bmtub3duO1xuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBhdWRpbyBwbGF5ZXIgaXMgcGF1c2VkXG4gICAgICogQHBhcmFtIHF1ZXVlIFRoZSBxdWV1ZSB3aGVyZSB0aGlzIGV2ZW50IG9jY3VycmVkXG4gICAgICovXG4gICAgW0d1aWxkUXVldWVFdmVudC5QbGF5ZXJQYXVzZV06IChxdWV1ZTogR3VpbGRRdWV1ZTxNZXRhPikgPT4gdW5rbm93bjtcbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gYXVkaW8gcGxheWVyIGlzIHJlc3VtZWRcbiAgICAgKiBAcGFyYW0gcXVldWUgVGhlIHF1ZXVlIHdoZXJlIHRoaXMgZXZlbnQgb2NjdXJyZWRcbiAgICAgKi9cbiAgICBbR3VpbGRRdWV1ZUV2ZW50LlBsYXllclJlc3VtZV06IChxdWV1ZTogR3VpbGRRdWV1ZTxNZXRhPikgPT4gdW5rbm93bjtcbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gYXVkaW8gcGxheWVyJ3Mgdm9sdW1lIGlzIGNoYW5nZWRcbiAgICAgKiBAcGFyYW0gcXVldWUgVGhlIHF1ZXVlIHdoZXJlIHRoaXMgZXZlbnQgb2NjdXJyZWRcbiAgICAgKiBAcGFyYW0gb2xkVm9sdW1lIFRoZSBvbGQgdm9sdW1lXG4gICAgICogQHBhcmFtIG5ld1ZvbHVtZSBUaGUgdXBkYXRlZCB2b2x1bWVcbiAgICAgKi9cbiAgICBbR3VpbGRRdWV1ZUV2ZW50LlZvbHVtZUNoYW5nZV06IChxdWV1ZTogR3VpbGRRdWV1ZTxNZXRhPiwgb2xkVm9sdW1lOiBudW1iZXIsIG5ld1ZvbHVtZTogbnVtYmVyKSA9PiB1bmtub3duO1xuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBlcXVhbGl6ZXIgY29uZmlnIGlzIHVwZGF0ZWRcbiAgICAgKiBAcGFyYW0gcXVldWUgVGhlIHF1ZXVlIHdoZXJlIHRoaXMgZXZlbnQgb2NjdXJyZWRcbiAgICAgKiBAcGFyYW0gb2xkRmlsdGVycyBPbGQgZmlsdGVyc1xuICAgICAqIEBwYXJhbSBuZXdGaWx0ZXJzIE5ldyBmaWx0ZXJzXG4gICAgICovXG4gICAgW0d1aWxkUXVldWVFdmVudC5FcXVhbGl6ZXJVcGRhdGVdOiAocXVldWU6IEd1aWxkUXVldWU8TWV0YT4sIG9sZEZpbHRlcnM6IEVxdWFsaXplckJhbmRbXSwgbmV3RmlsdGVyczogRXF1YWxpemVyQmFuZFtdKSA9PiB1bmtub3duO1xuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBiaXF1YWQgZmlsdGVycyBpcyB1cGRhdGVkXG4gICAgICogQHBhcmFtIHF1ZXVlIFRoZSBxdWV1ZSB3aGVyZSB0aGlzIGV2ZW50IG9jY3VycmVkXG4gICAgICogQHBhcmFtIG9sZEZpbHRlcnMgT2xkIGZpbHRlcnNcbiAgICAgKiBAcGFyYW0gbmV3RmlsdGVycyBOZXcgZmlsdGVyc1xuICAgICAqL1xuICAgIFtHdWlsZFF1ZXVlRXZlbnQuQmlxdWFkRmlsdGVyc1VwZGF0ZV06IChxdWV1ZTogR3VpbGRRdWV1ZTxNZXRhPiwgb2xkRmlsdGVyczogQmlxdWFkRmlsdGVycyB8IG51bGwsIG5ld0ZpbHRlcnM6IEJpcXVhZEZpbHRlcnMgfCBudWxsKSA9PiB1bmtub3duO1xuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBkc3AgZmlsdGVycyBpcyB1cGRhdGVkXG4gICAgICogQHBhcmFtIHF1ZXVlIFRoZSBxdWV1ZSB3aGVyZSB0aGlzIGV2ZW50IG9jY3VycmVkXG4gICAgICogQHBhcmFtIG9sZEZpbHRlcnMgT2xkIGZpbHRlcnNcbiAgICAgKiBAcGFyYW0gbmV3RmlsdGVycyBOZXcgZmlsdGVyc1xuICAgICAqL1xuICAgIFtHdWlsZFF1ZXVlRXZlbnQuRFNQVXBkYXRlXTogKHF1ZXVlOiBHdWlsZFF1ZXVlPE1ldGE+LCBvbGRGaWx0ZXJzOiBQQ01GaWx0ZXJzW10sIG5ld0ZpbHRlcnM6IFBDTUZpbHRlcnNbXSkgPT4gdW5rbm93bjtcbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gZmZtcGVnIGF1ZGlvIGZpbHRlcnMgaXMgdXBkYXRlZFxuICAgICAqIEBwYXJhbSBxdWV1ZSBUaGUgcXVldWUgd2hlcmUgdGhpcyBldmVudCBvY2N1cnJlZFxuICAgICAqIEBwYXJhbSBvbGRGaWx0ZXJzIE9sZCBmaWx0ZXJzXG4gICAgICogQHBhcmFtIG5ld0ZpbHRlcnMgTmV3IGZpbHRlcnNcbiAgICAgKi9cbiAgICBbR3VpbGRRdWV1ZUV2ZW50LkF1ZGlvRmlsdGVyc1VwZGF0ZV06IChxdWV1ZTogR3VpbGRRdWV1ZTxNZXRhPiwgb2xkRmlsdGVyczogRmlsdGVyc05hbWVbXSwgbmV3RmlsdGVyczogRmlsdGVyc05hbWVbXSkgPT4gdW5rbm93bjtcblxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgYmVmb3JlIHN0cmVhbWluZyBhbiBhdWRpbyB0cmFjay4gVGhpcyBldmVudCBjYW4gYmUgdXNlZCB0byBtb2RpZnkgc3RyZWFtIGNvbmZpZyBiZWZvcmUgcGxheWluZyBhIHRyYWNrLlxuICAgICAqIExpc3RlbmluZyB0byB0aGlzIGV2ZW50IHdpbGwgcGF1c2UgdGhlIGV4ZWN1dGlvbiBvZiBhdWRpbyBwbGF5ZXIgdW50aWwgYGRvbmUoKWAgaXMgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0gcXVldWUgVGhlIHF1ZXVlIHdoZXJlIHRoaXMgZXZlbnQgb2NjdXJyZWRcbiAgICAgKiBAcGFyYW0gdHJhY2sgVGhlIHRyYWNrIHRoYXQgd2lsbCBiZSBzdHJlYW1lZFxuICAgICAqIEBwYXJhbSBjb25maWcgQ29uZmlndXJhdGlvbnMgZm9yIHN0cmVhbWluZ1xuICAgICAqIEBwYXJhbSBkb25lIERvbmUgY2FsbGJhY2tcbiAgICAgKi9cbiAgICBbR3VpbGRRdWV1ZUV2ZW50LldpbGxQbGF5VHJhY2tdOiAocXVldWU6IEd1aWxkUXVldWU8TWV0YT4sIHRyYWNrOiBUcmFjazx1bmtub3duPiwgY29uZmlnOiBTdHJlYW1Db25maWcsIGRvbmU6ICgpID0+IHZvaWQpID0+IHVua25vd247XG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIGEgdm9pY2UgY2hhbm5lbCBpcyBwb3B1bGF0ZWRcbiAgICAgKiBAcGFyYW0gcXVldWUgVGhlIHF1ZXVlIHdoZXJlIHRoaXMgZXZlbnQgb2NjdXJyZWRcbiAgICAgKi9cbiAgICBbR3VpbGRRdWV1ZUV2ZW50LkNoYW5uZWxQb3B1bGF0ZV06IChxdWV1ZTogR3VpbGRRdWV1ZTxNZXRhPikgPT4gdW5rbm93bjtcbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW4gYSBxdWV1ZSBpcyBzdWNjZXNzZnVsbHkgY3JlYXRlZFxuICAgICAqIEBwYXJhbSBxdWV1ZSBUaGUgcXVldWUgd2hlcmUgdGhpcyBldmVudCBvY2N1cnJlZFxuICAgICAqL1xuICAgIFtHdWlsZFF1ZXVlRXZlbnQuUXVldWVDcmVhdGVdOiAocXVldWU6IEd1aWxkUXVldWU8TWV0YT4pID0+IHVua25vd247XG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuIGEgcXVldWUgaXMgc3VjY2Vzc2Z1bGx5IGRlbGV0ZWRcbiAgICAgKiBAcGFyYW0gcXVldWUgVGhlIHF1ZXVlIHdoZXJlIHRoaXMgZXZlbnQgb2NjdXJyZWRcbiAgICAgKi9cbiAgICBbR3VpbGRRdWV1ZUV2ZW50LlF1ZXVlRGVsZXRlXTogKHF1ZXVlOiBHdWlsZFF1ZXVlPE1ldGE+KSA9PiB1bmtub3duO1xuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBhIHF1ZXVlIGlzIHRyeWluZyB0byBhZGQgc2ltaWxhciB0cmFjayBmb3IgYXV0b3BsYXlcbiAgICAgKiBAcGFyYW0gcXVldWUgVGhlIHF1ZXVlIHdoZXJlIHRoaXMgZXZlbnQgb2NjdXJyZWRcbiAgICAgKiBAcGFyYW0gdHJhY2tzIFRoZSBzaW1pbGFyIHRyYWNrcyB0aGF0IHdlcmUgZm91bmRcbiAgICAgKiBAcGFyYW0gZG9uZSBEb25lIGNhbGxiYWNrXG4gICAgICovXG4gICAgW0d1aWxkUXVldWVFdmVudC5XaWxsQXV0b1BsYXldOiAocXVldWU6IEd1aWxkUXVldWU8TWV0YT4sIHRyYWNrczogVHJhY2tbXSwgZG9uZTogKHRyYWNrOiBUcmFjayB8IG51bGwpID0+IHZvaWQpID0+IHVua25vd247XG59XG5cbmV4cG9ydCBjbGFzcyBHdWlsZFF1ZXVlPE1ldGEgPSB1bmtub3duPiB7XG4gICAgI3RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAjZGVsZXRlZCA9IGZhbHNlO1xuICAgICNzaHVmZmxlID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBfX2N1cnJlbnQ6IFRyYWNrIHwgbnVsbCA9IG51bGw7XG4gICAgcHVibGljIHRyYWNrczogUXVldWU8VHJhY2s+O1xuICAgIHB1YmxpYyBoaXN0b3J5ID0gbmV3IEd1aWxkUXVldWVIaXN0b3J5PE1ldGE+KHRoaXMpO1xuICAgIHB1YmxpYyBkaXNwYXRjaGVyOiBTdHJlYW1EaXNwYXRjaGVyIHwgbnVsbCA9IG51bGw7XG4gICAgcHVibGljIG5vZGUgPSBuZXcgR3VpbGRRdWV1ZVBsYXllck5vZGU8TWV0YT4odGhpcyk7XG4gICAgcHVibGljIGZpbHRlcnMgPSBuZXcgR3VpbGRRdWV1ZUF1ZGlvRmlsdGVyczxNZXRhPih0aGlzKTtcbiAgICBwdWJsaWMgb25CZWZvcmVDcmVhdGVTdHJlYW06IE9uQmVmb3JlQ3JlYXRlU3RyZWFtSGFuZGxlciA9IGFzeW5jICgpID0+IG51bGw7XG4gICAgcHVibGljIG9uQWZ0ZXJDcmVhdGVTdHJlYW06IE9uQWZ0ZXJDcmVhdGVTdHJlYW1IYW5kbGVyID0gYXN5bmMgKHN0cmVhbSkgPT4gKHtcbiAgICAgICAgc3RyZWFtLFxuICAgICAgICB0eXBlOiBTdHJlYW1UeXBlLlJhd1xuICAgIH0pO1xuICAgIHB1YmxpYyByZXBlYXRNb2RlID0gUXVldWVSZXBlYXRNb2RlLk9GRjtcbiAgICBwdWJsaWMgdGltZW91dHMgPSBuZXcgQ29sbGVjdGlvbjxzdHJpbmcsIE5vZGVKUy5UaW1lb3V0PigpO1xuICAgIHB1YmxpYyBzdGF0cyA9IG5ldyBHdWlsZFF1ZXVlU3RhdGlzdGljczxNZXRhPih0aGlzKTtcbiAgICBwdWJsaWMgdGFza3NRdWV1ZSA9IG5ldyBBc3luY1F1ZXVlKCk7XG4gICAgcHVibGljIHN5bmNlZEx5cmljc1Byb3ZpZGVyID0gbmV3IFN5bmNlZEx5cmljc1Byb3ZpZGVyKHRoaXMpO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBwbGF5ZXI6IFBsYXllciwgcHVibGljIG9wdGlvbnM6IEd1aWxkTm9kZUluaXQ8TWV0YT4pIHtcbiAgICAgICAgdGhpcy50cmFja3MgPSBuZXcgUXVldWU8VHJhY2s+KG9wdGlvbnMucXVldWVTdHJhdGVneSk7XG4gICAgICAgIGlmIChUeXBlVXRpbC5pc0Z1bmN0aW9uKG9wdGlvbnMub25CZWZvcmVDcmVhdGVTdHJlYW0pKSB0aGlzLm9uQmVmb3JlQ3JlYXRlU3RyZWFtID0gb3B0aW9ucy5vbkJlZm9yZUNyZWF0ZVN0cmVhbTtcbiAgICAgICAgaWYgKFR5cGVVdGlsLmlzRnVuY3Rpb24ob3B0aW9ucy5vbkFmdGVyQ3JlYXRlU3RyZWFtKSkgdGhpcy5vbkFmdGVyQ3JlYXRlU3RyZWFtID0gb3B0aW9ucy5vbkFmdGVyQ3JlYXRlU3RyZWFtO1xuICAgICAgICBpZiAoIVR5cGVVdGlsLmlzTnVsbGlzaChvcHRpb25zLnJlcGVhdE1vZGUpKSB0aGlzLnJlcGVhdE1vZGUgPSBvcHRpb25zLnJlcGVhdE1vZGU7XG5cbiAgICAgICAgb3B0aW9ucy5zZWxmRGVhZiA/Pz0gdHJ1ZTtcbiAgICAgICAgb3B0aW9ucy5tYXhTaXplID8/PSBJbmZpbml0eTtcbiAgICAgICAgb3B0aW9ucy5tYXhIaXN0b3J5U2l6ZSA/Pz0gSW5maW5pdHk7XG4gICAgICAgIG9wdGlvbnMucGF1c2VPbkVtcHR5ID8/PSB0cnVlO1xuXG4gICAgICAgIGlmICghVHlwZVV0aWwuaXNOdWxsaXNoKHRoaXMub3B0aW9ucy5iaXF1YWQpICYmICFUeXBlVXRpbC5pc0Jvb2xlYW4odGhpcy5vcHRpb25zLmJpcXVhZCkpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVycy5fbGFzdEZpbHRlcnNDYWNoZS5iaXF1YWQgPSB0aGlzLm9wdGlvbnMuYmlxdWFkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5vcHRpb25zLmVxdWFsaXplcikpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVycy5fbGFzdEZpbHRlcnNDYWNoZS5lcXVhbGl6ZXIgPSB0aGlzLm9wdGlvbnMuZXF1YWxpemVyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5vcHRpb25zLmZpbHRlcmVyKSkge1xuICAgICAgICAgICAgdGhpcy5maWx0ZXJzLl9sYXN0RmlsdGVyc0NhY2hlLmZpbHRlcnMgPSB0aGlzLm9wdGlvbnMuZmlsdGVyZXI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoVHlwZVV0aWwuaXNOdW1iZXIodGhpcy5vcHRpb25zLnJlc2FtcGxlcikpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVycy5fbGFzdEZpbHRlcnNDYWNoZS5zYW1wbGVSYXRlID0gdGhpcy5vcHRpb25zLnJlc2FtcGxlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChUeXBlVXRpbC5pc0FycmF5KHRoaXMub3B0aW9ucy5mZm1wZWdGaWx0ZXJzKSkge1xuICAgICAgICAgICAgdGhpcy5maWx0ZXJzLmZmbXBlZy5zZXREZWZhdWx0cyh0aGlzLm9wdGlvbnMuZmZtcGVnRmlsdGVycyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIVR5cGVVdGlsLmlzTnVtYmVyKG9wdGlvbnMubWF4U2l6ZSkpIHtcbiAgICAgICAgICAgIHRocm93IEV4Y2VwdGlvbnMuRVJSX0lOVkFMSURfQVJHX1RZUEUoJ1tHdWlsZE5vZGVJbml0Lm1heFNpemVdJywgJ251bWJlcicsIHR5cGVvZiBvcHRpb25zLm1heFNpemUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFUeXBlVXRpbC5pc051bWJlcihvcHRpb25zLm1heEhpc3RvcnlTaXplKSkge1xuICAgICAgICAgICAgdGhyb3cgRXhjZXB0aW9ucy5FUlJfSU5WQUxJRF9BUkdfVFlQRSgnW0d1aWxkTm9kZUluaXQubWF4SGlzdG9yeVNpemVdJywgJ251bWJlcicsIHR5cGVvZiBvcHRpb25zLm1heEhpc3RvcnlTaXplKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLm1heFNpemUgPCAxKSBvcHRpb25zLm1heFNpemUgPSBJbmZpbml0eTtcbiAgICAgICAgaWYgKG9wdGlvbnMubWF4SGlzdG9yeVNpemUgPCAxKSBvcHRpb25zLm1heEhpc3RvcnlTaXplID0gSW5maW5pdHk7XG5cbiAgICAgICAgaWYgKHRoaXMuaGFzRGVidWdnZXIpIHRoaXMuZGVidWcoYEd1aWxkUXVldWUgaW5pdGlhbGl6ZWQgZm9yIGd1aWxkICR7dGhpcy5vcHRpb25zLmd1aWxkLm5hbWV9IChJRDogJHt0aGlzLm9wdGlvbnMuZ3VpbGQuaWR9KWApO1xuICAgICAgICB0aGlzLmVtaXQoR3VpbGRRdWV1ZUV2ZW50LnF1ZXVlQ3JlYXRlLCB0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc3RpbWF0ZWQgZHVyYXRpb24gb2YgdGhpcyBxdWV1ZSBpbiBtc1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgZXN0aW1hdGVkRHVyYXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYWNrcy5zdG9yZS5yZWR1Y2UoKGEsIGMpID0+IGEgKyBjLmR1cmF0aW9uTVMsIDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvcm1hdHRlZCBkdXJhdGlvbiBvZiB0aGlzIHF1ZXVlXG4gICAgICovXG4gICAgcHVibGljIGdldCBkdXJhdGlvbkZvcm1hdHRlZCgpIHtcbiAgICAgICAgcmV0dXJuIFV0aWwuYnVpbGRUaW1lQ29kZShVdGlsLnBhcnNlTVModGhpcy5lc3RpbWF0ZWREdXJhdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSB2b2ljZSByZWNlaXZlciBmb3IgdGhpcyBxdWV1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgdm9pY2VSZWNlaXZlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2hlcj8ucmVjZWl2ZXIgPz8gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc3luYyBseXJpY3MgcHJvdmlkZXIgZm9yIHRoaXMgcXVldWUuXG4gICAgICogQGV4YW1wbGUgY29uc3QgbHlyaWNzID0gYXdhaXQgcGxheWVyLmx5cmljcy5zZWFyY2goeyBxOiAnQWxhbiBXYWxrZXIgRmFkZWQnIH0pO1xuICAgICAqIGNvbnN0IHN5bmNlZEx5cmljcyA9IHF1ZXVlLnN5bmNlZEx5cmljcyhseXJpY3NbMF0pO1xuICAgICAqIGNvbnNvbGUubG9nKHN5bmNlZEx5cmljcy5hdCgxMF8wMDApKTtcbiAgICAgKiAvLyBzdWJzY3JpYmUgdG8gbHlyaWNzIGNoYW5nZVxuICAgICAqIGNvbnN0IHVuc3Vic2NyaWJlID0gc3luY2VkTHlyaWNzLm9uQ2hhbmdlKChseXJpY3MsIHRpbWVzdGFtcCkgPT4ge1xuICAgICAqICAgIGNvbnNvbGUubG9nKGx5cmljcywgdGltZXN0YW1wKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyB1bnN1YnNjcmliZSBmcm9tIGx5cmljcyBjaGFuZ2VcbiAgICAgKiB1bnN1YnNjcmliZSgpOyAvLyBvclxuICAgICAqIHN5bmNlZEx5cmljcy51bnN1YnNjcmliZSgpO1xuICAgICAqL1xuICAgIHB1YmxpYyBzeW5jZWRMeXJpY3MobHlyaWNzOiBMcmNHZXRSZXN1bHQgfCBMcmNTZWFyY2hSZXN1bHQpIHtcbiAgICAgICAgdGhpcy5zeW5jZWRMeXJpY3NQcm92aWRlci5sb2FkKGx5cmljcz8uc3luY2VkTHlyaWNzID8/ICcnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3luY2VkTHlyaWNzUHJvdmlkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV3JpdGUgYSBkZWJ1ZyBtZXNzYWdlIHRvIHRoaXMgcXVldWVcbiAgICAgKiBAcGFyYW0gbSBUaGUgbWVzc2FnZSB0byB3cml0ZVxuICAgICAqL1xuICAgIHB1YmxpYyBkZWJ1ZyhtOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5lbWl0KEd1aWxkUXVldWVFdmVudC5kZWJ1ZywgdGhpcywgbSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG1ldGFkYXRhIG9mIHRoaXMgcXVldWVcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IG1ldGFkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLm1ldGFkYXRhITtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IG1ldGFkYXRhKG06IE1ldGEpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLm1ldGFkYXRhID0gbTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgbWV0YWRhdGEgZm9yIHRoaXMgcXVldWVcbiAgICAgKiBAcGFyYW0gbSBNZXRhZGF0YSB0byBzZXRcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0TWV0YWRhdGEobTogTWV0YSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMubWV0YWRhdGEgPSBtO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBjdXJyZW50IHRyYWNrIG9mIHRoaXMgcXVldWVcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGN1cnJlbnRUcmFjaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2hlcj8uYXVkaW9SZXNvdXJjZT8ubWV0YWRhdGEgfHwgdGhpcy5fX2N1cnJlbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGlmIHRoaXMgcXVldWUgd2FzIGRlbGV0ZWQgcHJldmlvdXNseVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgZGVsZXRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2RlbGV0ZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHZvaWNlIGNoYW5uZWwgb2YgdGhpcyBxdWV1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgY2hhbm5lbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2hlcj8uY2hhbm5lbCB8fCBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgY2hhbm5lbChjOiBWb2ljZUJhc2VkQ2hhbm5lbCB8IG51bGwpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlzcGF0Y2hlcikge1xuICAgICAgICAgICAgaWYgKGMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoZXIuY2hhbm5lbCA9IGM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdm9pY2UgY29ubmVjdGlvbiBvZiB0aGlzIHF1ZXVlXG4gICAgICovXG4gICAgcHVibGljIGdldCBjb25uZWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXNwYXRjaGVyPy52b2ljZUNvbm5lY3Rpb24gfHwgbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZ3VpbGQgdGhpcyBxdWV1ZSBiZWxvbmdzIHRvXG4gICAgICovXG4gICAgcHVibGljIGdldCBndWlsZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5ndWlsZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaWQgb2YgdGhpcyBxdWV1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmd1aWxkLmlkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0cmFuc2l0aW9uIG1vZGUgZm9yIHRoaXMgcXVldWVcbiAgICAgKiBAcGFyYW0gc3RhdGUgVGhlIHN0YXRlIHRvIHNldFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRUcmFuc2l0aW9uaW5nKHN0YXRlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuI3RyYW5zaXRpb25pbmcgPSBzdGF0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpZiB0aGlzIHF1ZXVlIGlzIGN1cnJlbnRseSB1bmRlciB0cmFuc2l0aW9uIG1vZGVcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNUcmFuc2l0aW9uaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jdHJhbnNpdGlvbmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgcmVwZWF0IG1vZGUgZm9yIHRoaXMgcXVldWVcbiAgICAgKiBAcGFyYW0gbW9kZSBUaGUgcmVwZWF0IG1vZGUgdG8gYXBwbHlcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0UmVwZWF0TW9kZShtb2RlOiBRdWV1ZVJlcGVhdE1vZGUpIHtcbiAgICAgICAgdGhpcy5yZXBlYXRNb2RlID0gbW9kZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYXggc2l6ZSBvZiB0aGlzIHF1ZXVlXG4gICAgICovXG4gICAgcHVibGljIGdldCBtYXhTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLm1heFNpemUgPz8gSW5maW5pdHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWF4IHNpemUgb2YgdGhpcyBxdWV1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNYXhTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXhTaXplO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNpemUgb2YgdGhlIHF1ZXVlXG4gICAgICovXG4gICAgcHVibGljIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFja3Muc2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2l6ZSBvZiB0aGlzIHF1ZXVlXG4gICAgICovXG4gICAgcHVibGljIGdldFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWF4IGhpc3Rvcnkgc2l6ZSBvZiB0aGlzIHF1ZXVlXG4gICAgICovXG4gICAgcHVibGljIGdldCBtYXhIaXN0b3J5U2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5tYXhIaXN0b3J5U2l6ZSA/PyBJbmZpbml0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYXggaGlzdG9yeSBzaXplIG9mIHRoaXMgcXVldWVcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TWF4SGlzdG9yeVNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heEhpc3RvcnlTaXplO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCBtYXggaGlzdG9yeSBzaXplIGZvciB0aGlzIHF1ZXVlXG4gICAgICogQHBhcmFtIHNpemUgVGhlIHNpemUgdG8gc2V0XG4gICAgICovXG4gICAgcHVibGljIHNldE1heEhpc3RvcnlTaXplKHNpemU6IG51bWJlcikge1xuICAgICAgICBpZiAoIVR5cGVVdGlsLmlzTnVtYmVyKHNpemUpKSB7XG4gICAgICAgICAgICB0aHJvdyBFeGNlcHRpb25zLkVSUl9JTlZBTElEX0FSR19UWVBFKCdzaXplJywgJ251bWJlcicsIHR5cGVvZiBzaXplKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaXplIDwgMSkgc2l6ZSA9IEluZmluaXR5O1xuXG4gICAgICAgIHRoaXMub3B0aW9ucy5tYXhIaXN0b3J5U2l6ZSA9IHNpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IG1heCBzaXplIGZvciB0aGlzIHF1ZXVlXG4gICAgICogQHBhcmFtIHNpemUgVGhlIHNpemUgdG8gc2V0XG4gICAgICovXG4gICAgcHVibGljIHNldE1heFNpemUoc2l6ZTogbnVtYmVyKSB7XG4gICAgICAgIGlmICghVHlwZVV0aWwuaXNOdW1iZXIoc2l6ZSkpIHtcbiAgICAgICAgICAgIHRocm93IEV4Y2VwdGlvbnMuRVJSX0lOVkFMSURfQVJHX1RZUEUoJ3NpemUnLCAnbnVtYmVyJywgdHlwZW9mIHNpemUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNpemUgPCAxKSBzaXplID0gSW5maW5pdHk7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zLm1heFNpemUgPSBzaXplO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFyIHRoaXMgcXVldWVcbiAgICAgKi9cbiAgICBwdWJsaWMgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMudHJhY2tzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuaGlzdG9yeS5jbGVhcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoaXMgcXVldWUgaGFzIG5vIHRyYWNrcyBsZWZ0IGluIGl0XG4gICAgICovXG4gICAgcHVibGljIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYWNrcy5zaXplIDwgMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGlzIHF1ZXVlIGlzIGZ1bGxcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNGdWxsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFja3Muc2l6ZSA+PSB0aGlzLm1heFNpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHF1ZXVlIGNhcGFjaXR5XG4gICAgICovXG4gICAgcHVibGljIGdldENhcGFjaXR5KCkge1xuICAgICAgICBpZiAodGhpcy5pc0Z1bGwoKSkgcmV0dXJuIDA7XG4gICAgICAgIGNvbnN0IGNhcCA9IHRoaXMubWF4U2l6ZSAtIHRoaXMuc2l6ZTtcbiAgICAgICAgcmV0dXJuIGNhcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGlzIHF1ZXVlIGN1cnJlbnRseSBob2xkcyBhY3RpdmUgYXVkaW8gcmVzb3VyY2VcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNQbGF5aW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXNwYXRjaGVyPy5hdWRpb1Jlc291cmNlICE9IG51bGwgJiYgIXRoaXMuZGlzcGF0Y2hlci5hdWRpb1Jlc291cmNlLmVuZGVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCB0cmFjayB0byB0aGUgcXVldWUuIFRoaXMgd2lsbCBlbWl0IGBhdWRpb1RyYWNrc0FkZGAgd2hlbiBtdWx0aXBsZSB0cmFja3MgYXJlIGFkZGVkLCBvdGhlcndpc2UgYGF1ZGlvVHJhY2tBZGRgLlxuICAgICAqIEBwYXJhbSB0cmFjayBUcmFjayBvciBwbGF5bGlzdCBvciBhcnJheSBvZiB0cmFja3MgdG8gYWRkXG4gICAgICovXG4gICAgcHVibGljIGFkZFRyYWNrKHRyYWNrOiBUcmFjayB8IFRyYWNrW10gfCBQbGF5bGlzdCkge1xuICAgICAgICBjb25zdCB0b0FkZCA9IHRyYWNrIGluc3RhbmNlb2YgUGxheWxpc3QgPyB0cmFjay50cmFja3MgOiB0cmFjaztcbiAgICAgICAgY29uc3QgaXNNdWx0aSA9IEFycmF5LmlzQXJyYXkodG9BZGQpO1xuXG4gICAgICAgIFZBTElEQVRFX1FVRVVFX0NBUCh0aGlzLCB0b0FkZCk7XG5cbiAgICAgICAgdGhpcy50cmFja3MuYWRkKHRvQWRkKTtcblxuICAgICAgICBpZiAoaXNNdWx0aSkge1xuICAgICAgICAgICAgdGhpcy5lbWl0KEd1aWxkUXVldWVFdmVudC5hdWRpb1RyYWNrc0FkZCwgdGhpcywgdG9BZGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbWl0KEd1aWxkUXVldWVFdmVudC5hdWRpb1RyYWNrQWRkLCB0aGlzLCB0b0FkZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSB0cmFjayBmcm9tIHF1ZXVlXG4gICAgICogQHBhcmFtIHRyYWNrIFRoZSB0cmFjayB0byByZW1vdmVcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVtb3ZlVHJhY2sodHJhY2s6IFRyYWNrUmVzb2x2YWJsZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub2RlLnJlbW92ZSh0cmFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0cyB0aGUgdHJhY2sgdG8gdGhlIGdpdmVuIGluZGV4XG4gICAgICogQHBhcmFtIHRyYWNrIFRoZSB0cmFjayB0byBpbnNlcnRcbiAgICAgKiBAcGFyYW0gaW5kZXggVGhlIGluZGV4IHRvIGluc2VydCB0aGUgdHJhY2sgYXQgKGRlZmF1bHRzIHRvIDApXG4gICAgICovXG4gICAgcHVibGljIGluc2VydFRyYWNrKHRyYWNrOiBUcmFjaywgaW5kZXggPSAwKTogdm9pZCB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGUuaW5zZXJ0KHRyYWNrLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTW92ZXMgYSB0cmFjayBpbiB0aGUgcXVldWVcbiAgICAgKiBAcGFyYW0gZnJvbSBUaGUgdHJhY2sgdG8gbW92ZVxuICAgICAqIEBwYXJhbSB0byBUaGUgcG9zaXRpb24gdG8gbW92ZSB0b1xuICAgICAqL1xuICAgIHB1YmxpYyBtb3ZlVHJhY2sodHJhY2s6IFRyYWNrUmVzb2x2YWJsZSwgaW5kZXggPSAwKTogdm9pZCB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGUubW92ZSh0cmFjaywgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcHkgYSB0cmFjayBpbiB0aGUgcXVldWVcbiAgICAgKiBAcGFyYW0gZnJvbSBUaGUgdHJhY2sgdG8gY2xvbmVcbiAgICAgKiBAcGFyYW0gdG8gVGhlIHBvc2l0aW9uIHRvIGNsb25lIGF0XG4gICAgICovXG4gICAgcHVibGljIGNvcHlUcmFjayh0cmFjazogVHJhY2tSZXNvbHZhYmxlLCBpbmRleCA9IDApOiB2b2lkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZS5jb3B5KHRyYWNrLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3dhcCB0d28gdHJhY2tzIGluIHRoZSBxdWV1ZVxuICAgICAqIEBwYXJhbSBzcmMgVGhlIGZpcnN0IHRyYWNrIHRvIHN3YXBcbiAgICAgKiBAcGFyYW0gZGVzdCBUaGUgc2Vjb25kIHRyYWNrIHRvIHN3YXBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3dhcFRyYWNrcyhzcmM6IFRyYWNrUmVzb2x2YWJsZSwgZGVzdDogVHJhY2tSZXNvbHZhYmxlKTogdm9pZCB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGUuc3dhcChzcmMsIGRlc3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBzdHJlYW0gZGlzcGF0Y2hlciBmcm9tIHRoZSBnaXZlbiBjb25uZWN0aW9uXG4gICAgICogQHBhcmFtIGNvbm5lY3Rpb24gVGhlIGNvbm5lY3Rpb24gdG8gdXNlXG4gICAgICovXG4gICAgcHVibGljIGNyZWF0ZURpc3BhdGNoZXIoY29ubmVjdGlvbjogVm9pY2VDb25uZWN0aW9uLCBvcHRpb25zOiBQaWNrPFZvaWNlQ29ubmVjdENvbmZpZywgJ2F1ZGlvUGxheWVyJyB8ICd0aW1lb3V0Jz4gPSB7fSkge1xuICAgICAgICBpZiAoY29ubmVjdGlvbi5zdGF0ZS5zdGF0dXMgPT09IFZvaWNlQ29ubmVjdGlvblN0YXR1cy5EZXN0cm95ZWQpIHtcbiAgICAgICAgICAgIHRocm93IEV4Y2VwdGlvbnMuRVJSX1ZPSUNFX0NPTk5FQ1RJT05fREVTVFJPWUVEKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjaGFubmVsID0gdGhpcy5wbGF5ZXIuY2xpZW50LmNoYW5uZWxzLmNhY2hlLmdldChjb25uZWN0aW9uLmpvaW5Db25maWcuY2hhbm5lbElkISk7XG4gICAgICAgIGlmICghY2hhbm5lbCkgdGhyb3cgRXhjZXB0aW9ucy5FUlJfTk9fVk9JQ0VfQ0hBTk5FTCgpO1xuICAgICAgICBpZiAoIWNoYW5uZWwuaXNWb2ljZUJhc2VkKCkpIHRocm93IEV4Y2VwdGlvbnMuRVJSX0lOVkFMSURfQVJHX1RZUEUoJ2NoYW5uZWwnLCBgVm9pY2VCYXNlZENoYW5uZWwgKHR5cGUgJHtDaGFubmVsVHlwZS5HdWlsZFZvaWNlfS8ke0NoYW5uZWxUeXBlLkd1aWxkU3RhZ2VWb2ljZX0pYCwgU3RyaW5nKGNoYW5uZWw/LnR5cGUpKTtcblxuICAgICAgICBpZiAodGhpcy5kaXNwYXRjaGVyKSB7XG4gICAgICAgICAgICB0aGlzLiNyZW1vdmVMaXN0ZW5lcnModGhpcy5kaXNwYXRjaGVyKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hlci5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoZXIgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyID0gbmV3IFN0cmVhbURpc3BhdGNoZXIoY29ubmVjdGlvbiwgY2hhbm5lbCwgdGhpcywgb3B0aW9ucy50aW1lb3V0ID8/IHRoaXMub3B0aW9ucy5jb25uZWN0aW9uVGltZW91dCwgb3B0aW9ucy5hdWRpb1BsYXllcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29ubmVjdCB0byBhIHZvaWNlIGNoYW5uZWxcbiAgICAgKiBAcGFyYW0gY2hhbm5lbFJlc29sdmFibGUgVGhlIHZvaWNlIGNoYW5uZWwgdG8gY29ubmVjdCB0b1xuICAgICAqIEBwYXJhbSBvcHRpb25zIEpvaW4gY29uZmlnXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGNvbm5lY3QoY2hhbm5lbFJlc29sdmFibGU6IEd1aWxkVm9pY2VDaGFubmVsUmVzb2x2YWJsZSwgb3B0aW9uczogVm9pY2VDb25uZWN0Q29uZmlnID0ge30pIHtcbiAgICAgICAgY29uc3QgY2hhbm5lbCA9IHRoaXMucGxheWVyLmNsaWVudC5jaGFubmVscy5yZXNvbHZlKGNoYW5uZWxSZXNvbHZhYmxlKTtcbiAgICAgICAgaWYgKCFjaGFubmVsIHx8ICFjaGFubmVsLmlzVm9pY2VCYXNlZCgpKSB7XG4gICAgICAgICAgICB0aHJvdyBFeGNlcHRpb25zLkVSUl9JTlZBTElEX0FSR19UWVBFKCdjaGFubmVsJywgYFZvaWNlQmFzZWRDaGFubmVsICh0eXBlICR7Q2hhbm5lbFR5cGUuR3VpbGRWb2ljZX0vJHtDaGFubmVsVHlwZS5HdWlsZFN0YWdlVm9pY2V9KWAsIFN0cmluZyhjaGFubmVsPy50eXBlKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5oYXNEZWJ1Z2dlcikgdGhpcy5kZWJ1ZyhgQ29ubmVjdGluZyB0byAke2NoYW5uZWwudHlwZSA9PT0gQ2hhbm5lbFR5cGUuR3VpbGRTdGFnZVZvaWNlID8gJ3N0YWdlJyA6ICd2b2ljZSd9IGNoYW5uZWwgJHtjaGFubmVsLm5hbWV9IChJRDogJHtjaGFubmVsLmlkfSlgKTtcblxuICAgICAgICBpZiAodGhpcy5kaXNwYXRjaGVyICYmIGNoYW5uZWwuaWQgIT09IHRoaXMuZGlzcGF0Y2hlci5jaGFubmVsLmlkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXNEZWJ1Z2dlcikgdGhpcy5kZWJ1ZygnRGVzdHJveWluZyBvbGQgY29ubmVjdGlvbicpO1xuICAgICAgICAgICAgdGhpcy4jcmVtb3ZlTGlzdGVuZXJzKHRoaXMuZGlzcGF0Y2hlcik7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoZXIuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaGVyID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlciA9IGF3YWl0IHRoaXMucGxheWVyLnZvaWNlVXRpbHMuY29ubmVjdChjaGFubmVsLCB7XG4gICAgICAgICAgICBkZWFmOiBvcHRpb25zLmRlYWYgPz8gdGhpcy5vcHRpb25zLnNlbGZEZWFmID8/IHRydWUsXG4gICAgICAgICAgICBtYXhUaW1lOiBvcHRpb25zPy50aW1lb3V0ID8/IHRoaXMub3B0aW9ucy5jb25uZWN0aW9uVGltZW91dCA/PyAxMjBfMDAwLFxuICAgICAgICAgICAgcXVldWU6IHRoaXMsXG4gICAgICAgICAgICBhdWRpb1BsYXllcjogb3B0aW9ucz8uYXVkaW9QbGF5ZXIsXG4gICAgICAgICAgICBncm91cDogb3B0aW9ucy5ncm91cCA/PyB0aGlzLnBsYXllci5jbGllbnQudXNlcj8uaWRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5lbWl0KEd1aWxkUXVldWVFdmVudC5jb25uZWN0aW9uLCB0aGlzKTtcblxuICAgICAgICBpZiAodGhpcy5jaGFubmVsIS50eXBlID09PSBDaGFubmVsVHlwZS5HdWlsZFN0YWdlVm9pY2UpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2hhbm5lbCEuZ3VpbGQubWVtYmVycy5tZSEudm9pY2Uuc2V0U3VwcHJlc3NlZChmYWxzZSkuY2F0Y2goYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNoYW5uZWwhLmd1aWxkLm1lbWJlcnMubWUhLnZvaWNlLnNldFJlcXVlc3RUb1NwZWFrKHRydWUpLmNhdGNoKFV0aWwubm9vcCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuI2F0dGFjaExpc3RlbmVycyh0aGlzLmRpc3BhdGNoZXIpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZSBzaHVmZmxlIG1vZGUgZm9yIHRoaXMgcXVldWVcbiAgICAgKiBAcGFyYW0gZHluYW1pYyBXaGV0aGVyIHRvIHNodWZmbGUgdGhlIHF1ZXVlIGR5bmFtaWNhbGx5LiBEZWZhdWx0cyB0byBgdHJ1ZWAuXG4gICAgICogRHluYW1pYyBzaHVmZmxpbmcgd2lsbCBzaHVmZmxlIHRoZSBxdWV1ZSB3aGVuIHRoZSBjdXJyZW50IHRyYWNrIGVuZHMsIHdpdGhvdXQgbXV0YXRpbmcgdGhlIHF1ZXVlLlxuICAgICAqIElmIHNldCB0byBgZmFsc2VgLCB0aGUgcXVldWUgd2lsbCBiZSBzaHVmZmxlZCBpbW1lZGlhdGVseSBpbi1wbGFjZSwgd2hpY2ggY2Fubm90IGJlIHVuZG9uZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZW5hYmxlU2h1ZmZsZShkeW5hbWljID0gdHJ1ZSkge1xuICAgICAgICBpZiAoIWR5bmFtaWMpIHtcbiAgICAgICAgICAgIHRoaXMudHJhY2tzLnNodWZmbGUoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4jc2h1ZmZsZSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERpc2FibGUgc2h1ZmZsZSBtb2RlIGZvciB0aGlzIHF1ZXVlLlxuICAgICAqL1xuICAgIHB1YmxpYyBkaXNhYmxlU2h1ZmZsZSgpIHtcbiAgICAgICAgdGhpcy4jc2h1ZmZsZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGUgc2h1ZmZsZSBtb2RlIGZvciB0aGlzIHF1ZXVlLlxuICAgICAqIEBwYXJhbSBkeW5hbWljIFdoZXRoZXIgdG8gc2h1ZmZsZSB0aGUgcXVldWUgZHluYW1pY2FsbHkuIERlZmF1bHRzIHRvIGB0cnVlYC5cbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIHNodWZmbGUgaXMgZW5hYmxlZCBvciBkaXNhYmxlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgdG9nZ2xlU2h1ZmZsZShkeW5hbWljID0gdHJ1ZSkge1xuICAgICAgICBpZiAoZHluYW1pYykge1xuICAgICAgICAgICAgdGhpcy4jc2h1ZmZsZSA9ICF0aGlzLiNzaHVmZmxlO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuI3NodWZmbGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRyYWNrcy5zaHVmZmxlKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgc2h1ZmZsZSBtb2RlIGlzIGVuYWJsZWQgZm9yIHRoaXMgcXVldWUuXG4gICAgICovXG4gICAgcHVibGljIGdldCBpc1NodWZmbGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3NodWZmbGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHZvaWNlIGNvbm5lY3Rpb24gbGF0ZW5jeSBvZiB0aGlzIHF1ZXVlXG4gICAgICovXG4gICAgcHVibGljIGdldCBwaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uPy5waW5nLnVkcCA/PyAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgdGhpcyBxdWV1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBkZWxldGUoKSB7XG4gICAgICAgIGlmICh0aGlzLnBsYXllci5ub2Rlcy5kZWxldGUodGhpcy5pZCkpIHtcbiAgICAgICAgICAgIHRoaXMuI2RlbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5wbGF5ZXIuZXZlbnRzLmVtaXQoR3VpbGRRdWV1ZUV2ZW50LnF1ZXVlRGVsZXRlLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMubm9kZS50YXNrc1F1ZXVlLmNhbmNlbEFsbCgpO1xuICAgICAgICAgICAgdGhpcy50YXNrc1F1ZXVlLmNhbmNlbEFsbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2aXZlcyB0aGlzIHF1ZXVlXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBwdWJsaWMgcmV2aXZlKCkge1xuICAgICAgICBpZiAoIXRoaXMuZGVsZXRlZCB8fCB0aGlzLnBsYXllci5ub2Rlcy5oYXModGhpcy5pZCkpIHJldHVybjtcbiAgICAgICAgdGhpcy4jZGVsZXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcoZmFsc2UpO1xuICAgICAgICB0aGlzLnBsYXllci5ub2Rlcy5jYWNoZS5zZXQodGhpcy5pZCwgdGhpcyk7XG4gICAgICAgIHRoaXMucGxheWVyLmV2ZW50cy5lbWl0KEd1aWxkUXVldWVFdmVudC5xdWV1ZUNyZWF0ZSwgdGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHNlbGYgZGVhZlxuICAgICAqIEBwYXJhbSBtb2RlIE9uL09mZiBzdGF0ZVxuICAgICAqIEBwYXJhbSByZWFzb24gUmVhc29uXG4gICAgICovXG4gICAgcHVibGljIHNldFNlbGZEZWFmKG1vZGU/OiBib29sZWFuLCByZWFzb24/OiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3VpbGQubWVtYmVycy5tZSEudm9pY2Uuc2V0RGVhZihtb2RlLCByZWFzb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCBzZWxmIG11dGVcbiAgICAgKiBAcGFyYW0gbW9kZSBPbi9PZmYgc3RhdGVcbiAgICAgKiBAcGFyYW0gcmVhc29uIFJlYXNvblxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRTZWxmTXV0ZShtb2RlPzogYm9vbGVhbiwgcmVhc29uPzogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmd1aWxkLm1lbWJlcnMubWUhLnZvaWNlLnNldE11dGUobW9kZSwgcmVhc29uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQbGF5IGEgdHJhY2sgaW4gdGhpcyBxdWV1ZVxuICAgICAqIEBwYXJhbSB0cmFjayBUaGUgdHJhY2sgdG8gYmUgcGxheWVkXG4gICAgICogQHBhcmFtIG9wdGlvbnMgUGxheWVyIG5vZGUgaW5pdGlhbGl6YXRpb24gb3B0aW9uc1xuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBwbGF5KHRyYWNrOiBUcmFja0xpa2UsIG9wdGlvbnM/OiBQbGF5ZXJOb2RlSW5pdGlhbGl6ZXJPcHRpb25zPE1ldGE+KSB7XG4gICAgICAgIGlmICghdGhpcy5jaGFubmVsKSB0aHJvdyBFeGNlcHRpb25zLkVSUl9OT19WT0lDRV9DT05ORUNUSU9OKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucGxheWVyLnBsYXkodGhpcy5jaGFubmVsLCB0cmFjaywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW1pdCBhbiBldmVudCBvbiB0aGlzIHF1ZXVlXG4gICAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byBlbWl0XG4gICAgICogQHBhcmFtIGFyZ3MgVGhlIGFyZ3MgZm9yIHRoZSBldmVudFxuICAgICAqL1xuICAgIHB1YmxpYyBlbWl0PEsgZXh0ZW5kcyBrZXlvZiBHdWlsZFF1ZXVlRXZlbnRzPE1ldGE+PihldmVudDogSywgLi4uYXJnczogUGFyYW1ldGVyczxHdWlsZFF1ZXVlRXZlbnRzPE1ldGE+W0tdPik6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodGhpcy5kZWxldGVkKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzLnBsYXllci5ldmVudHMuZW1pdChldmVudCwgLi4uYXJncyk7XG4gICAgfVxuXG4gICAgI2F0dGFjaExpc3RlbmVycyhkaXNwYXRjaGVyOiBTdHJlYW1EaXNwYXRjaGVyKSB7XG4gICAgICAgIGRpc3BhdGNoZXIub24oJ2Vycm9yJywgKGUpID0+IHRoaXMuZW1pdChHdWlsZFF1ZXVlRXZlbnQuZXJyb3IsIHRoaXMsIGUpKTtcbiAgICAgICAgZGlzcGF0Y2hlci5vbignZGVidWcnLCAobSkgPT4gdGhpcy5oYXNEZWJ1Z2dlciAmJiB0aGlzLmVtaXQoR3VpbGRRdWV1ZUV2ZW50LmRlYnVnLCB0aGlzLCBtKSk7XG4gICAgICAgIGRpc3BhdGNoZXIub24oJ2ZpbmlzaCcsIChyKSA9PiB0aGlzLiNwZXJmb3JtRmluaXNoKHIpKTtcbiAgICAgICAgZGlzcGF0Y2hlci5vbignc3RhcnQnLCAocikgPT4gdGhpcy4jcGVyZm9ybVN0YXJ0KHIpKTtcbiAgICAgICAgZGlzcGF0Y2hlci5vbignZGVzdHJveWVkJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4jcmVtb3ZlTGlzdGVuZXJzKGRpc3BhdGNoZXIpO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaGVyID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGRpc3BhdGNoZXIub24oJ2RzcCcsIChmKSA9PiB7XG4gICAgICAgICAgICBpZiAoIU9iamVjdC5pcyh0aGlzLmZpbHRlcnMuX2xhc3RGaWx0ZXJzQ2FjaGUuZmlsdGVycywgZikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoR3VpbGRRdWV1ZUV2ZW50LmRzcFVwZGF0ZSwgdGhpcywgdGhpcy5maWx0ZXJzLl9sYXN0RmlsdGVyc0NhY2hlLmZpbHRlcnMsIGYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5maWx0ZXJzLl9sYXN0RmlsdGVyc0NhY2hlLmZpbHRlcnMgPSBmO1xuICAgICAgICB9KTtcbiAgICAgICAgZGlzcGF0Y2hlci5vbignYmlxdWFkJywgKGYpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcnMuX2xhc3RGaWx0ZXJzQ2FjaGUuYmlxdWFkICE9PSBmKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KEd1aWxkUXVldWVFdmVudC5iaXF1YWRGaWx0ZXJzVXBkYXRlLCB0aGlzLCB0aGlzLmZpbHRlcnMuX2xhc3RGaWx0ZXJzQ2FjaGUuYmlxdWFkLCBmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZmlsdGVycy5fbGFzdEZpbHRlcnNDYWNoZS5iaXF1YWQgPSBmO1xuICAgICAgICB9KTtcbiAgICAgICAgZGlzcGF0Y2hlci5vbignZXFCYW5kcycsIChmKSA9PiB7XG4gICAgICAgICAgICBpZiAoIU9iamVjdC5pcyhmLCB0aGlzLmZpbHRlcnMuX2xhc3RGaWx0ZXJzQ2FjaGUuZXF1YWxpemVyKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChHdWlsZFF1ZXVlRXZlbnQuZXF1YWxpemVyVXBkYXRlLCB0aGlzLCB0aGlzLmZpbHRlcnMuX2xhc3RGaWx0ZXJzQ2FjaGUuZXF1YWxpemVyLCBmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZmlsdGVycy5fbGFzdEZpbHRlcnNDYWNoZS5lcXVhbGl6ZXIgPSBmO1xuICAgICAgICB9KTtcbiAgICAgICAgZGlzcGF0Y2hlci5vbigndm9sdW1lJywgKGYpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcnMuX2xhc3RGaWx0ZXJzQ2FjaGUudm9sdW1lICE9PSBmKSB0aGlzLmVtaXQoR3VpbGRRdWV1ZUV2ZW50LnZvbHVtZUNoYW5nZSwgdGhpcywgdGhpcy5maWx0ZXJzLl9sYXN0RmlsdGVyc0NhY2hlLnZvbHVtZSwgZik7XG4gICAgICAgICAgICB0aGlzLmZpbHRlcnMuX2xhc3RGaWx0ZXJzQ2FjaGUudm9sdW1lID0gZjtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBoYXNEZWJ1Z2dlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGxheWVyLmV2ZW50cy5oYXNEZWJ1Z2dlcjtcbiAgICB9XG5cbiAgICAjcmVtb3ZlTGlzdGVuZXJzPFQgZXh0ZW5kcyB7IHJlbW92ZUFsbExpc3RlbmVyczogKCkgPT4gdW5rbm93biB9Pih0YXJnZXQ6IFQpIHtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgIH1cblxuICAgICNwZXJmb3JtU3RhcnQocmVzb3VyY2U/OiBBdWRpb1Jlc291cmNlPFRyYWNrPikge1xuICAgICAgICBjb25zdCB0cmFjayA9IHJlc291cmNlPy5tZXRhZGF0YSB8fCB0aGlzLmN1cnJlbnRUcmFjaztcbiAgICAgICAgY29uc3QgcmVhc29uID0gdGhpcy5pc1RyYW5zaXRpb25pbmcoKSA/ICdmaWx0ZXJzJyA6ICdub3JtYWwnO1xuXG4gICAgICAgIGlmICh0aGlzLmhhc0RlYnVnZ2VyKVxuICAgICAgICAgICAgdGhpcy5kZWJ1ZyhcbiAgICAgICAgICAgICAgICBgUGxheWVyIHRyaWdnZXJlZCBmb3IgVHJhY2sgJHtKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0cmFjaz8udGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIHJlYXNvblxuICAgICAgICAgICAgICAgIH0pfWBcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5lbWl0KEd1aWxkUXVldWVFdmVudC5wbGF5ZXJUcmlnZ2VyLCB0aGlzLCB0cmFjayEsIHJlYXNvbik7XG4gICAgICAgIGlmICh0cmFjayAmJiAhdGhpcy5pc1RyYW5zaXRpb25pbmcoKSkgdGhpcy5lbWl0KEd1aWxkUXVldWVFdmVudC5wbGF5ZXJTdGFydCwgdGhpcywgdHJhY2spO1xuICAgICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcoZmFsc2UpO1xuICAgIH1cblxuICAgICNnZXROZXh0VHJhY2soKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1NodWZmbGluZykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhY2tzLmRpc3BhdGNoKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdG9yZSA9IHRoaXMudHJhY2tzLnN0b3JlO1xuXG4gICAgICAgIGlmICghc3RvcmUubGVuZ3RoKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgdHJhY2sgPSBVdGlsLnJhbmRvbUNob2ljZShzdG9yZSk7XG5cbiAgICAgICAgdGhpcy50cmFja3MucmVtb3ZlT25lKCh0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdC5pZCA9PT0gdHJhY2suaWQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0cmFjaztcbiAgICB9XG5cbiAgICAjcGVyZm9ybUZpbmlzaChyZXNvdXJjZT86IEF1ZGlvUmVzb3VyY2U8VHJhY2s+KSB7XG4gICAgICAgIGNvbnN0IHRyYWNrID0gcmVzb3VyY2U/Lm1ldGFkYXRhIHx8IHRoaXMuY3VycmVudFRyYWNrO1xuXG4gICAgICAgIGlmICh0aGlzLmhhc0RlYnVnZ2VyKVxuICAgICAgICAgICAgdGhpcy5kZWJ1ZyhcbiAgICAgICAgICAgICAgICBgVHJhY2sgJHtKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0cmFjaz8udGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIGlzVHJhbnNpdGlvbk1vZGU6IHRoaXMuaXNUcmFuc2l0aW9uaW5nKClcbiAgICAgICAgICAgICAgICB9KX0gd2FzIG1hcmtlZCBhcyBmaW5pc2hlZGBcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgaWYgKHRyYWNrICYmICF0aGlzLmlzVHJhbnNpdGlvbmluZygpKSB7XG4gICAgICAgICAgICB0aGlzLnN5bmNlZEx5cmljc1Byb3ZpZGVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLnN5bmNlZEx5cmljc1Byb3ZpZGVyLmx5cmljcy5jbGVhcigpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzRGVidWdnZXIpIHRoaXMuZGVidWcoJ0FkZGluZyB0cmFjayB0byBoaXN0b3J5IGFuZCBlbWl0dGluZyBmaW5pc2ggZXZlbnQgc2luY2UgdHJhbnNpdGlvbiBtb2RlIGlzIGRpc2FibGVkLi4uJyk7XG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaCh0cmFjayk7XG4gICAgICAgICAgICB0aGlzLm5vZGUucmVzZXRQcm9ncmVzcygpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KEd1aWxkUXVldWVFdmVudC5wbGF5ZXJGaW5pc2gsIHRoaXMsIHRyYWNrKTtcbiAgICAgICAgICAgIGlmICh0aGlzLiNkZWxldGVkKSByZXR1cm4gdGhpcy4jZW1pdEVuZCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMudHJhY2tzLnNpemUgPCAxICYmIHRoaXMucmVwZWF0TW9kZSA9PT0gUXVldWVSZXBlYXRNb2RlLk9GRikge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc0RlYnVnZ2VyKSB0aGlzLmRlYnVnKCdObyBtb3JlIHRyYWNrcyBsZWZ0IGluIHRoZSBxdWV1ZSB0byBwbGF5IGFuZCByZXBlYXQgbW9kZSBpcyBvZmYsIGluaXRpYXRpbmcgI2VtaXRFbmQoKScpO1xuICAgICAgICAgICAgICAgIHRoaXMuI2VtaXRFbmQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVwZWF0TW9kZSA9PT0gUXVldWVSZXBlYXRNb2RlLlRSQUNLKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc0RlYnVnZ2VyKSB0aGlzLmRlYnVnKCdSZXBlYXQgbW9kZSBpcyBzZXQgdG8gdHJhY2ssIHJlcGVhdGluZyBsYXN0IHRyYWNrIGZyb20gdGhlIGhpc3RvcnkuLi4nKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX2N1cnJlbnQgPSB0aGlzLmhpc3RvcnkudHJhY2tzLmRpc3BhdGNoKCkgfHwgdHJhY2s7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5vZGUucGxheSh0aGlzLl9fY3VycmVudCEsIHsgcXVldWU6IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZXBlYXRNb2RlID09PSBRdWV1ZVJlcGVhdE1vZGUuUVVFVUUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzRGVidWdnZXIpIHRoaXMuZGVidWcoJ1JlcGVhdCBtb2RlIGlzIHNldCB0byBxdWV1ZSwgbW92aW5nIGxhc3QgdHJhY2sgZnJvbSB0aGUgaGlzdG9yeSB0byBjdXJyZW50IHF1ZXVlLi4uJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhY2tzLmFkZCh0aGlzLmhpc3RvcnkudHJhY2tzLmRpc3BhdGNoKCkgfHwgdHJhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMudHJhY2tzLnNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVwZWF0TW9kZSA9PT0gUXVldWVSZXBlYXRNb2RlLkFVVE9QTEFZKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNEZWJ1Z2dlcikgdGhpcy5kZWJ1ZygnUmVwZWF0IG1vZGUgaXMgc2V0IHRvIGF1dG9wbGF5LCBpbml0aWF0aW5nIGF1dG9wbGF5IGhhbmRsZXIuLi4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI2hhbmRsZUF1dG9wbGF5KHRyYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc0RlYnVnZ2VyKSB0aGlzLmRlYnVnKCdJbml0aWFsaXppbmcgbmV4dCB0cmFjayBvZiB0aGUgcXVldWUuLi4nKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fX2N1cnJlbnQgPSB0aGlzLiNnZXROZXh0VHJhY2soKSE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm9kZS5wbGF5KHRoaXMuX19jdXJyZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgI2VtaXRFbmQoKSB7XG4gICAgICAgIHRoaXMuX19jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5lbWl0KEd1aWxkUXVldWVFdmVudC5lbXB0eVF1ZXVlLCB0aGlzKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5sZWF2ZU9uRW5kKSB7XG4gICAgICAgICAgICBjb25zdCB0bTogTm9kZUpTLlRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1BsYXlpbmcoKSkgcmV0dXJuIGNsZWFyVGltZW91dCh0bSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaGVyPy5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICB9LCB0aGlzLm9wdGlvbnMubGVhdmVPbkVuZENvb2xkb3duKS51bnJlZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgI2hhbmRsZUF1dG9wbGF5KHRyYWNrOiBUcmFjaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzRGVidWdnZXIpIHRoaXMuZGVidWcoYEF1dG9wbGF5ID4+IEZpbmRpbmcgcmVsYXRlZCB0cmFja3MgZm9yIFRyYWNrICR7dHJhY2sudGl0bGV9ICgke3RyYWNrLnVybH0pIFtleHQ6JHt0cmFjay5leHRyYWN0b3I/LmlkZW50aWZpZXIgfHwgJ04vQSd9XWApO1xuICAgICAgICAgICAgY29uc3QgdHJhY2tzID1cbiAgICAgICAgICAgICAgICAoYXdhaXQgdHJhY2suZXh0cmFjdG9yPy5nZXRSZWxhdGVkVHJhY2tzKHRyYWNrLCB0aGlzLmhpc3RvcnkpKT8udHJhY2tzIHx8XG4gICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsYXllci5leHRyYWN0b3JzLnJ1bihhc3luYyAoZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNEZWJ1Z2dlcikgdGhpcy5kZWJ1ZyhgQXV0b3BsYXkgPj4gUXVlcnlpbmcgZXh0cmFjdG9yICR7ZXh0LmlkZW50aWZpZXJ9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBleHQuZ2V0UmVsYXRlZFRyYWNrcyh0cmFjaywgdGhpcy5oaXN0b3J5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzLnRyYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNEZWJ1Z2dlcikgdGhpcy5kZWJ1ZyhgQXV0b3BsYXkgPj4gRXh0cmFjdG9yICR7ZXh0LmlkZW50aWZpZXJ9IGZhaWxlZCB0byBwcm92aWRlIHJlc3VsdHMuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNEZWJ1Z2dlcikgdGhpcy5kZWJ1ZyhgQXV0b3BsYXkgPj4gRXh0cmFjdG9yICR7ZXh0LmlkZW50aWZpZXJ9IHN1Y2Nlc3NmdWxseSByZXR1cm5lZCByZXN1bHRzLmApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnRyYWNrcztcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApPy5yZXN1bHQgfHxcbiAgICAgICAgICAgICAgICBbXTtcblxuICAgICAgICAgICAgbGV0IHJlc29sdmVyOiAodHJhY2s6IFRyYWNrIHwgbnVsbCkgPT4gdm9pZCA9IFV0aWwubm9vcDtcbiAgICAgICAgICAgIGNvbnN0IGRvbmVQcm9taXNlID0gbmV3IFByb21pc2U8VHJhY2sgfCBudWxsPigocmVzb2x2ZSkgPT4gKHJlc29sdmVyID0gcmVzb2x2ZSkpO1xuXG4gICAgICAgICAgICBjb25zdCBzdWNjZXNzID0gdGhpcy5lbWl0KEd1aWxkUXVldWVFdmVudC53aWxsQXV0b1BsYXksIHRoaXMsIHRyYWNrcywgcmVzb2x2ZXIhKTtcblxuICAgICAgICAgICAgLy8gcHJldmVudCBkYW5nbGluZyBwcm9taXNlXG4gICAgICAgICAgICBpZiAoIXN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlcihcbiAgICAgICAgICAgICAgICAgICAgdHJhY2tzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdW5pcXVlID0gdHJhY2tzLmZpbHRlcigodHIpID0+ICF0aGlzLmhpc3RvcnkudHJhY2tzLmZpbmQoKHQpID0+IHQudXJsID09PSB0ci51cmwpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmlxdWU/LlswXSA/PyBVdGlsLnJhbmRvbUNob2ljZSh0cmFja3Muc2xpY2UoMCwgNSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KSgpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBuZXh0VHJhY2sgPSBhd2FpdCBkb25lUHJvbWlzZTtcblxuICAgICAgICAgICAgaWYgKCFuZXh0VHJhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNEZWJ1Z2dlcikgdGhpcy5kZWJ1ZygnQXV0b3BsYXkgPj4gTm8gdHJhY2sgd2FzIGZvdW5kLCBpbml0aWF0aW5nICNlbWl0RW5kKCknKTtcbiAgICAgICAgICAgICAgICB0aHJvdyAnTm8gdHJhY2sgd2FzIGZvdW5kJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5ub2RlLnBsYXkobmV4dFRyYWNrLCB7XG4gICAgICAgICAgICAgICAgcXVldWU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNlZWs6IDAsXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbk1vZGU6IGZhbHNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4jZW1pdEVuZCgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwgImltcG9ydCB7XG4gICAgQXVkaW9QbGF5ZXIsXG4gICAgQXVkaW9QbGF5ZXJFcnJvcixcbiAgICBBdWRpb1BsYXllclN0YXR1cyxcbiAgICBBdWRpb1Jlc291cmNlLFxuICAgIGNyZWF0ZUF1ZGlvUGxheWVyLFxuICAgIGNyZWF0ZUF1ZGlvUmVzb3VyY2UsXG4gICAgZW50ZXJzU3RhdGUsXG4gICAgU3RyZWFtVHlwZSxcbiAgICBWb2ljZUNvbm5lY3Rpb24sXG4gICAgVm9pY2VDb25uZWN0aW9uU3RhdHVzLFxuICAgIFZvaWNlQ29ubmVjdGlvbkRpc2Nvbm5lY3RSZWFzb25cbn0gZnJvbSAnZGlzY29yZC12b2lwJztcbmltcG9ydCB7IFN0YWdlQ2hhbm5lbCwgVm9pY2VDaGFubmVsIH0gZnJvbSAnZGlzY29yZC5qcyc7XG5pbXBvcnQgdHlwZSB7IFJlYWRhYmxlIH0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0BkaXNjb3JkLXBsYXllci91dGlscyc7XG5pbXBvcnQgeyBUcmFjayB9IGZyb20gJy4uL2ZhYnJpYy9UcmFjayc7XG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vdXRpbHMvVXRpbCc7XG5pbXBvcnQgeyBFcXVhbGl6ZXJCYW5kLCBCaXF1YWRGaWx0ZXJzLCBQQ01GaWx0ZXJzLCBGaWx0ZXJzQ2hhaW4gfSBmcm9tICdAZGlzY29yZC1wbGF5ZXIvZXF1YWxpemVyJztcbmltcG9ydCB7IEd1aWxkUXVldWUsIEd1aWxkUXVldWVFdmVudCwgUG9zdFByb2Nlc3NlZFJlc3VsdCB9IGZyb20gJy4uL3F1ZXVlJztcbmltcG9ydCB7IFZvaWNlUmVjZWl2ZXJOb2RlIH0gZnJvbSAnLi4vcXVldWUvVm9pY2VSZWNlaXZlck5vZGUnO1xuaW1wb3J0IHsgRXhjZXB0aW9ucyB9IGZyb20gJy4uL2Vycm9ycyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlU3RyZWFtT3BzIHtcbiAgICB0eXBlPzogU3RyZWFtVHlwZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGRhdGE/OiBhbnk7XG4gICAgZGlzYWJsZVZvbHVtZT86IGJvb2xlYW47XG4gICAgZGlzYWJsZUVxdWFsaXplcj86IGJvb2xlYW47XG4gICAgZGlzYWJsZUJpcXVhZD86IGJvb2xlYW47XG4gICAgZXE/OiBFcXVhbGl6ZXJCYW5kW107XG4gICAgYmlxdWFkRmlsdGVyPzogQmlxdWFkRmlsdGVycztcbiAgICBkaXNhYmxlRmlsdGVycz86IGJvb2xlYW47XG4gICAgZGVmYXVsdEZpbHRlcnM/OiBQQ01GaWx0ZXJzW107XG4gICAgdm9sdW1lPzogbnVtYmVyO1xuICAgIGRpc2FibGVSZXNhbXBsZXI/OiBib29sZWFuO1xuICAgIHNhbXBsZVJhdGU/OiBudW1iZXI7XG4gICAgc2tpcEZGbXBlZz86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVm9pY2VFdmVudHMge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbiAgICBlcnJvcjogKGVycm9yOiBBdWRpb1BsYXllckVycm9yKSA9PiBhbnk7XG4gICAgZGVidWc6IChtZXNzYWdlOiBzdHJpbmcpID0+IGFueTtcbiAgICBzdGFydDogKHJlc291cmNlOiBBdWRpb1Jlc291cmNlPFRyYWNrPikgPT4gYW55O1xuICAgIGZpbmlzaDogKHJlc291cmNlOiBBdWRpb1Jlc291cmNlPFRyYWNrPikgPT4gYW55O1xuICAgIGRzcDogKGZpbHRlcnM6IFBDTUZpbHRlcnNbXSkgPT4gYW55O1xuICAgIGVxQmFuZHM6IChmaWx0ZXJzOiBFcXVhbGl6ZXJCYW5kW10pID0+IGFueTtcbiAgICBzYW1wbGVSYXRlOiAoZmlsdGVyczogbnVtYmVyKSA9PiBhbnk7XG4gICAgYmlxdWFkOiAoZmlsdGVyczogQmlxdWFkRmlsdGVycykgPT4gYW55O1xuICAgIHZvbHVtZTogKHZvbHVtZTogbnVtYmVyKSA9PiBhbnk7XG4gICAgZGVzdHJveWVkOiAoKSA9PiBhbnk7XG4gICAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG59XG5cbmNsYXNzIFN0cmVhbURpc3BhdGNoZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXI8Vm9pY2VFdmVudHM+IHtcbiAgICBwdWJsaWMgdm9pY2VDb25uZWN0aW9uOiBWb2ljZUNvbm5lY3Rpb247XG4gICAgcHVibGljIGF1ZGlvUGxheWVyOiBBdWRpb1BsYXllcjtcbiAgICBwdWJsaWMgcmVjZWl2ZXIgPSBuZXcgVm9pY2VSZWNlaXZlck5vZGUodGhpcyk7XG4gICAgcHVibGljIGNoYW5uZWw6IFZvaWNlQ2hhbm5lbCB8IFN0YWdlQ2hhbm5lbDtcbiAgICBwdWJsaWMgYXVkaW9SZXNvdXJjZT86IEF1ZGlvUmVzb3VyY2U8VHJhY2s+IHwgbnVsbDtcbiAgICBwdWJsaWMgZHNwID0gbmV3IEZpbHRlcnNDaGFpbigpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBuZXcgY29ubmVjdGlvbiBvYmplY3RcbiAgICAgKiBAcGFyYW0ge1ZvaWNlQ29ubmVjdGlvbn0gY29ubmVjdGlvbiBUaGUgY29ubmVjdGlvblxuICAgICAqIEBwYXJhbSB7Vm9pY2VDaGFubmVsfFN0YWdlQ2hhbm5lbH0gY2hhbm5lbCBUaGUgY29ubmVjdGVkIGNoYW5uZWxcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb246IFZvaWNlQ29ubmVjdGlvbiwgY2hhbm5lbDogVm9pY2VDaGFubmVsIHwgU3RhZ2VDaGFubmVsLCBwdWJsaWMgcXVldWU6IEd1aWxkUXVldWUsIHB1YmxpYyByZWFkb25seSBjb25uZWN0aW9uVGltZW91dDogbnVtYmVyID0gMjAwMDAsIGF1ZGlvUGxheWVyPzogQXVkaW9QbGF5ZXIpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHZvaWNlIGNvbm5lY3Rpb25cbiAgICAgICAgICogQHR5cGUge1ZvaWNlQ29ubmVjdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudm9pY2VDb25uZWN0aW9uID0gY29ubmVjdGlvbjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGF1ZGlvIHBsYXllclxuICAgICAgICAgKiBAdHlwZSB7QXVkaW9QbGF5ZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID1cbiAgICAgICAgICAgIGF1ZGlvUGxheWVyIHx8XG4gICAgICAgICAgICBjcmVhdGVBdWRpb1BsYXllcih7XG4gICAgICAgICAgICAgICAgZGVidWc6IHRoaXMucXVldWUuaGFzRGVidWdnZXJcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdm9pY2UgY2hhbm5lbFxuICAgICAgICAgKiBAdHlwZSB7Vm9pY2VDaGFubmVsfFN0YWdlQ2hhbm5lbH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWw7XG5cbiAgICAgICAgdGhpcy52b2ljZUNvbm5lY3Rpb24ub24oJ2RlYnVnJywgKG0pID0+IHZvaWQgdGhpcy5lbWl0KCdkZWJ1ZycsIG0pKTtcbiAgICAgICAgdGhpcy52b2ljZUNvbm5lY3Rpb24ub24oJ2Vycm9yJywgKGVycm9yKSA9PiB2b2lkIHRoaXMuZW1pdCgnZXJyb3InLCBlcnJvciBhcyBBdWRpb1BsYXllckVycm9yKSk7XG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIub24oJ2RlYnVnJywgKG0pID0+IHZvaWQgdGhpcy5lbWl0KCdkZWJ1ZycsIG0pKTtcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5vbignZXJyb3InLCAoZXJyb3IpID0+IHZvaWQgdGhpcy5lbWl0KCdlcnJvcicsIGVycm9yKSk7XG5cbiAgICAgICAgdGhpcy5kc3Aub25VcGRhdGUgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZHNwKSByZXR1cm47XG4gICAgICAgICAgICBpZiAodGhpcy5kc3AuZmlsdGVycz8uZmlsdGVycykgdGhpcy5lbWl0KCdkc3AnLCB0aGlzLmRzcC5maWx0ZXJzPy5maWx0ZXJzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmRzcC5iaXF1YWQ/LmZpbHRlcikgdGhpcy5lbWl0KCdiaXF1YWQnLCB0aGlzLmRzcC5iaXF1YWQ/LmZpbHRlcik7XG4gICAgICAgICAgICBpZiAodGhpcy5kc3AuZXF1YWxpemVyKSB0aGlzLmVtaXQoJ2VxQmFuZHMnLCB0aGlzLmRzcC5lcXVhbGl6ZXIuZ2V0RVEoKSk7XG4gICAgICAgICAgICBpZiAodGhpcy5kc3Audm9sdW1lKSB0aGlzLmVtaXQoJ3ZvbHVtZScsIHRoaXMuZHNwLnZvbHVtZS52b2x1bWUpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZHNwLnJlc2FtcGxlcikgdGhpcy5lbWl0KCdzYW1wbGVSYXRlJywgdGhpcy5kc3AucmVzYW1wbGVyLnRhcmdldFNhbXBsZVJhdGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuZHNwLm9uRXJyb3IgPSAoZSkgPT4gdGhpcy5lbWl0KCdlcnJvcicsIGUgYXMgQXVkaW9QbGF5ZXJFcnJvcik7XG5cbiAgICAgICAgdGhpcy52b2ljZUNvbm5lY3Rpb25cbiAgICAgICAgICAgIC5vbihWb2ljZUNvbm5lY3Rpb25TdGF0dXMuRGlzY29ubmVjdGVkLCBhc3luYyAob2xkU3RhdGUsIG5ld1N0YXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1N0YXRlLnJlYXNvbiA9PT0gVm9pY2VDb25uZWN0aW9uRGlzY29ubmVjdFJlYXNvbi5NYW51YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobmV3U3RhdGUucmVhc29uID09PSBWb2ljZUNvbm5lY3Rpb25EaXNjb25uZWN0UmVhc29uLldlYlNvY2tldENsb3NlICYmIG5ld1N0YXRlLmNsb3NlQ29kZSA9PT0gNDAxNCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgZW50ZXJzU3RhdGUodGhpcy52b2ljZUNvbm5lY3Rpb24sIFZvaWNlQ29ubmVjdGlvblN0YXR1cy5Db25uZWN0aW5nLCB0aGlzLmNvbm5lY3Rpb25UaW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZvaWNlQ29ubmVjdGlvbi5zdGF0ZS5zdGF0dXMgIT09IFZvaWNlQ29ubmVjdGlvblN0YXR1cy5EZXN0cm95ZWQpIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVyciBhcyBBdWRpb1BsYXllckVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy52b2ljZUNvbm5lY3Rpb24ucmVqb2luQXR0ZW1wdHMgPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IFV0aWwud2FpdCgodGhpcy52b2ljZUNvbm5lY3Rpb24ucmVqb2luQXR0ZW1wdHMgKyAxKSAqIDUwMDApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZvaWNlQ29ubmVjdGlvbi5yZWpvaW4oKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudm9pY2VDb25uZWN0aW9uLnN0YXRlLnN0YXR1cyAhPT0gVm9pY2VDb25uZWN0aW9uU3RhdHVzLkRlc3Ryb3llZCkgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVyciBhcyBBdWRpb1BsYXllckVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oVm9pY2VDb25uZWN0aW9uU3RhdHVzLkRlc3Ryb3llZCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZW5kKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5xdWV1ZS5lbWl0KEd1aWxkUXVldWVFdmVudC5jb25uZWN0aW9uRGVzdHJveWVkLCB0aGlzLnF1ZXVlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIub24oJ3N0YXRlQ2hhbmdlJywgKG9sZFN0YXRlLCBuZXdTdGF0ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKG9sZFN0YXRlLnN0YXR1cyAhPT0gQXVkaW9QbGF5ZXJTdGF0dXMuUGF1c2VkICYmIG5ld1N0YXRlLnN0YXR1cyA9PT0gQXVkaW9QbGF5ZXJTdGF0dXMuUGF1c2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5xdWV1ZS5lbWl0KEd1aWxkUXVldWVFdmVudC5wbGF5ZXJQYXVzZSwgdGhpcy5xdWV1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvbGRTdGF0ZS5zdGF0dXMgPT09IEF1ZGlvUGxheWVyU3RhdHVzLlBhdXNlZCAmJiBuZXdTdGF0ZS5zdGF0dXMgIT09IEF1ZGlvUGxheWVyU3RhdHVzLlBhdXNlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucXVldWUuZW1pdChHdWlsZFF1ZXVlRXZlbnQucGxheWVyUmVzdW1lLCB0aGlzLnF1ZXVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5ld1N0YXRlLnN0YXR1cyA9PT0gQXVkaW9QbGF5ZXJTdGF0dXMuUGxheWluZykge1xuICAgICAgICAgICAgICAgIGlmIChvbGRTdGF0ZS5zdGF0dXMgPT09IEF1ZGlvUGxheWVyU3RhdHVzLklkbGUgfHwgb2xkU3RhdGUuc3RhdHVzID09PSBBdWRpb1BsYXllclN0YXR1cy5CdWZmZXJpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdCgnc3RhcnQnLCB0aGlzLmF1ZGlvUmVzb3VyY2UhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5ld1N0YXRlLnN0YXR1cyA9PT0gQXVkaW9QbGF5ZXJTdGF0dXMuSWRsZSAmJiBvbGRTdGF0ZS5zdGF0dXMgIT09IEF1ZGlvUGxheWVyU3RhdHVzLklkbGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2ZpbmlzaCcsIHRoaXMuYXVkaW9SZXNvdXJjZSEpO1xuICAgICAgICAgICAgICAgIHRoaXMuZHNwLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvUmVzb3VyY2UgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnZvaWNlQ29ubmVjdGlvbi5zdWJzY3JpYmUodGhpcy5hdWRpb1BsYXllcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIHBsYXllciBoYXMgYmVlbiBwYXVzZWQgbWFudWFsbHlcbiAgICAgKi9cbiAgICBnZXQgcGF1c2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdWRpb1BsYXllci5zdGF0ZS5zdGF0dXMgPT09IEF1ZGlvUGxheWVyU3RhdHVzLlBhdXNlZDtcbiAgICB9XG5cbiAgICBzZXQgcGF1c2VkKHZhbDogYm9vbGVhbikge1xuICAgICAgICB2YWwgPyB0aGlzLnBhdXNlKHRydWUpIDogdGhpcy5yZXN1bWUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0aGUgcGxheWVyIGlzIGN1cnJlbnRseSBwYXVzZWQgYXV0b21hdGljYWxseSBvciBtYW51YWxseS5cbiAgICAgKi9cbiAgICBpc1BhdXNlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGF1c2VkIHx8IHRoaXMuYXVkaW9QbGF5ZXIuc3RhdGUuc3RhdHVzID09PSBBdWRpb1BsYXllclN0YXR1cy5BdXRvUGF1c2VkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IHRoZSBwbGF5ZXIgaXMgY3VycmVudGx5IGJ1ZmZlcmluZ1xuICAgICAqL1xuICAgIGlzQnVmZmVyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdWRpb1BsYXllci5zdGF0ZS5zdGF0dXMgPT09IEF1ZGlvUGxheWVyU3RhdHVzLkJ1ZmZlcmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0aGUgcGxheWVyIGlzIGN1cnJlbnRseSBwbGF5aW5nXG4gICAgICovXG4gICAgaXNQbGF5aW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdWRpb1BsYXllci5zdGF0ZS5zdGF0dXMgPT09IEF1ZGlvUGxheWVyU3RhdHVzLlBsYXlpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdGhlIHBsYXllciBpcyBjdXJyZW50bHkgaWRsZVxuICAgICAqL1xuICAgIGlzSWRsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXVkaW9QbGF5ZXIuc3RhdGUuc3RhdHVzID09PSBBdWRpb1BsYXllclN0YXR1cy5JZGxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IHRoZSB2b2ljZSBjb25uZWN0aW9uIGhhcyBiZWVuIGRlc3Ryb3llZFxuICAgICAqL1xuICAgIGlzRGVzdHJveWVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52b2ljZUNvbm5lY3Rpb24uc3RhdGUuc3RhdHVzID09PSBWb2ljZUNvbm5lY3Rpb25TdGF0dXMuRGVzdHJveWVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IHRoZSB2b2ljZSBjb25uZWN0aW9uIGhhcyBiZWVuIGRlc3Ryb3llZFxuICAgICAqL1xuICAgIGlzRGlzY29ubmVjdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52b2ljZUNvbm5lY3Rpb24uc3RhdGUuc3RhdHVzID09PSBWb2ljZUNvbm5lY3Rpb25TdGF0dXMuRGlzY29ubmVjdGVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IHRoZSB2b2ljZSBjb25uZWN0aW9uIGlzIHJlYWR5IHRvIHBsYXlcbiAgICAgKi9cbiAgICBpc1JlYWR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy52b2ljZUNvbm5lY3Rpb24uc3RhdGUuc3RhdHVzID09PSBWb2ljZUNvbm5lY3Rpb25TdGF0dXMuUmVhZHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdGhlIHZvaWNlIGNvbm5lY3Rpb24gaXMgc2lnbmFsbGluZ1xuICAgICAqL1xuICAgIGlzU2lnbmFsbGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm9pY2VDb25uZWN0aW9uLnN0YXRlLnN0YXR1cyA9PT0gVm9pY2VDb25uZWN0aW9uU3RhdHVzLlNpZ25hbGxpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdGhlIHZvaWNlIGNvbm5lY3Rpb24gaXMgY29ubmVjdGluZ1xuICAgICAqL1xuICAgIGlzQ29ubmVjdGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm9pY2VDb25uZWN0aW9uLnN0YXRlLnN0YXR1cyA9PT0gVm9pY2VDb25uZWN0aW9uU3RhdHVzLkNvbm5lY3Rpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBzdHJlYW1cbiAgICAgKiBAcGFyYW0ge1JlYWRhYmxlfSBzcmMgVGhlIHN0cmVhbSBzb3VyY2VcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wc10gT3B0aW9uc1xuICAgICAqIEByZXR1cm5zIHtBdWRpb1Jlc291cmNlfVxuICAgICAqL1xuICAgIGFzeW5jIGNyZWF0ZVN0cmVhbShzcmM6IFJlYWRhYmxlLCBvcHM/OiBDcmVhdGVTdHJlYW1PcHMpIHtcbiAgICAgICAgaWYgKCFvcHM/LmRpc2FibGVGaWx0ZXJzICYmIHRoaXMucXVldWUuaGFzRGVidWdnZXIpIHRoaXMucXVldWUuZGVidWcoJ0luaXRpYXRpbmcgRFNQIGZpbHRlcnMgcGlwZWxpbmUuLi4nKTtcbiAgICAgICAgY29uc3Qgc3RyZWFtID0gIW9wcz8uZGlzYWJsZUZpbHRlcnNcbiAgICAgICAgICAgID8gdGhpcy5kc3AuY3JlYXRlKHNyYywge1xuICAgICAgICAgICAgICAgICAgZHNwOiB7XG4gICAgICAgICAgICAgICAgICAgICAgZmlsdGVyczogb3BzPy5kZWZhdWx0RmlsdGVycyxcbiAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogb3BzPy5kaXNhYmxlRmlsdGVyc1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGJpcXVhZDogb3BzPy5iaXF1YWRGaWx0ZXJcbiAgICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IG9wcy5iaXF1YWRGaWx0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IG9wcz8uZGlzYWJsZUJpcXVhZFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgcmVzYW1wbGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U2FtcGxlUmF0ZTogb3BzPy5zYW1wbGVSYXRlLFxuICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBvcHM/LmRpc2FibGVSZXNhbXBsZXJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBlcXVhbGl6ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICBiYW5kTXVsdGlwbGllcjogb3BzPy5lcSxcbiAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogb3BzPy5kaXNhYmxlRXF1YWxpemVyXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgdm9sdW1lOiB7XG4gICAgICAgICAgICAgICAgICAgICAgdm9sdW1lOiBvcHM/LnZvbHVtZSxcbiAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogb3BzPy5kaXNhYmxlVm9sdW1lXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICA6IHNyYztcblxuICAgICAgICBpZiAodGhpcy5xdWV1ZS5oYXNEZWJ1Z2dlcikgdGhpcy5xdWV1ZS5kZWJ1ZygnRXhlY3V0aW5nIG9uQWZ0ZXJDcmVhdGVTdHJlYW0gaG9vay4uLicpO1xuICAgICAgICBjb25zdCBwb3N0U3RyZWFtID0gYXdhaXQgdGhpcy5xdWV1ZS5vbkFmdGVyQ3JlYXRlU3RyZWFtPy4oc3RyZWFtLCB0aGlzLnF1ZXVlKS5jYXRjaChcbiAgICAgICAgICAgICgpID0+XG4gICAgICAgICAgICAgICAgKHtcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFtOiBzdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IG9wcz8udHlwZSA/PyBTdHJlYW1UeXBlLkFyYml0cmFyeVxuICAgICAgICAgICAgICAgIH0gYXMgUG9zdFByb2Nlc3NlZFJlc3VsdClcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAodGhpcy5xdWV1ZS5oYXNEZWJ1Z2dlcikgdGhpcy5xdWV1ZS5kZWJ1ZygnUHJlcGFyaW5nIEF1ZGlvUmVzb3VyY2UuLi4nKTtcbiAgICAgICAgdGhpcy5hdWRpb1Jlc291cmNlID0gY3JlYXRlQXVkaW9SZXNvdXJjZShwb3N0U3RyZWFtPy5zdHJlYW0gPz8gc3RyZWFtLCB7XG4gICAgICAgICAgICBpbnB1dFR5cGU6IHBvc3RTdHJlYW0/LnR5cGUgPz8gb3BzPy50eXBlID8/IFN0cmVhbVR5cGUuQXJiaXRyYXJ5LFxuICAgICAgICAgICAgbWV0YWRhdGE6IG9wcz8uZGF0YSxcbiAgICAgICAgICAgIC8vIHZvbHVtZSBjb250cm9scyBoYXBwZW4gZnJvbSBBdWRpb0ZpbHRlciBEU1AgdXRpbGl0eVxuICAgICAgICAgICAgaW5saW5lVm9sdW1lOiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5hdWRpb1Jlc291cmNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgcmVzYW1wbGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kc3A/LnJlc2FtcGxlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGZpbHRlcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRzcD8uZmlsdGVycztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGJpcXVhZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZHNwPy5iaXF1YWQgfHwgbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGVxdWFsaXplcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZHNwPy5lcXVhbGl6ZXIgfHwgbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcGxheWVyIHN0YXR1c1xuICAgICAqIEB0eXBlIHtBdWRpb1BsYXllclN0YXR1c31cbiAgICAgKi9cbiAgICBnZXQgc3RhdHVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdWRpb1BsYXllci5zdGF0ZS5zdGF0dXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzY29ubmVjdHMgZnJvbSB2b2ljZVxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hdWRpb1BsYXllcikgdGhpcy5hdWRpb1BsYXllci5zdG9wKHRydWUpO1xuICAgICAgICAgICAgaWYgKHRoaXMudm9pY2VDb25uZWN0aW9uLnN0YXRlLnN0YXR1cyAhPT0gVm9pY2VDb25uZWN0aW9uU3RhdHVzLkRlc3Ryb3llZCkgdGhpcy52b2ljZUNvbm5lY3Rpb24uZGVzdHJveSgpO1xuICAgICAgICB9IGNhdGNoIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGlzIGRpc3BhdGNoZXJcbiAgICAgKi9cbiAgICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMudm9pY2VDb25uZWN0aW9uLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLmRzcC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuYXVkaW9SZXNvdXJjZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZW1pdCgnZGVzdHJveWVkJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RvcHMgdGhlIHBsYXllclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIGVuZCgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIuc3RvcCgpO1xuICAgICAgICAgICAgdGhpcy5kc3AuZGVzdHJveSgpO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgIC8vXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXVzZXMgdGhlIHN0cmVhbSBwbGF5YmFja1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2ludGVycG9sYXRlU2lsZW5jZT1mYWxzZV0gSWYgdHJ1ZSwgdGhlIHBsYXllciB3aWxsIHBsYXkgNSBwYWNrZXRzIG9mIHNpbGVuY2UgYWZ0ZXIgcGF1c2luZyB0byBwcmV2ZW50IGF1ZGlvIGdsaXRjaGVzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIHBhdXNlKGludGVycG9sYXRlU2lsZW5jZT86IGJvb2xlYW4pIHtcbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IHRoaXMuYXVkaW9QbGF5ZXIucGF1c2UoaW50ZXJwb2xhdGVTaWxlbmNlKTtcbiAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzdW1lcyB0aGUgc3RyZWFtIHBsYXliYWNrXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgcmVzdW1lKCkge1xuICAgICAgICBjb25zdCBzdWNjZXNzID0gdGhpcy5hdWRpb1BsYXllci51bnBhdXNlKCk7XG4gICAgICAgIHJldHVybiBzdWNjZXNzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBsYXkgc3RyZWFtXG4gICAgICogQHBhcmFtIHtBdWRpb1Jlc291cmNlPFRyYWNrPn0gW3Jlc291cmNlPXRoaXMuYXVkaW9SZXNvdXJjZV0gVGhlIGF1ZGlvIHJlc291cmNlIHRvIHBsYXlcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHVzPWZhbHNlXSBXaGV0aGVyIG9yIG5vdCB0byB1c2Ugb3B1c1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFN0cmVhbURpc3BhdGNoZXI+fVxuICAgICAqL1xuICAgIGFzeW5jIHBsYXlTdHJlYW0ocmVzb3VyY2U6IEF1ZGlvUmVzb3VyY2U8VHJhY2s+ID0gdGhpcy5hdWRpb1Jlc291cmNlISkge1xuICAgICAgICBpZiAoIXJlc291cmNlKSB7XG4gICAgICAgICAgICB0aHJvdyBFeGNlcHRpb25zLkVSUl9OT19BVURJT19SRVNPVVJDRSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNvdXJjZS5lbmRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHZvaWQgdGhpcy5lbWl0KCdmaW5pc2gnLCByZXNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmF1ZGlvUmVzb3VyY2UpIHRoaXMuYXVkaW9SZXNvdXJjZSA9IHJlc291cmNlO1xuICAgICAgICBpZiAodGhpcy52b2ljZUNvbm5lY3Rpb24uc3RhdGUuc3RhdHVzICE9PSBWb2ljZUNvbm5lY3Rpb25TdGF0dXMuUmVhZHkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgZW50ZXJzU3RhdGUodGhpcy52b2ljZUNvbm5lY3Rpb24sIFZvaWNlQ29ubmVjdGlvblN0YXR1cy5SZWFkeSwgdGhpcy5jb25uZWN0aW9uVGltZW91dCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyIGFzIEF1ZGlvUGxheWVyRXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheShyZXNvdXJjZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlIGFzIEF1ZGlvUGxheWVyRXJyb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBwbGF5YmFjayB2b2x1bWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZvbHVtZSBhbW91bnRcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBzZXRWb2x1bWUodmFsdWU6IG51bWJlcikge1xuICAgICAgICBpZiAoIXRoaXMuZHNwLnZvbHVtZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcy5kc3Audm9sdW1lLnNldFZvbHVtZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgdm9sdW1lXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgdm9sdW1lKCkge1xuICAgICAgICBpZiAoIXRoaXMuZHNwLnZvbHVtZSkgcmV0dXJuIDEwMDtcbiAgICAgICAgcmV0dXJuIHRoaXMuZHNwLnZvbHVtZS52b2x1bWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHBsYXliYWNrIHRpbWVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIGdldCBzdHJlYW1UaW1lKCkge1xuICAgICAgICBpZiAoIXRoaXMuYXVkaW9SZXNvdXJjZSkgcmV0dXJuIDA7XG4gICAgICAgIHJldHVybiB0aGlzLmF1ZGlvUmVzb3VyY2UucGxheWJhY2tEdXJhdGlvbjtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFN0cmVhbURpc3BhdGNoZXIgYXMgU3RyZWFtRGlzcGF0Y2hlciB9O1xuIiwgImltcG9ydCB7IFVzZXJSZXNvbHZhYmxlIH0gZnJvbSAnZGlzY29yZC5qcyc7XG5pbXBvcnQgeyBQYXNzVGhyb3VnaCwgdHlwZSBSZWFkYWJsZSB9IGZyb20gJ25vZGU6c3RyZWFtJztcbmltcG9ydCB7IEVuZEJlaGF2aW9yVHlwZSB9IGZyb20gJ2Rpc2NvcmQtdm9pcCc7XG5pbXBvcnQgKiBhcyBwcmlzbSBmcm9tICdwcmlzbS1tZWRpYSc7XG5pbXBvcnQgeyBTdHJlYW1EaXNwYXRjaGVyIH0gZnJvbSAnLi4vVm9pY2VJbnRlcmZhY2UvU3RyZWFtRGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBUcmFjayB9IGZyb20gJy4uL2ZhYnJpYy9UcmFjayc7XG5pbXBvcnQgeyBSYXdUcmFja0RhdGEgfSBmcm9tICcuLi90eXBlcy90eXBlcyc7XG5pbXBvcnQgeyBFeGNlcHRpb25zIH0gZnJvbSAnLi4vZXJyb3JzJztcblxuZXhwb3J0IGludGVyZmFjZSBWb2ljZVJlY2VpdmVyT3B0aW9ucyB7XG4gICAgbW9kZT86ICdvcHVzJyB8ICdwY20nO1xuICAgIGVuZD86IEVuZEJlaGF2aW9yVHlwZTtcbiAgICBzaWxlbmNlRHVyYXRpb24/OiBudW1iZXI7XG4gICAgY3JjPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IHR5cGUgUmF3VHJhY2tJbml0ID0gUGFydGlhbDxPbWl0PFJhd1RyYWNrRGF0YSwgJ2F1dGhvcicgfCAncGxheWxpc3QnIHwgJ3NvdXJjZScgfCAnZW5naW5lJyB8ICdyYXcnIHwgJ3F1ZXJ5VHlwZScgfCAnZGVzY3JpcHRpb24nIHwgJ3ZpZXdzJz4+O1xuXG5leHBvcnQgY2xhc3MgVm9pY2VSZWNlaXZlck5vZGUge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgZGlzcGF0Y2hlcjogU3RyZWFtRGlzcGF0Y2hlcikge31cblxuICAgIHB1YmxpYyBjcmVhdGVSYXdUcmFjayhzdHJlYW06IFJlYWRhYmxlLCBkYXRhOiBSYXdUcmFja0luaXQgPSB7fSkge1xuICAgICAgICBkYXRhLnRpdGxlID8/PSBgUmVjb3JkaW5nICR7RGF0ZS5ub3coKX1gO1xuXG4gICAgICAgIHJldHVybiBuZXcgVHJhY2sodGhpcy5kaXNwYXRjaGVyLnF1ZXVlLnBsYXllciwge1xuICAgICAgICAgICAgYXV0aG9yOiAnRGlzY29yZCcsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogZGF0YS50aXRsZSxcbiAgICAgICAgICAgIHRpdGxlOiBkYXRhLnRpdGxlLFxuICAgICAgICAgICAgZHVyYXRpb246IGRhdGEuZHVyYXRpb24gfHwgJzA6MDAnLFxuICAgICAgICAgICAgdmlld3M6IDAsXG4gICAgICAgICAgICByZXF1ZXN0ZWRCeTogZGF0YS5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgIHRodW1ibmFpbDogZGF0YS50aHVtYm5haWwgfHwgJ2h0dHBzOi8vY2RuLmRpc2NvcmRhcHAuY29tL2VtYmVkL2F2YXRhcnMvMC5wbmcnLFxuICAgICAgICAgICAgdXJsOiBkYXRhLnVybCB8fCAnaHR0cHM6Ly9kaXNjb3JkLmNvbScsXG4gICAgICAgICAgICBzb3VyY2U6ICdhcmJpdHJhcnknLFxuICAgICAgICAgICAgcmF3OiB7XG4gICAgICAgICAgICAgICAgZW5naW5lOiBzdHJlYW0sXG4gICAgICAgICAgICAgICAgc291cmNlOiAnYXJiaXRyYXJ5J1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZSBtdWx0aXBsZSBzdHJlYW1zIHRvZ2V0aGVyXG4gICAgICogQHBhcmFtIHN0cmVhbXMgVGhlIGFycmF5IG9mIHN0cmVhbXMgdG8gbWVyZ2VcbiAgICAgKi9cbiAgICBwdWJsaWMgbWVyZ2VSZWNvcmRpbmdzKHN0cmVhbXM6IFJlYWRhYmxlW10pIHtcbiAgICAgICAgLy8gVE9ET1xuICAgICAgICB2b2lkIHN0cmVhbXM7XG4gICAgICAgIHRocm93IEV4Y2VwdGlvbnMuRVJSX05PVF9JTVBMRU1FTlRFRChgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9Lm1lcmdlUmVjb3JkaW5ncygpYCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjb3JkIGEgdXNlciBpbiB2b2ljZSBjaGFubmVsXG4gICAgICogQHBhcmFtIHVzZXIgVGhlIHVzZXIgdG8gcmVjb3JkXG4gICAgICogQHBhcmFtIG9wdGlvbnMgUmVjb3JkaW5nIG9wdGlvbnNcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVjb3JkVXNlcihcbiAgICAgICAgdXNlcjogVXNlclJlc29sdmFibGUsXG4gICAgICAgIG9wdGlvbnM6IFZvaWNlUmVjZWl2ZXJPcHRpb25zID0ge1xuICAgICAgICAgICAgZW5kOiBFbmRCZWhhdmlvclR5cGUuQWZ0ZXJTaWxlbmNlLFxuICAgICAgICAgICAgbW9kZTogJ3BjbScsXG4gICAgICAgICAgICBzaWxlbmNlRHVyYXRpb246IDEwMDBcbiAgICAgICAgfVxuICAgICkge1xuICAgICAgICBjb25zdCBfdXNlciA9IHRoaXMuZGlzcGF0Y2hlci5xdWV1ZS5wbGF5ZXIuY2xpZW50LnVzZXJzLnJlc29sdmVJZCh1c2VyKTtcblxuICAgICAgICBjb25zdCBwYXNzVGhyb3VnaCA9IG5ldyBQYXNzVGhyb3VnaCgpO1xuICAgICAgICBjb25zdCByZWNlaXZlciA9IHRoaXMuZGlzcGF0Y2hlci52b2ljZUNvbm5lY3Rpb24ucmVjZWl2ZXI7XG5cbiAgICAgICAgaWYgKCFyZWNlaXZlcikgdGhyb3cgRXhjZXB0aW9ucy5FUlJfTk9fUkVDRUlWRVIoKTtcblxuICAgICAgICByZWNlaXZlci5zcGVha2luZy5vbignc3RhcnQnLCAodXNlcklkKSA9PiB7XG4gICAgICAgICAgICBpZiAodXNlcklkID09PSBfdXNlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlY2VpdmVTdHJlYW0gPSByZWNlaXZlci5zdWJzY3JpYmUoX3VzZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgZW5kOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZWhhdmlvcjogb3B0aW9ucy5lbmQgfHwgRW5kQmVoYXZpb3JUeXBlLkFmdGVyU2lsZW5jZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBvcHRpb25zLnNpbGVuY2VEdXJhdGlvbiA/PyAxMDAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHNldEltbWVkaWF0ZShhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm1vZGUgPT09ICdwY20nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwY20gPSByZWNlaXZlU3RyZWFtLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IChwcmlzbS5vcHVzIHx8ICg8YW55PnByaXNtKS5kZWZhdWx0Lm9wdXMpLkRlY29kZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFubmVsczogMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVTaXplOiA5NjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdGU6IDQ4MDAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGNtLnBpcGUocGFzc1Rocm91Z2gpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlY2VpdmVTdHJlYW0ucGlwZShwYXNzVGhyb3VnaCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS51bnJlZigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcGFzc1Rocm91Z2ggYXMgUmVhZGFibGU7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IFF1ZXVlIH0gZnJvbSAnQGRpc2NvcmQtcGxheWVyL3V0aWxzJztcbmltcG9ydCB7IEV4Y2VwdGlvbnMgfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgVHJhY2sgfSBmcm9tICcuLi9mYWJyaWMvVHJhY2snO1xuaW1wb3J0IHsgR3VpbGRRdWV1ZSwgVHJhY2tTa2lwUmVhc29uIH0gZnJvbSAnLi9HdWlsZFF1ZXVlJztcblxuZXhwb3J0IGNsYXNzIEd1aWxkUXVldWVIaXN0b3J5PE1ldGEgPSB1bmtub3duPiB7XG4gICAgcHVibGljIHRyYWNrcyA9IG5ldyBRdWV1ZTxUcmFjaz4oJ0xJRk8nKTtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIHF1ZXVlOiBHdWlsZFF1ZXVlPE1ldGE+KSB7fVxuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCB0cmFjayBpbiB0aGUgcXVldWVcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGN1cnJlbnRUcmFjaygpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgcmV0dXJuIHRoaXMucXVldWUuZGlzcGF0Y2hlcj8uYXVkaW9SZXNvdXJjZT8ubWV0YWRhdGEgfHwgKCh0aGlzLnF1ZXVlIGFzIGFueSkuX19jdXJyZW50IGFzIFRyYWNrIHwgbnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTmV4dCB0cmFjayBpbiB0aGUgcXVldWVcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IG5leHRUcmFjaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucXVldWUudHJhY2tzLmF0KDApIHx8IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJldmlvdXMgdHJhY2sgaW4gdGhlIHF1ZXVlXG4gICAgICovXG4gICAgcHVibGljIGdldCBwcmV2aW91c1RyYWNrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFja3MuYXQoMCkgfHwgbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiBoaXN0b3J5IGlzIGRpc2FibGVkXG4gICAgICovXG4gICAgcHVibGljIGdldCBkaXNhYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucXVldWUub3B0aW9ucy5kaXNhYmxlSGlzdG9yeTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzaXplIG9mIHRoZSBxdWV1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhY2tzLnNpemU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgaGlzdG9yeSBpcyBlbXB0eVxuICAgICAqL1xuICAgIHB1YmxpYyBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFja3Muc2l6ZSA8IDE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIHRyYWNrIHRvIHRyYWNrIGhpc3RvcnlcbiAgICAgKiBAcGFyYW0gdHJhY2sgVGhlIHRyYWNrIHRvIGFkZFxuICAgICAqL1xuICAgIHB1YmxpYyBwdXNoKHRyYWNrOiBUcmFjayB8IFRyYWNrW10pIHtcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdGhpcy50cmFja3MuYWRkKHRyYWNrKTtcblxuICAgICAgICB0aGlzLnJlc2l6ZSgpO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFyIGhpc3RvcnlcbiAgICAgKi9cbiAgICBwdWJsaWMgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMudHJhY2tzLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGxheSB0aGUgbmV4dCB0cmFjayBpbiB0aGUgcXVldWVcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgbmV4dCgpIHtcbiAgICAgICAgY29uc3QgdHJhY2sgPSB0aGlzLm5leHRUcmFjaztcbiAgICAgICAgaWYgKCF0cmFjaykge1xuICAgICAgICAgICAgdGhyb3cgRXhjZXB0aW9ucy5FUlJfTk9fUkVTVUxUKCdObyBuZXh0IHRyYWNrIGluIHRoZSBxdWV1ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5xdWV1ZS5ub2RlLnNraXAoe1xuICAgICAgICAgICAgcmVhc29uOiBUcmFja1NraXBSZWFzb24uSGlzdG9yeU5leHQsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1NraXBwZWQgYnkgR3VpbGRRdWV1ZUhpc3RvcnkubmV4dCgpJ1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQbGF5IHRoZSBwcmV2aW91cyB0cmFjayBpbiB0aGUgcXVldWVcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgcHJldmlvdXMocHJlc2VydmVDdXJyZW50ID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCB0cmFjayA9IHRoaXMudHJhY2tzLmRpc3BhdGNoKCk7XG4gICAgICAgIGlmICghdHJhY2spIHtcbiAgICAgICAgICAgIHRocm93IEV4Y2VwdGlvbnMuRVJSX05PX1JFU1VMVCgnTm8gcHJldmlvdXMgdHJhY2sgaW4gdGhlIHF1ZXVlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5jdXJyZW50VHJhY2s7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5xdWV1ZS5ub2RlLnBsYXkodHJhY2ssIHsgcXVldWU6IGZhbHNlIH0pO1xuICAgICAgICBpZiAoY3VycmVudCAmJiBwcmVzZXJ2ZUN1cnJlbnQpIHRoaXMucXVldWUubm9kZS5pbnNlcnQoY3VycmVudCwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWxpYXMgdG8gW0d1aWxkUXVldWVIaXN0b3J5XS5wcmV2aW91cygpXG4gICAgICovXG4gICAgcHVibGljIGJhY2socHJlc2VydmVDdXJyZW50ID0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmV2aW91cyhwcmVzZXJ2ZUN1cnJlbnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc2l6ZSBoaXN0b3J5IHN0b3JlXG4gICAgICovXG4gICAgcHVibGljIHJlc2l6ZSgpIHtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUodGhpcy5xdWV1ZS5tYXhIaXN0b3J5U2l6ZSkpIHJldHVybjtcbiAgICAgICAgaWYgKHRoaXMudHJhY2tzLnN0b3JlLmxlbmd0aCA8IHRoaXMucXVldWUubWF4SGlzdG9yeVNpemUpIHJldHVybjtcbiAgICAgICAgdGhpcy50cmFja3Muc3RvcmUuc3BsaWNlKHRoaXMucXVldWUubWF4SGlzdG9yeVNpemUpO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBBdWRpb1Jlc291cmNlLCBTdHJlYW1UeXBlIH0gZnJvbSAnZGlzY29yZC12b2lwJztcbmltcG9ydCB7IFJlYWRhYmxlIH0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7IFBsYXllclByb2dyZXNzYmFyT3B0aW9ucywgU2VhcmNoUXVlcnlUeXBlIH0gZnJvbSAnLi4vdHlwZXMvdHlwZXMnO1xuaW1wb3J0IHsgUXVlcnlSZXNvbHZlciB9IGZyb20gJy4uL3V0aWxzL1F1ZXJ5UmVzb2x2ZXInO1xuaW1wb3J0IHsgVXRpbCwgVkFMSURBVEVfUVVFVUVfQ0FQIH0gZnJvbSAnLi4vdXRpbHMvVXRpbCc7XG5pbXBvcnQgeyBUcmFjaywgVHJhY2tSZXNvbHZhYmxlIH0gZnJvbSAnLi4vZmFicmljL1RyYWNrJztcbmltcG9ydCB7IEd1aWxkUXVldWUsIEd1aWxkUXVldWVFdmVudCwgVHJhY2tTa2lwUmVhc29uIH0gZnJvbSAnLi9HdWlsZFF1ZXVlJztcbmltcG9ydCB7IHNldFRpbWVvdXQgYXMgd2FpdEZvciB9IGZyb20gJ3RpbWVycy9wcm9taXNlcyc7XG5pbXBvcnQgeyBBc3luY1F1ZXVlIH0gZnJvbSAnLi4vdXRpbHMvQXN5bmNRdWV1ZSc7XG5pbXBvcnQgeyBFeGNlcHRpb25zIH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7IFR5cGVVdGlsIH0gZnJvbSAnLi4vdXRpbHMvVHlwZVV0aWwnO1xuaW1wb3J0IHsgQ3JlYXRlU3RyZWFtT3BzIH0gZnJvbSAnLi4vVm9pY2VJbnRlcmZhY2UvU3RyZWFtRGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBFeHRyYWN0b3JTdHJlYW1hYmxlIH0gZnJvbSAnLi4vZXh0cmFjdG9ycy9CYXNlRXh0cmFjdG9yJztcbmltcG9ydCAqIGFzIHByaXNtIGZyb20gJ3ByaXNtLW1lZGlhJztcbmltcG9ydCB7IE9wdXNEZWNvZGVyIH0gZnJvbSAnQGRpc2NvcmQtcGxheWVyL29wdXMnO1xuXG5leHBvcnQgY29uc3QgRkZNUEVHX1NSQVRFX1JFR0VYID0gL2FzZXRyYXRlPVxcZCtcXCooXFxkKFxcLlxcZCk/KS87XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzb3VyY2VQbGF5T3B0aW9ucyB7XG4gICAgcXVldWU/OiBib29sZWFuO1xuICAgIHNlZWs/OiBudW1iZXI7XG4gICAgdHJhbnNpdGlvbk1vZGU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNraXBPcHRpb25zIHtcbiAgICByZWFzb246IFRyYWNrU2tpcFJlYXNvbjtcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBsYXllclRpbWVzdGFtcCB7XG4gICAgY3VycmVudDoge1xuICAgICAgICBsYWJlbDogc3RyaW5nO1xuICAgICAgICB2YWx1ZTogbnVtYmVyO1xuICAgIH07XG4gICAgdG90YWw6IHtcbiAgICAgICAgbGFiZWw6IHN0cmluZztcbiAgICAgICAgdmFsdWU6IG51bWJlcjtcbiAgICB9O1xuICAgIHByb2dyZXNzOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RyZWFtQ29uZmlnIHtcbiAgICBkaXNwYXRjaGVyQ29uZmlnOiBDcmVhdGVTdHJlYW1PcHM7XG4gICAgcGxheWVyQ29uZmlnOiBSZXNvdXJjZVBsYXlPcHRpb25zO1xufVxuXG5leHBvcnQgY2xhc3MgR3VpbGRRdWV1ZVBsYXllck5vZGU8TWV0YSA9IHVua25vd24+IHtcbiAgICAjcHJvZ3Jlc3MgPSAwO1xuICAgICNoYXNGRm1wZWdPcHRpbWl6YXRpb24gPSBmYWxzZTtcbiAgICBwdWJsaWMgdGFza3NRdWV1ZSA9IG5ldyBBc3luY1F1ZXVlKCk7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBxdWV1ZTogR3VpbGRRdWV1ZTxNZXRhPikge1xuICAgICAgICB0aGlzLiNoYXNGRm1wZWdPcHRpbWl6YXRpb24gPSAvbGlib3B1czogKHllc3x0cnVlKS8udGVzdCh0aGlzLnF1ZXVlLnBsYXllci5zY2FuRGVwcygpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgcGxheWVyIGlzIGN1cnJlbnRseSBpbiBpZGxlIG1vZGVcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNJZGxlKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLnF1ZXVlLmRpc3BhdGNoZXI/LmlzSWRsZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIHRoZSBwbGF5ZXIgaXMgY3VycmVudGx5IGJ1ZmZlcmluZyB0aGUgdHJhY2tcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNCdWZmZXJpbmcoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMucXVldWUuZGlzcGF0Y2hlcj8uaXNCdWZmZXJpbmcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgcGxheWVyIGlzIGN1cnJlbnRseSBwbGF5aW5nIGEgdHJhY2tcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNQbGF5aW5nKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLnF1ZXVlLmRpc3BhdGNoZXI/LmlzUGxheWluZygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIHRoZSBwbGF5ZXIgaXMgY3VycmVudGx5IHBhdXNlZFxuICAgICAqL1xuICAgIHB1YmxpYyBpc1BhdXNlZCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5xdWV1ZS5kaXNwYXRjaGVyPy5pc1BhdXNlZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc2V0IHByb2dyZXNzIGhpc3RvcnlcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzZXRQcm9ncmVzcygpIHtcbiAgICAgICAgdGhpcy4jcHJvZ3Jlc3MgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCBwbGF5ZXIgcHJvZ3Jlc3NcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0UHJvZ3Jlc3MocHJvZ3Jlc3M6IG51bWJlcikge1xuICAgICAgICB0aGlzLiNwcm9ncmVzcyA9IHByb2dyZXNzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBzdHJlYW0gdGltZSBmb3IgY3VycmVudCBzZXNzaW9uXG4gICAgICovXG4gICAgcHVibGljIGdldCBzdHJlYW1UaW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5xdWV1ZS5kaXNwYXRjaGVyPy5zdHJlYW1UaW1lID8/IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBwbGF5YmFjayBkdXJhdGlvbiB3aXRoIGhpc3RvcnkgaW5jbHVkZWRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHBsYXliYWNrVGltZSgpIHtcbiAgICAgICAgY29uc3QgZHVyID0gdGhpcy4jcHJvZ3Jlc3MgKyB0aGlzLnN0cmVhbVRpbWU7XG5cbiAgICAgICAgcmV0dXJuIGR1cjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgZHVyYXRpb24gbXVsdGlwbGllclxuICAgICAqL1xuICAgIHB1YmxpYyBnZXREdXJhdGlvbk11bHRpcGxpZXIoKSB7XG4gICAgICAgIGNvbnN0IHNyYXRlRmlsdGVycyA9IHRoaXMucXVldWUuZmlsdGVycy5mZm1wZWcudG9BcnJheSgpLmZpbHRlcigoZmYpID0+IEZGTVBFR19TUkFURV9SRUdFWC50ZXN0KGZmKSk7XG4gICAgICAgIGNvbnN0IG11bHRpcGxpZXJzID0gc3JhdGVGaWx0ZXJzXG4gICAgICAgICAgICAubWFwKChtKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoRkZNUEVHX1NSQVRFX1JFR0VYLmV4ZWMobSk/LlsxXSBhcyBzdHJpbmcpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5maWx0ZXIoKGYpID0+ICFpc05hTihmKSk7XG5cbiAgICAgICAgcmV0dXJuICFtdWx0aXBsaWVycy5sZW5ndGggPyAxIDogbXVsdGlwbGllcnMucmVkdWNlKChhY2N1bXVsYXRvciwgY3VycmVudCkgPT4gY3VycmVudCArIGFjY3VtdWxhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc3RpbWF0ZWQgcHJvZ3Jlc3Mgb2YgdGhlIHBsYXllclxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgZXN0aW1hdGVkUGxheWJhY2tUaW1lKCkge1xuICAgICAgICBjb25zdCBkdXIgPSB0aGlzLnBsYXliYWNrVGltZTtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodGhpcy5nZXREdXJhdGlvbk11bHRpcGxpZXIoKSAqIGR1cik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXN0aW1hdGVkIHRvdGFsIGR1cmF0aW9uIG9mIHRoZSBwbGF5ZXJcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGVzdGltYXRlZER1cmF0aW9uKCkge1xuICAgICAgICBjb25zdCBkdXIgPSB0aGlzLnRvdGFsRHVyYXRpb247XG5cbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoZHVyIC8gdGhpcy5nZXREdXJhdGlvbk11bHRpcGxpZXIoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVG90YWwgZHVyYXRpb24gb2YgdGhlIGN1cnJlbnQgYXVkaW8gdHJhY2tcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHRvdGFsRHVyYXRpb24oKSB7XG4gICAgICAgIGNvbnN0IHByZWZlcnNCcmlkZ2VkTWV0YWRhdGEgPSB0aGlzLnF1ZXVlLm9wdGlvbnMucHJlZmVyQnJpZGdlZE1ldGFkYXRhO1xuICAgICAgICBjb25zdCB0cmFjayA9IHRoaXMucXVldWUuY3VycmVudFRyYWNrO1xuXG4gICAgICAgIGlmIChwcmVmZXJzQnJpZGdlZE1ldGFkYXRhICYmIHRyYWNrPy5tZXRhZGF0YSAhPSBudWxsICYmIHR5cGVvZiB0cmFjay5tZXRhZGF0YSA9PT0gJ29iamVjdCcgJiYgJ2JyaWRnZScgaW4gdHJhY2subWV0YWRhdGEgJiYgdHJhY2subWV0YWRhdGEuYnJpZGdlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGR1cmF0aW9uID0gKFxuICAgICAgICAgICAgICAgIHRyYWNrIGFzIFRyYWNrPHtcbiAgICAgICAgICAgICAgICAgICAgYnJpZGdlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogbnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0+XG4gICAgICAgICAgICApLm1ldGFkYXRhPy5icmlkZ2UuZHVyYXRpb247XG5cbiAgICAgICAgICAgIGlmIChUeXBlVXRpbC5pc051bWJlcihkdXJhdGlvbikpIHJldHVybiBkdXJhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cmFjaz8uZHVyYXRpb25NUyA/PyAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBzdHJlYW0gcHJvZ3Jlc3NcbiAgICAgKiBAcGFyYW0gaWdub3JlRmlsdGVycyBJZ25vcmUgZmlsdGVyc1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRUaW1lc3RhbXAoaWdub3JlRmlsdGVycyA9IGZhbHNlKTogUGxheWVyVGltZXN0YW1wIHwgbnVsbCB7XG4gICAgICAgIGlmICghdGhpcy5xdWV1ZS5jdXJyZW50VHJhY2spIHJldHVybiBudWxsO1xuXG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBpZ25vcmVGaWx0ZXJzID8gdGhpcy5wbGF5YmFja1RpbWUgOiB0aGlzLmVzdGltYXRlZFBsYXliYWNrVGltZTtcbiAgICAgICAgY29uc3QgdG90YWwgPSBpZ25vcmVGaWx0ZXJzID8gdGhpcy50b3RhbER1cmF0aW9uIDogdGhpcy5lc3RpbWF0ZWREdXJhdGlvbjtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3VycmVudDoge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBVdGlsLmJ1aWxkVGltZUNvZGUoVXRpbC5wYXJzZU1TKGN1cnJlbnQpKSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogY3VycmVudFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvdGFsOiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFV0aWwuYnVpbGRUaW1lQ29kZShVdGlsLnBhcnNlTVModG90YWwpKSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdG90YWxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9ncmVzczogTWF0aC5yb3VuZCgoY3VycmVudCAvIHRvdGFsKSAqIDEwMClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgcHJvZ3Jlc3MgYmFyIGZvciBjdXJyZW50IHByb2dyZXNzXG4gICAgICogQHBhcmFtIG9wdGlvbnMgUHJvZ3Jlc3MgYmFyIG9wdGlvbnNcbiAgICAgKi9cbiAgICBwdWJsaWMgY3JlYXRlUHJvZ3Jlc3NCYXIob3B0aW9ucz86IFBsYXllclByb2dyZXNzYmFyT3B0aW9ucykge1xuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSB0aGlzLmdldFRpbWVzdGFtcCgpO1xuICAgICAgICBpZiAoIXRpbWVzdGFtcCkgcmV0dXJuIG51bGw7XG4gICAgICAgIGNvbnN0IHsgaW5kaWNhdG9yID0gJ1xcdXsxRjUxOH0nLCBsZWZ0Q2hhciA9ICdcXHUyNUFDJywgcmlnaHRDaGFyID0gJ1xcdTI1QUMnLCBsZW5ndGggPSAxNSwgdGltZWNvZGVzID0gdHJ1ZSwgc2VwYXJhdG9yID0gJ1xcdTI1MDMnIH0gPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBpZiAoaXNOYU4obGVuZ3RoKSB8fCBsZW5ndGggPCAwIHx8ICFOdW1iZXIuaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgICAgICAgdGhyb3cgRXhjZXB0aW9ucy5FUlJfT1VUX09GX1JBTkdFKCdbUGxheWVyUHJvZ3Jlc3NCYXJPcHRpb25zLmxlbmd0aF0nLCBTdHJpbmcobGVuZ3RoKSwgJzAnLCAnRmluaXRlIE51bWJlcicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluZGV4ID0gTWF0aC5yb3VuZCgodGltZXN0YW1wLmN1cnJlbnQudmFsdWUgLyB0aW1lc3RhbXAudG90YWwudmFsdWUpICogbGVuZ3RoKTtcbiAgICAgICAgaWYgKGluZGV4ID49IDEgJiYgaW5kZXggPD0gbGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBiYXIgPSBsZWZ0Q2hhci5yZXBlYXQoaW5kZXggLSAxKS5zcGxpdCgnJyk7XG4gICAgICAgICAgICBiYXIucHVzaChpbmRpY2F0b3IpO1xuICAgICAgICAgICAgYmFyLnB1c2gocmlnaHRDaGFyLnJlcGVhdChsZW5ndGggLSBpbmRleCkpO1xuICAgICAgICAgICAgaWYgKHRpbWVjb2Rlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHt0aW1lc3RhbXAuY3VycmVudC5sYWJlbH0gJHtzZXBhcmF0b3J9ICR7YmFyLmpvaW4oJycpfSAke3NlcGFyYXRvcn0gJHt0aW1lc3RhbXAudG90YWwubGFiZWx9YDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke2Jhci5qb2luKCcnKX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRpbWVjb2Rlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHt0aW1lc3RhbXAuY3VycmVudC5sYWJlbH0gJHtzZXBhcmF0b3J9ICR7aW5kaWNhdG9yfSR7cmlnaHRDaGFyLnJlcGVhdChsZW5ndGggLSAxKX0gJHtzZXBhcmF0b3J9ICR7dGltZXN0YW1wLnRvdGFsLmxhYmVsfWA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHtpbmRpY2F0b3J9JHtyaWdodENoYXIucmVwZWF0KGxlbmd0aCAtIDEpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZWVrIHRoZSBwbGF5ZXJcbiAgICAgKiBAcGFyYW0gZHVyYXRpb24gVGhlIGR1cmF0aW9uIHRvIHNlZWsgdG9cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgc2VlayhkdXJhdGlvbjogbnVtYmVyKSB7XG4gICAgICAgIGlmICghdGhpcy5xdWV1ZS5jdXJyZW50VHJhY2spIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGR1cmF0aW9uID09PSB0aGlzLmVzdGltYXRlZFBsYXliYWNrVGltZSkgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmIChkdXJhdGlvbiA+IHRoaXMudG90YWxEdXJhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2tpcCh7XG4gICAgICAgICAgICAgICAgcmVhc29uOiBUcmFja1NraXBSZWFzb24uU0VFS19PVkVSX1RIUkVTSE9MRCxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogRXhjZXB0aW9ucy5FUlJfT1VUX09GX1JBTkdFKCdbZHVyYXRpb25dJywgU3RyaW5nKGR1cmF0aW9uKSwgJzAnLCBTdHJpbmcodGhpcy50b3RhbER1cmF0aW9uKSkubWVzc2FnZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGR1cmF0aW9uIDwgMCkgZHVyYXRpb24gPSAwO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5xdWV1ZS5maWx0ZXJzLnRyaWdnZXJSZXBsYXkoZHVyYXRpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgdm9sdW1lXG4gICAgICovXG4gICAgcHVibGljIGdldCB2b2x1bWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXVlLmRpc3BhdGNoZXI/LnZvbHVtZSA/PyAxMDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHZvbHVtZVxuICAgICAqIEBwYXJhbSB2b2wgVm9sdW1lIGFtb3VudCB0byBzZXRcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0Vm9sdW1lKHZvbDogbnVtYmVyKSB7XG4gICAgICAgIGlmICghdGhpcy5xdWV1ZS5kaXNwYXRjaGVyKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IHJlcyA9IHRoaXMucXVldWUuZGlzcGF0Y2hlci5zZXRWb2x1bWUodm9sKTtcbiAgICAgICAgaWYgKHJlcykgdGhpcy5xdWV1ZS5maWx0ZXJzLl9sYXN0RmlsdGVyc0NhY2hlLnZvbHVtZSA9IHZvbDtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgYml0IHJhdGVcbiAgICAgKiBAcGFyYW0gcmF0ZSBUaGUgYml0IHJhdGUgdG8gc2V0XG4gICAgICovXG4gICAgcHVibGljIHNldEJpdHJhdGUocmF0ZTogbnVtYmVyIHwgJ2F1dG8nKSB7XG4gICAgICAgIHRoaXMucXVldWUuZGlzcGF0Y2hlcj8uYXVkaW9SZXNvdXJjZT8uZW5jb2Rlcj8uc2V0Qml0cmF0ZShyYXRlID09PSAnYXV0bycgPyB0aGlzLnF1ZXVlLmNoYW5uZWw/LmJpdHJhdGUgPz8gNjQwMDAgOiByYXRlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgcGF1c2VkIHN0YXRlXG4gICAgICogQHBhcmFtIHN0YXRlIFRoZSBzdGF0ZVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRQYXVzZWQoc3RhdGU6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHN0YXRlKSByZXR1cm4gdGhpcy5xdWV1ZS5kaXNwYXRjaGVyPy5wYXVzZSh0cnVlKSB8fCBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXMucXVldWUuZGlzcGF0Y2hlcj8ucmVzdW1lKCkgfHwgZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGF1c2UgdGhlIHBsYXliYWNrXG4gICAgICovXG4gICAgcHVibGljIHBhdXNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRQYXVzZWQodHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzdW1lIHRoZSBwbGF5YmFja1xuICAgICAqL1xuICAgIHB1YmxpYyByZXN1bWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldFBhdXNlZChmYWxzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2tpcCBjdXJyZW50IHRyYWNrXG4gICAgICovXG4gICAgcHVibGljIHNraXAob3B0aW9ucz86IFNraXBPcHRpb25zKSB7XG4gICAgICAgIGlmICghdGhpcy5xdWV1ZS5kaXNwYXRjaGVyKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IHRyYWNrID0gdGhpcy5xdWV1ZS5jdXJyZW50VHJhY2s7XG4gICAgICAgIGlmICghdHJhY2spIHJldHVybiBmYWxzZTtcbiAgICAgICAgdGhpcy5xdWV1ZS5zZXRUcmFuc2l0aW9uaW5nKGZhbHNlKTtcbiAgICAgICAgdGhpcy5xdWV1ZS5kaXNwYXRjaGVyLmVuZCgpO1xuICAgICAgICBjb25zdCB7IHJlYXNvbiwgZGVzY3JpcHRpb24gfSA9IG9wdGlvbnMgfHwge1xuICAgICAgICAgICAgcmVhc29uOiBUcmFja1NraXBSZWFzb24uTWFudWFsLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgdHJhY2sgd2FzIHNraXBwZWQgbWFudWFsbHknXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucXVldWUuZW1pdChHdWlsZFF1ZXVlRXZlbnQucGxheWVyU2tpcCwgdGhpcy5xdWV1ZSwgdHJhY2ssIHJlYXNvbiwgZGVzY3JpcHRpb24pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIGdpdmVuIHRyYWNrIGZyb20gcXVldWVcbiAgICAgKiBAcGFyYW0gdHJhY2sgVGhlIHRyYWNrIHRvIHJlbW92ZVxuICAgICAqIEBwYXJhbSBlbWl0RXZlbnQgV2hldGhlciBvciBub3QgdG8gZW1pdCB0aGUgZXZlbnQgQGRlZmF1bHRWYWx1ZSB0cnVlXG4gICAgICovXG4gICAgcHVibGljIHJlbW92ZSh0cmFjazogVHJhY2tSZXNvbHZhYmxlLCBlbWl0RXZlbnQgPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGZvdW5kVHJhY2sgPSB0aGlzLnF1ZXVlLnRyYWNrcy5maW5kKCh0LCBpZHgpID0+IHtcbiAgICAgICAgICAgIGlmICh0cmFjayBpbnN0YW5jZW9mIFRyYWNrIHx8IHR5cGVvZiB0cmFjayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHR5cGVvZiB0cmFjayA9PT0gJ3N0cmluZycgPyB0cmFjayA6IHRyYWNrLmlkKSA9PT0gdC5pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdHJhY2sgPT09ICdzdHJpbmcnKSByZXR1cm4gdHJhY2sgPT09IHQuaWQ7XG4gICAgICAgICAgICByZXR1cm4gaWR4ID09PSB0cmFjaztcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghZm91bmRUcmFjaykgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgdGhpcy5xdWV1ZS50cmFja3MucmVtb3ZlT25lKCh0KSA9PiB0LmlkID09PSBmb3VuZFRyYWNrLmlkKTtcblxuICAgICAgICBpZiAoZW1pdEV2ZW50KSB0aGlzLnF1ZXVlLmVtaXQoR3VpbGRRdWV1ZUV2ZW50LmF1ZGlvVHJhY2tSZW1vdmUsIHRoaXMucXVldWUsIGZvdW5kVHJhY2spO1xuXG4gICAgICAgIHJldHVybiBmb3VuZFRyYWNrO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEp1bXAgdG8gc3BlY2lmaWMgdHJhY2sgb24gdGhlIHF1ZXVlXG4gICAgICogQHBhcmFtIHRyYWNrIFRoZSB0cmFjayB0byBqdW1wIHRvIHdpdGhvdXQgcmVtb3Zpbmcgb3RoZXIgdHJhY2tzXG4gICAgICovXG4gICAgcHVibGljIGp1bXAodHJhY2s6IFRyYWNrUmVzb2x2YWJsZSkge1xuICAgICAgICBjb25zdCByZW1vdmVkID0gdGhpcy5yZW1vdmUodHJhY2ssIGZhbHNlKTtcbiAgICAgICAgaWYgKCFyZW1vdmVkKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHRoaXMucXVldWUudHJhY2tzLnN0b3JlLnVuc2hpZnQocmVtb3ZlZCk7XG4gICAgICAgIHJldHVybiB0aGlzLnNraXAoe1xuICAgICAgICAgICAgcmVhc29uOiBUcmFja1NraXBSZWFzb24uSnVtcCxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnVGhlIHRyYWNrIHdhcyBqdW1wZWQgdG8gbWFudWFsbHknXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0cmFjayBwb3NpdGlvblxuICAgICAqIEBwYXJhbSB0cmFjayBUaGUgdHJhY2tcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VHJhY2tQb3NpdGlvbih0cmFjazogVHJhY2tSZXNvbHZhYmxlKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucXVldWUudHJhY2tzLnRvQXJyYXkoKS5maW5kSW5kZXgoKHQsIGlkeCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRyYWNrIGluc3RhbmNlb2YgVHJhY2sgfHwgdHlwZW9mIHRyYWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiAodHlwZW9mIHRyYWNrID09PSAnc3RyaW5nJyA/IHRyYWNrIDogdHJhY2suaWQpID09PSB0LmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0cmFjayA9PT0gJ3N0cmluZycpIHJldHVybiB0cmFjayA9PT0gdC5pZDtcbiAgICAgICAgICAgIHJldHVybiBpZHggPT09IHRyYWNrO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTa2lwIHRvIHRoZSBnaXZlbiB0cmFjaywgcmVtb3Zpbmcgb3RoZXJzIG9uIHRoZSB3YXlcbiAgICAgKiBAcGFyYW0gdHJhY2sgVGhlIHRyYWNrIHRvIHNraXAgdG9cbiAgICAgKi9cbiAgICBwdWJsaWMgc2tpcFRvKHRyYWNrOiBUcmFja1Jlc29sdmFibGUpIHtcbiAgICAgICAgY29uc3QgaWR4ID0gdGhpcy5nZXRUcmFja1Bvc2l0aW9uKHRyYWNrKTtcbiAgICAgICAgaWYgKGlkeCA8IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgcmVtb3ZlZCA9IHRoaXMucmVtb3ZlKGlkeCk7XG4gICAgICAgIGlmICghcmVtb3ZlZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCB0b1JlbW92ZSA9IHRoaXMucXVldWUudHJhY2tzLnN0b3JlLmZpbHRlcigoXywgaSkgPT4gaSA8PSBpZHgpO1xuICAgICAgICB0aGlzLnF1ZXVlLnRyYWNrcy5zdG9yZS5zcGxpY2UoMCwgaWR4LCByZW1vdmVkKTtcbiAgICAgICAgdGhpcy5xdWV1ZS5lbWl0KEd1aWxkUXVldWVFdmVudC5hdWRpb1RyYWNrc1JlbW92ZSwgdGhpcy5xdWV1ZSwgdG9SZW1vdmUpO1xuICAgICAgICByZXR1cm4gdGhpcy5za2lwKHtcbiAgICAgICAgICAgIHJlYXNvbjogVHJhY2tTa2lwUmVhc29uLlNraXBUbyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnVGhlIHBsYXllciB3YXMgc2tpcHBlZCB0byBhbm90aGVyIHRyYWNrIG1hbnVhbGx5J1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgYSB0cmFjayBvbiB0aGUgZ2l2ZW4gcG9zaXRpb24gaW4gcXVldWVcbiAgICAgKiBAcGFyYW0gdHJhY2sgVGhlIHRyYWNrIHRvIGluc2VydFxuICAgICAqIEBwYXJhbSBpbmRleCBUaGUgcG9zaXRpb24gdG8gaW5zZXJ0IHRvLCBkZWZhdWx0cyB0byAwLlxuICAgICAqL1xuICAgIHB1YmxpYyBpbnNlcnQodHJhY2s6IFRyYWNrLCBpbmRleCA9IDApIHtcbiAgICAgICAgaWYgKCEodHJhY2sgaW5zdGFuY2VvZiBUcmFjaykpIHRocm93IEV4Y2VwdGlvbnMuRVJSX0lOVkFMSURfQVJHX1RZUEUoJ3RyYWNrIHZhbHVlJywgJ2luc3RhbmNlIG9mIFRyYWNrJywgU3RyaW5nKHRyYWNrKSk7XG4gICAgICAgIFZBTElEQVRFX1FVRVVFX0NBUCh0aGlzLnF1ZXVlLCB0cmFjayk7XG4gICAgICAgIHRoaXMucXVldWUudHJhY2tzLnN0b3JlLnNwbGljZShpbmRleCwgMCwgdHJhY2spO1xuICAgICAgICBpZiAoIXRoaXMucXVldWUub3B0aW9ucy5ub0VtaXRJbnNlcnQpIHRoaXMucXVldWUuZW1pdChHdWlsZFF1ZXVlRXZlbnQuYXVkaW9UcmFja0FkZCwgdGhpcy5xdWV1ZSwgdHJhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1vdmVzIGEgdHJhY2sgaW4gdGhlIHF1ZXVlXG4gICAgICogQHBhcmFtIGZyb20gVGhlIHRyYWNrIHRvIG1vdmVcbiAgICAgKiBAcGFyYW0gdG8gVGhlIHBvc2l0aW9uIHRvIG1vdmUgdG9cbiAgICAgKi9cbiAgICBwdWJsaWMgbW92ZShmcm9tOiBUcmFja1Jlc29sdmFibGUsIHRvOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgcmVtb3ZlZCA9IHRoaXMucmVtb3ZlKGZyb20pO1xuICAgICAgICBpZiAoIXJlbW92ZWQpIHtcbiAgICAgICAgICAgIHRocm93IEV4Y2VwdGlvbnMuRVJSX05PX1JFU1VMVCgnaW52YWxpZCB0cmFjayB0byBtb3ZlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnNlcnQocmVtb3ZlZCwgdG8pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcHkgYSB0cmFjayBpbiB0aGUgcXVldWVcbiAgICAgKiBAcGFyYW0gZnJvbSBUaGUgdHJhY2sgdG8gY2xvbmVcbiAgICAgKiBAcGFyYW0gdG8gVGhlIHBvc2l0aW9uIHRvIGNsb25lIGF0XG4gICAgICovXG4gICAgcHVibGljIGNvcHkoZnJvbTogVHJhY2tSZXNvbHZhYmxlLCB0bzogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHNyYyA9IHRoaXMucXVldWUudHJhY2tzLmF0KHRoaXMuZ2V0VHJhY2tQb3NpdGlvbihmcm9tKSk7XG4gICAgICAgIGlmICghc3JjKSB7XG4gICAgICAgICAgICB0aHJvdyBFeGNlcHRpb25zLkVSUl9OT19SRVNVTFQoJ2ludmFsaWQgdHJhY2sgdG8gY29weScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5zZXJ0KHNyYywgdG8pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN3YXAgdHdvIHRyYWNrcyBpbiB0aGUgcXVldWVcbiAgICAgKiBAcGFyYW0gZmlyc3QgVGhlIGZpcnN0IHRyYWNrIHRvIHN3YXBcbiAgICAgKiBAcGFyYW0gc2Vjb25kIFRoZSBzZWNvbmQgdHJhY2sgdG8gc3dhcFxuICAgICAqL1xuICAgIHB1YmxpYyBzd2FwKGZpcnN0OiBUcmFja1Jlc29sdmFibGUsIHNlY29uZDogVHJhY2tSZXNvbHZhYmxlKSB7XG4gICAgICAgIGNvbnN0IHNyYyA9IHRoaXMuZ2V0VHJhY2tQb3NpdGlvbihmaXJzdCk7XG4gICAgICAgIGlmIChzcmMgPCAwKSB0aHJvdyBFeGNlcHRpb25zLkVSUl9OT19SRVNVTFQoJ2ludmFsaWQgc3JjIHRyYWNrIHRvIHN3YXAnKTtcblxuICAgICAgICBjb25zdCBkZXN0ID0gdGhpcy5nZXRUcmFja1Bvc2l0aW9uKHNlY29uZCk7XG4gICAgICAgIGlmIChkZXN0IDwgMCkgdGhyb3cgRXhjZXB0aW9ucy5FUlJfTk9fUkVTVUxUKCdpbnZhbGlkIGRlc3QgdHJhY2sgdG8gc3dhcCcpO1xuXG4gICAgICAgIGNvbnN0IHNyY1QgPSB0aGlzLnF1ZXVlLnRyYWNrcy5zdG9yZVtzcmNdO1xuICAgICAgICBjb25zdCBkZXN0VCA9IHRoaXMucXVldWUudHJhY2tzLnN0b3JlW2Rlc3RdO1xuXG4gICAgICAgIHRoaXMucXVldWUudHJhY2tzLnN0b3JlW3NyY10gPSBkZXN0VDtcbiAgICAgICAgdGhpcy5xdWV1ZS50cmFja3Muc3RvcmVbZGVzdF0gPSBzcmNUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0b3AgdGhlIHBsYXliYWNrXG4gICAgICogQHBhcmFtIGZvcmNlIFdoZXRoZXIgb3Igbm90IHRvIGZvcmNlZnVsbHkgc3RvcCB0aGUgcGxheWJhY2tcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RvcChmb3JjZSA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMucXVldWUudHJhY2tzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMucXVldWUuaGlzdG9yeS5jbGVhcigpO1xuICAgICAgICBpZiAoIXRoaXMucXVldWUuZGlzcGF0Y2hlcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICB0aGlzLnF1ZXVlLmRpc3BhdGNoZXIuZW5kKCk7XG4gICAgICAgIGlmIChmb3JjZSkge1xuICAgICAgICAgICAgdGhpcy5xdWV1ZS5kaXNwYXRjaGVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnF1ZXVlLm9wdGlvbnMubGVhdmVPblN0b3ApIHtcbiAgICAgICAgICAgIGNvbnN0IHRtOiBOb2RlSlMuVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzUGxheWluZygpIHx8IHRoaXMucXVldWUudHJhY2tzLnNpemUpIHJldHVybiBjbGVhclRpbWVvdXQodG0pO1xuICAgICAgICAgICAgICAgIHRoaXMucXVldWUuZGlzcGF0Y2hlcj8uZGVzdHJveSgpO1xuICAgICAgICAgICAgfSwgdGhpcy5xdWV1ZS5vcHRpb25zLmxlYXZlT25TdG9wQ29vbGRvd24pLnVucmVmKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGxheSByYXcgYXVkaW8gcmVzb3VyY2VcbiAgICAgKiBAcGFyYW0gcmVzb3VyY2UgVGhlIGF1ZGlvIHJlc291cmNlIHRvIHBsYXlcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgcGxheVJhdyhyZXNvdXJjZTogQXVkaW9SZXNvdXJjZSkge1xuICAgICAgICBhd2FpdCB0aGlzLnF1ZXVlLmRpc3BhdGNoZXI/LnBsYXlTdHJlYW0ocmVzb3VyY2UgYXMgQXVkaW9SZXNvdXJjZTxUcmFjaz4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBsYXkgdGhlIGdpdmVuIHRyYWNrXG4gICAgICogQHBhcmFtIHJlcyBUaGUgdHJhY2sgdG8gcGxheVxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIHBsYXlpbmcgdGhlIHRyYWNrXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIHBsYXkocmVzPzogVHJhY2sgfCBudWxsLCBvcHRpb25zPzogUmVzb3VyY2VQbGF5T3B0aW9ucykge1xuICAgICAgICBpZiAoIXRoaXMucXVldWUuZGlzcGF0Y2hlcj8udm9pY2VDb25uZWN0aW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBFeGNlcHRpb25zLkVSUl9OT19WT0lDRV9DT05ORUNUSU9OKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5xdWV1ZS5oYXNEZWJ1Z2dlcikgdGhpcy5xdWV1ZS5kZWJ1ZyhgUmVjZWl2ZWQgcGxheSByZXF1ZXN0IGZyb20gZ3VpbGQgJHt0aGlzLnF1ZXVlLmd1aWxkLm5hbWV9IChJRDogJHt0aGlzLnF1ZXVlLmd1aWxkLmlkfSlgKTtcblxuICAgICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHF1ZXVlOiB0aGlzLnF1ZXVlLmN1cnJlbnRUcmFjayAhPSBudWxsLFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25Nb2RlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzZWVrOiAwXG4gICAgICAgICAgICB9IGFzIFJlc291cmNlUGxheU9wdGlvbnMsXG4gICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICkhO1xuXG4gICAgICAgIGlmIChyZXMgJiYgb3B0aW9ucy5xdWV1ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucXVldWUuaGFzRGVidWdnZXIpIHRoaXMucXVldWUuZGVidWcoJ1JlcXVlc3RlZCBvcHRpb24gcmVxdWlyZXMgdG8gcXVldWUgdGhlIHRyYWNrLCBhZGRpbmcgdGhlIGdpdmVuIHRyYWNrIHRvIHF1ZXVlIGluc3RlYWQuLi4nKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnF1ZXVlLmFkZFRyYWNrKHJlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0cmFjayA9IHJlcyB8fCB0aGlzLnF1ZXVlLnRyYWNrcy5kaXNwYXRjaCgpO1xuICAgICAgICBpZiAoIXRyYWNrKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IEV4Y2VwdGlvbnMuRVJSX05PX1JFU1VMVCgnUGxheSByZXF1ZXN0IHJlY2VpdmVkIGJ1dCB0cmFjayB3YXMgbm90IHByb3ZpZGVkJyk7XG4gICAgICAgICAgICB0aGlzLnF1ZXVlLmVtaXQoR3VpbGRRdWV1ZUV2ZW50LmVycm9yLCB0aGlzLnF1ZXVlLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5xdWV1ZS5oYXNEZWJ1Z2dlcikgdGhpcy5xdWV1ZS5kZWJ1ZygnUmVxdWVzdGVkIG9wdGlvbiByZXF1aXJlcyB0byBwbGF5IHRoZSB0cmFjaywgaW5pdGlhbGl6aW5nLi4uJyk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnF1ZXVlLmhhc0RlYnVnZ2VyKSB0aGlzLnF1ZXVlLmRlYnVnKGBJbml0aWF0aW5nIHN0cmVhbSBleHRyYWN0aW9uIHByb2Nlc3MuLi5gKTtcbiAgICAgICAgICAgIGNvbnN0IHNyYyA9IHRyYWNrLnJhdz8uc291cmNlIHx8IHRyYWNrLnNvdXJjZTtcbiAgICAgICAgICAgIGNvbnN0IHF0OiBTZWFyY2hRdWVyeVR5cGUgPSB0cmFjay5xdWVyeVR5cGUgfHwgKHNyYyA9PT0gJ3Nwb3RpZnknID8gJ3Nwb3RpZnlTb25nJyA6IHNyYyA9PT0gJ2FwcGxlX211c2ljJyA/ICdhcHBsZU11c2ljU29uZycgOiBzcmMpO1xuICAgICAgICAgICAgaWYgKHRoaXMucXVldWUuaGFzRGVidWdnZXIpIHRoaXMucXVldWUuZGVidWcoYEV4ZWN1dGluZyBvbkJlZm9yZUNyZWF0ZVN0cmVhbSBob29rIChRdWVyeVR5cGU6ICR7cXR9KS4uLmApO1xuXG4gICAgICAgICAgICBjb25zdCBzdHJlYW1TcmMgPSB7XG4gICAgICAgICAgICAgICAgZXJyb3I6IG51bGwgYXMgRXJyb3IgfCBudWxsLFxuICAgICAgICAgICAgICAgIHN0cmVhbTogbnVsbCBhcyBFeHRyYWN0b3JTdHJlYW1hYmxlIHwgbnVsbFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5xdWV1ZS5vbkJlZm9yZUNyZWF0ZVN0cmVhbT8uKHRyYWNrLCBxdCB8fCAnYXJiaXRyYXJ5JywgdGhpcy5xdWV1ZSkudGhlbihcbiAgICAgICAgICAgICAgICAocykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtU3JjLnN0cmVhbSA9IHM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIChlOiBFcnJvcikgPT4gKHN0cmVhbVNyYy5lcnJvciA9IGUpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyB0aHJvdyBpZiAnb25CZWZvcmVDcmVhdGVTdHJlYW0nIHBhbmljc1xuICAgICAgICAgICAgaWYgKCFzdHJlYW1TcmMuc3RyZWFtICYmIHN0cmVhbVNyYy5lcnJvcikgcmV0dXJuIHRoaXMuI3Rocm93KHRyYWNrLCBzdHJlYW1TcmMuZXJyb3IpO1xuXG4gICAgICAgICAgICAvLyBkZWZhdWx0IGJlaGF2aW9yIHdoZW4gJ29uQmVmb3JlQ3JlYXRlU3RyZWFtJyBkaWQgbm90IHBhbmljXG4gICAgICAgICAgICBpZiAoIXN0cmVhbVNyYy5zdHJlYW0pIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5xdWV1ZS5oYXNEZWJ1Z2dlcikgdGhpcy5xdWV1ZS5kZWJ1ZygnRmFpbGVkIHRvIGdldCBzdHJlYW0gZnJvbSBvbkJlZm9yZUNyZWF0ZVN0cmVhbSEnKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLiNjcmVhdGVHZW5lcmljU3RyZWFtKHRyYWNrKS50aGVuKFxuICAgICAgICAgICAgICAgICAgICAocikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHI/LnJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbVNyYy5zdHJlYW0gPSA8UmVhZGFibGU+ci5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocj8uZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1TcmMuZXJyb3IgPSByLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtU3JjLnN0cmVhbSA9IHN0cmVhbVNyYy5lcnJvciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIChlOiBFcnJvcikgPT4gKHN0cmVhbVNyYy5lcnJvciA9IGUpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFzdHJlYW1TcmMuc3RyZWFtKSByZXR1cm4gdGhpcy4jdGhyb3codHJhY2ssIHN0cmVhbVNyYy5lcnJvcik7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5zZWVrID09PSAnbnVtYmVyJyAmJiBvcHRpb25zLnNlZWsgPj0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuI3Byb2dyZXNzID0gb3B0aW9ucy5zZWVrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLiNwcm9ncmVzcyA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICBjb25zdCBjb29raWVzID0gdHJhY2sucmF3Py5zb3VyY2UgPT09ICd5b3V0dWJlJyA/ICg8YW55PnRoaXMucXVldWUucGxheWVyLm9wdGlvbnMueXRkbE9wdGlvbnM/LnJlcXVlc3RPcHRpb25zKT8uaGVhZGVycz8uY29va2llIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICBjb25zdCB0cmFja1N0cmVhbUNvbmZpZzogU3RyZWFtQ29uZmlnID0ge1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoZXJDb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZUJpcXVhZDogdGhpcy5xdWV1ZS5vcHRpb25zLmRpc2FibGVCaXF1YWQsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVFcXVhbGl6ZXI6IHRoaXMucXVldWUub3B0aW9ucy5kaXNhYmxlRXF1YWxpemVyLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlVm9sdW1lOiB0aGlzLnF1ZXVlLm9wdGlvbnMuZGlzYWJsZVZvbHVtZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZUZpbHRlcnM6IHRoaXMucXVldWUub3B0aW9ucy5kaXNhYmxlRmlsdGVyZXIsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVSZXNhbXBsZXI6IHRoaXMucXVldWUub3B0aW9ucy5kaXNhYmxlUmVzYW1wbGVyLFxuICAgICAgICAgICAgICAgICAgICBzYW1wbGVSYXRlOiB0eXBlb2YgdGhpcy5xdWV1ZS5vcHRpb25zLnJlc2FtcGxlciA9PT0gJ251bWJlcicgJiYgdGhpcy5xdWV1ZS5vcHRpb25zLnJlc2FtcGxlciA+IDAgPyB0aGlzLnF1ZXVlLm9wdGlvbnMucmVzYW1wbGVyIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBiaXF1YWRGaWx0ZXI6IHRoaXMucXVldWUuZmlsdGVycy5fbGFzdEZpbHRlcnNDYWNoZS5iaXF1YWQgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBlcTogdGhpcy5xdWV1ZS5maWx0ZXJzLl9sYXN0RmlsdGVyc0NhY2hlLmVxdWFsaXplcixcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdEZpbHRlcnM6IHRoaXMucXVldWUuZmlsdGVycy5fbGFzdEZpbHRlcnNDYWNoZS5maWx0ZXJzLFxuICAgICAgICAgICAgICAgICAgICB2b2x1bWU6IHRoaXMucXVldWUuZmlsdGVycy5fbGFzdEZpbHRlcnNDYWNoZS52b2x1bWUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHRyYWNrLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBTdHJlYW1UeXBlLlJhdyxcbiAgICAgICAgICAgICAgICAgICAgc2tpcEZGbXBlZzogdGhpcy5xdWV1ZS5wbGF5ZXIub3B0aW9ucy5za2lwRkZtcGVnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwbGF5ZXJDb25maWc6IG9wdGlvbnNcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxldCByZXNvbHZlcjogKCkgPT4gdm9pZCA9IFV0aWwubm9vcDtcbiAgICAgICAgICAgIGNvbnN0IGRvbmVQcm9taXNlID0gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUpID0+IChyZXNvbHZlciA9IHJlc29sdmUpKTtcblxuICAgICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IHRoaXMucXVldWUuZW1pdChHdWlsZFF1ZXVlRXZlbnQud2lsbFBsYXlUcmFjaywgdGhpcy5xdWV1ZSwgdHJhY2ssIHRyYWNrU3RyZWFtQ29uZmlnLCByZXNvbHZlciEpO1xuXG4gICAgICAgICAgICAvLyBwcmV2ZW50IGRhbmdsaW5nIHByb21pc2VcbiAgICAgICAgICAgIGlmICghc3VjY2VzcykgcmVzb2x2ZXIoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucXVldWUuaGFzRGVidWdnZXIpIHRoaXMucXVldWUuZGVidWcoJ1dhaXRpbmcgZm9yIHdpbGxQbGF5VHJhY2sgZXZlbnQgdG8gcmVzb2x2ZS4uLicpO1xuXG4gICAgICAgICAgICBhd2FpdCBkb25lUHJvbWlzZTtcblxuICAgICAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgICAgICBjb25zdCBkYXNwRGlzYWJsZWQgPSBbXG4gICAgICAgICAgICAgICAgdHJhY2tTdHJlYW1Db25maWcuZGlzcGF0Y2hlckNvbmZpZy5kaXNhYmxlQmlxdWFkLFxuICAgICAgICAgICAgICAgIHRyYWNrU3RyZWFtQ29uZmlnLmRpc3BhdGNoZXJDb25maWcuZGlzYWJsZUVxdWFsaXplcixcbiAgICAgICAgICAgICAgICB0cmFja1N0cmVhbUNvbmZpZy5kaXNwYXRjaGVyQ29uZmlnLmRpc2FibGVGaWx0ZXJzLFxuICAgICAgICAgICAgICAgIHRyYWNrU3RyZWFtQ29uZmlnLmRpc3BhdGNoZXJDb25maWcuZGlzYWJsZVJlc2FtcGxlcixcbiAgICAgICAgICAgICAgICB0cmFja1N0cmVhbUNvbmZpZy5kaXNwYXRjaGVyQ29uZmlnLmRpc2FibGVWb2x1bWVcbiAgICAgICAgICAgIF0uZXZlcnkoKGUpID0+ICEhZSA9PT0gdHJ1ZSk7XG5cbiAgICAgICAgICAgIGNvbnN0IG5lZWRzRmlsdGVycyA9ICEhdHJhY2tTdHJlYW1Db25maWcucGxheWVyQ29uZmlnLnNlZWsgfHwgISF0aGlzLnF1ZXVlLmZpbHRlcnMuZmZtcGVnLmFyZ3MubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3Qgc2hvdWxkU2tpcEZGbXBlZyA9ICEhdHJhY2tTdHJlYW1Db25maWcuZGlzcGF0Y2hlckNvbmZpZy5za2lwRkZtcGVnICYmICFuZWVkc0ZpbHRlcnM7XG5cbiAgICAgICAgICAgIGxldCBmaW5hbFN0cmVhbTogUmVhZGFibGU7XG5cbiAgICAgICAgICAgIGNvbnN0IGRlbXV4YWJsZSA9IChmbXQ6IHN0cmluZykgPT4gW1N0cmVhbVR5cGUuT3B1cywgU3RyZWFtVHlwZS5XZWJtT3B1cywgU3RyZWFtVHlwZS5PZ2dPcHVzXS5pbmNsdWRlcyhmbXQgYXMgU3RyZWFtVHlwZSk7XG5cbiAgICAgICAgICAgIC8vIHNraXAgZmZtcGVnIHdoZW4gcG9zc2libGVcbiAgICAgICAgICAgIGlmIChzaG91bGRTa2lwRkZtcGVnICYmICEoc3RyZWFtU3JjLnN0cmVhbSBpbnN0YW5jZW9mIFJlYWRhYmxlKSAmJiB0eXBlb2Ygc3RyZWFtU3JjLnN0cmVhbSAhPT0gJ3N0cmluZycgJiYgZGVtdXhhYmxlKHN0cmVhbVNyYy5zdHJlYW0uJGZtdCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7ICRmbXQsIHN0cmVhbSB9ID0gc3RyZWFtU3JjLnN0cmVhbTtcbiAgICAgICAgICAgICAgICBjb25zdCBzaG91bGRQQ00gPSAhZGFzcERpc2FibGVkO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucXVldWUuaGFzRGVidWdnZXIpIHRoaXMucXVldWUuZGVidWcoYHNraXBGRm1wZWcgaXMgc2V0IHRvIHRydWUgYW5kIHN0cmVhbSBpcyBkZW11eGFibGUsIGNyZWF0aW5nIHN0cmVhbSB3aXRoIHR5cGUgJHtzaG91bGRQQ00gPyAncGNtJyA6ICdvcHVzJ31gKTtcblxuICAgICAgICAgICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICAgICAgICAgIGNvbnN0IG9wdXNTdHJlYW0gPSAkZm10ID09PSBTdHJlYW1UeXBlLk9wdXMgP1xuICAgICAgICAgICAgICAgICAgICBzdHJlYW0gOlxuICAgICAgICAgICAgICAgICAgICAkZm10ID09PSBTdHJlYW1UeXBlLk9nZ09wdXMgP1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgICAgICBzdHJlYW0ucGlwZShuZXcgcHJpc20ub3B1cy5PZ2dEZW11eGVyKCkgYXMgYW55KSA6XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbS5waXBlKG5ldyBwcmlzbS5vcHVzLldlYm1EZW11eGVyKCkgYXMgYW55KTtcblxuICAgICAgICAgICAgICAgIGlmIChzaG91bGRQQ00pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSBhbnkgZmlsdGVycyBlbmFibGVkLCB3ZSBuZWVkIHRvIGRlY29kZSB0aGUgb3B1cyBzdHJlYW0gdG8gcGNtXG4gICAgICAgICAgICAgICAgICAgIGZpbmFsU3RyZWFtID0gb3B1c1N0cmVhbS5waXBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE9wdXNEZWNvZGVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFubmVsczogMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFtZVNpemU6IDk2MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXRlOiA0ODAwMFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgdHJhY2tTdHJlYW1Db25maWcuZGlzcGF0Y2hlckNvbmZpZy50eXBlID0gU3RyZWFtVHlwZS5SYXc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZmluYWxTdHJlYW0gPSBvcHVzU3RyZWFtO1xuICAgICAgICAgICAgICAgICAgICB0cmFja1N0cmVhbUNvbmZpZy5kaXNwYXRjaGVyQ29uZmlnLnR5cGUgPSBTdHJlYW1UeXBlLk9wdXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBjb25zdCBvcHVzID0gZGFzcERpc2FibGVkICYmIHRoaXMuI2hhc0ZGbXBlZ09wdGltaXphdGlvbjtcbiAgICAgICAgICAgICAgICAvLyBpZiAob3B1cyAmJiB0aGlzLnF1ZXVlLmhhc0RlYnVnZ2VyKSB0aGlzLnF1ZXVlLmRlYnVnKCdEaXNhYmxpbmcgUENNIG91dHB1dCBzaW5jZSBhbGwgZmlsdGVycyBhcmUgZGlzYWJsZWQgYW5kIG9wdXMgZW5jb2RpbmcgaXMgc3VwcG9ydGVkLi4uJyk7XG5cbiAgICAgICAgICAgICAgICBmaW5hbFN0cmVhbSA9IHRoaXMuI2NyZWF0ZUZGbXBlZ1N0cmVhbShcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFtU3JjLnN0cmVhbSBpbnN0YW5jZW9mIFJlYWRhYmxlIHx8IHR5cGVvZiBzdHJlYW1TcmMuc3RyZWFtID09PSAnc3RyaW5nJyA/IHN0cmVhbVNyYy5zdHJlYW0gOiBzdHJlYW1TcmMuc3RyZWFtLnN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgdHJhY2ssXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuc2VlayA/PyAwLFxuICAgICAgICAgICAgICAgICAgICBjb29raWVzXG4gICAgICAgICAgICAgICAgICAgIC8vIG9wdXNcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRyYWNrU3RyZWFtQ29uZmlnLmRpc3BhdGNoZXJDb25maWcudHlwZSA9IFN0cmVhbVR5cGUuUmF3O1xuICAgICAgICAgICAgICAgIC8vIEZJWE1FOiBPZ2dPcHVzIHJlc3VsdHMgaW4gc3RhdGljIG5vaXNlXG4gICAgICAgICAgICAgICAgLy8gdHJhY2tTdHJlYW1Db25maWcuZGlzcGF0Y2hlckNvbmZpZy50eXBlID0gb3B1cyA/IFN0cmVhbVR5cGUuT2dnT3B1cyA6IFN0cmVhbVR5cGUuUmF3O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy50cmFuc2l0aW9uTW9kZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnF1ZXVlLmhhc0RlYnVnZ2VyKSB0aGlzLnF1ZXVlLmRlYnVnKGBUcmFuc2l0aW9uIG1vZGUgZGV0ZWN0ZWQsIHBsYXllciB3aWxsIHdhaXQgZm9yIGJ1ZmZlcmluZyB0aW1lb3V0IHRvIGV4cGlyZSAoVGltZW91dDogJHt0aGlzLnF1ZXVlLm9wdGlvbnMuYnVmZmVyaW5nVGltZW91dH1tcylgKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB3YWl0Rm9yKHRoaXMucXVldWUub3B0aW9ucy5idWZmZXJpbmdUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5xdWV1ZS5oYXNEZWJ1Z2dlcikgdGhpcy5xdWV1ZS5kZWJ1ZygnQnVmZmVyaW5nIHRpbWVvdXQgaGFzIGV4cGlyZWQhJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnF1ZXVlLmhhc0RlYnVnZ2VyKSB0aGlzLnF1ZXVlLmRlYnVnKGBQcmVwYXJpbmcgZmluYWwgc3RyZWFtIGNvbmZpZzogJHtKU09OLnN0cmluZ2lmeSh0cmFja1N0cmVhbUNvbmZpZywgbnVsbCwgMil9YCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGRpc3BhdGNoZXIgPSB0aGlzLnF1ZXVlLmRpc3BhdGNoZXI7XG5cbiAgICAgICAgICAgIGlmICghZGlzcGF0Y2hlcikge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnF1ZXVlLmhhc0RlYnVnZ2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucXVldWUuZGVidWcoJ0Rpc3BhdGNoZXIgaXMgbm90IGF2YWlsYWJsZSwgdGhpcyBpcyBtb3N0IGxpa2VseSBkdWUgdG8gdGhlIHF1ZXVlIGJlaW5nIGRlbGV0ZWQgaW4gdGhlIG1pZGRsZSBvZiBvcGVyYXRpb24uIENhbmNlbGxpbmcgdGhlIHN0cmVhbS4uLicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZpbmFsU3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBhd2FpdCBkaXNwYXRjaGVyLmNyZWF0ZVN0cmVhbShmaW5hbFN0cmVhbSwgdHJhY2tTdHJlYW1Db25maWcuZGlzcGF0Y2hlckNvbmZpZyk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlLnNldFRyYW5zaXRpb25pbmcoISFvcHRpb25zLnRyYW5zaXRpb25Nb2RlKTtcblxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuI3BlcmZvcm1QbGF5KHJlc291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucXVldWUuaGFzRGVidWdnZXIpIHRoaXMucXVldWUuZGVidWcoYEZhaWxlZCB0byBpbml0aWFsaXplIGF1ZGlvIHBsYXllcjogJHtlfWApO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICN0aHJvdyh0cmFjazogVHJhY2ssIGVycm9yPzogRXJyb3IgfCBudWxsKSB7XG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICBjb25zdCBzdHJlYW1EZWZpbml0ZWx5RmFpbGVkTXlEZWFyVF9UUGxlYXNlVHJ1c3RNZUl0c05vdE15RmF1bHQgPSAoXG4gICAgICAgICAgICBFeGNlcHRpb25zLkVSUl9OT19SRVNVTFQoYENvdWxkIG5vdCBleHRyYWN0IHN0cmVhbSBmb3IgdGhpcyB0cmFjayR7ZXJyb3IgPyBgXFxuXFxuJHtlcnJvci5zdGFjayB8fCBlcnJvcn1gIDogJyd9YClcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnF1ZXVlLmVtaXQoR3VpbGRRdWV1ZUV2ZW50LnBsYXllclNraXAsIHRoaXMucXVldWUsIHRyYWNrLCBUcmFja1NraXBSZWFzb24uTm9TdHJlYW0sIHN0cmVhbURlZmluaXRlbHlGYWlsZWRNeURlYXJUX1RQbGVhc2VUcnVzdE1lSXRzTm90TXlGYXVsdC5tZXNzYWdlKTtcbiAgICAgICAgdGhpcy5xdWV1ZS5lbWl0KEd1aWxkUXVldWVFdmVudC5wbGF5ZXJFcnJvciwgdGhpcy5xdWV1ZSwgc3RyZWFtRGVmaW5pdGVseUZhaWxlZE15RGVhclRfVFBsZWFzZVRydXN0TWVJdHNOb3RNeUZhdWx0LCB0cmFjayk7XG4gICAgICAgIGNvbnN0IG5leHRUcmFjayA9IHRoaXMucXVldWUudHJhY2tzLmRpc3BhdGNoKCk7XG4gICAgICAgIGlmIChuZXh0VHJhY2spIHRoaXMucGxheShuZXh0VHJhY2ssIHsgcXVldWU6IGZhbHNlIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYXN5bmMgI3BlcmZvcm1QbGF5KHJlc291cmNlOiBBdWRpb1Jlc291cmNlPFRyYWNrPikge1xuICAgICAgICBpZiAoIXRoaXMucXVldWUuZGlzcGF0Y2hlcikge1xuICAgICAgICAgICAgaWYgKHRoaXMucXVldWUuaGFzRGVidWdnZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlLmRlYnVnKCdEaXNwYXRjaGVyIGlzIG5vdCBhdmFpbGFibGUsIHRoaXMgaXMgbW9zdCBsaWtlbHkgZHVlIHRvIHRoZSBxdWV1ZSBiZWluZyBkZWxldGVkIGluIHRoZSBtaWRkbGUgb2Ygb3BlcmF0aW9uLiBDYW5jZWxsaW5nIHRoZSBzdHJlYW0uLi4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnF1ZXVlLmhhc0RlYnVnZ2VyKSB0aGlzLnF1ZXVlLmRlYnVnKCdJbml0aWFsaXppbmcgYXVkaW8gcGxheWVyLi4uJyk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnF1ZXVlLmRpc3BhdGNoZXIucGxheVN0cmVhbShyZXNvdXJjZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5xdWV1ZS5oYXNEZWJ1Z2dlcikgdGhpcy5xdWV1ZS5kZWJ1ZygnRGlzcGF0Y2hpbmcgYXVkaW8uLi4nKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jICNjcmVhdGVHZW5lcmljU3RyZWFtKHRyYWNrOiBUcmFjaykge1xuICAgICAgICBpZiAodGhpcy5xdWV1ZS5oYXNEZWJ1Z2dlcikgdGhpcy5xdWV1ZS5kZWJ1ZyhgQXR0ZW1wdGluZyB0byBleHRyYWN0IHN0cmVhbSBmb3IgVHJhY2sgeyB0aXRsZTogJHt0cmFjay50aXRsZX0sIHVybDogJHt0cmFjay51cmx9IH0gdXNpbmcgcmVnaXN0ZXJlZCBleHRyYWN0b3JzYCk7XG4gICAgICAgIGNvbnN0IHN0cmVhbUluZm8gPSBhd2FpdCB0aGlzLnF1ZXVlLnBsYXllci5leHRyYWN0b3JzLnJ1bihhc3luYyAoZXh0cmFjdG9yKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5xdWV1ZS5wbGF5ZXIub3B0aW9ucy5ibG9ja1N0cmVhbUZyb20/LnNvbWUoKGV4dCkgPT4gZXh0ID09PSBleHRyYWN0b3IuaWRlbnRpZmllcikpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IGNhblN0cmVhbSA9IGF3YWl0IGV4dHJhY3Rvci52YWxpZGF0ZSh0cmFjay51cmwsIHRyYWNrLnF1ZXJ5VHlwZSB8fCBRdWVyeVJlc29sdmVyLnJlc29sdmUodHJhY2sudXJsKS50eXBlKTtcbiAgICAgICAgICAgIGlmICghY2FuU3RyZWFtKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgZXh0cmFjdG9yLnN0cmVhbSh0cmFjayk7XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgaWYgKCFzdHJlYW1JbmZvIHx8ICFzdHJlYW1JbmZvLnJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucXVldWUuaGFzRGVidWdnZXIpIHRoaXMucXVldWUuZGVidWcoYEZhaWxlZCB0byBleHRyYWN0IHN0cmVhbSBmb3IgVHJhY2sgeyB0aXRsZTogJHt0cmFjay50aXRsZX0sIHVybDogJHt0cmFjay51cmx9IH0gdXNpbmcgcmVnaXN0ZXJlZCBleHRyYWN0b3JzYCk7XG4gICAgICAgICAgICByZXR1cm4gc3RyZWFtSW5mbyB8fCBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucXVldWUuaGFzRGVidWdnZXIpXG4gICAgICAgICAgICB0aGlzLnF1ZXVlLmRlYnVnKGBTdHJlYW0gZXh0cmFjdGlvbiB3YXMgc3VjY2Vzc2Z1bCBmb3IgVHJhY2sgeyB0aXRsZTogJHt0cmFjay50aXRsZX0sIHVybDogJHt0cmFjay51cmx9IH0gKEV4dHJhY3RvcjogJHtzdHJlYW1JbmZvLmV4dHJhY3Rvcj8uaWRlbnRpZmllciB8fCAnTi9BJ30pYCk7XG5cbiAgICAgICAgcmV0dXJuIHN0cmVhbUluZm87XG4gICAgfVxuXG4gICAgI2NyZWF0ZUZGbXBlZ1N0cmVhbShzdHJlYW06IFJlYWRhYmxlIHwgc3RyaW5nLCB0cmFjazogVHJhY2ssIHNlZWsgPSAwLCBjb29raWVzPzogc3RyaW5nLCBvcHVzPzogYm9vbGVhbikge1xuICAgICAgICBjb25zdCBmZm1wZWdTdHJlYW0gPSB0aGlzLnF1ZXVlLmZpbHRlcnMuZmZtcGVnXG4gICAgICAgICAgICAuY3JlYXRlU3RyZWFtKHN0cmVhbSwge1xuICAgICAgICAgICAgICAgIGVuY29kZXJBcmdzOiB0aGlzLnF1ZXVlLmZpbHRlcnMuZmZtcGVnLmFyZ3MsXG4gICAgICAgICAgICAgICAgc2Vlazogc2VlayAvIDEwMDAsXG4gICAgICAgICAgICAgICAgZm10OiBvcHVzID8gJ29wdXMnIDogJ3MxNmxlJyxcbiAgICAgICAgICAgICAgICBjb29raWVzLFxuICAgICAgICAgICAgICAgIHVzZUxlZ2FjeUZGbXBlZzogISF0aGlzLnF1ZXVlLnBsYXllci5vcHRpb25zLnVzZUxlZ2FjeUZGbXBlZ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbSA9IGAke2Vycn1gLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5xdWV1ZS5oYXNEZWJ1Z2dlcikgdGhpcy5xdWV1ZS5kZWJ1ZyhgU3RyZWFtIGNsb3NlZCBkdWUgdG8gYW4gZXJyb3IgZnJvbSBGRm1wZWcgc3RyZWFtOiAke2Vyci5zdGFjayB8fCBlcnIubWVzc2FnZSB8fCBlcnJ9YCk7XG5cbiAgICAgICAgICAgICAgICBpZiAobS5pbmNsdWRlcygncHJlbWF0dXJlIGNsb3NlJykgfHwgbS5pbmNsdWRlcygnZXBpcGUnKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5xdWV1ZS5lbWl0KEd1aWxkUXVldWVFdmVudC5wbGF5ZXJFcnJvciwgdGhpcy5xdWV1ZSwgZXJyLCB0cmFjayk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZmZtcGVnU3RyZWFtO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBRdWVyeVR5cGUgfSBmcm9tICcuLi90eXBlcy90eXBlcyc7XG5pbXBvcnQgeyBUeXBlVXRpbCB9IGZyb20gJy4vVHlwZVV0aWwnO1xuaW1wb3J0IHsgRXhjZXB0aW9ucyB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBmZXRjaCB9IGZyb20gJ3VuZGljaSc7XG5cbi8vICNyZWdpb24gc2NhcnkgdGhpbmdzIGJlbG93ICpzaWdoKlxuY29uc3Qgc3BvdGlmeVNvbmdSZWdleCA9IC9eaHR0cHM/OlxcL1xcLyg/OmVtYmVkXFwufG9wZW5cXC4pKD86c3BvdGlmeVxcLmNvbVxcLykoaW50bC0oW2Etel18W0EtWl0pK1xcLyk/KD86dHJhY2tcXC98XFw/dXJpPXNwb3RpZnk6dHJhY2s6KSgoXFx3fC0pezIyfSkoXFw/c2k9LispPyQvO1xuY29uc3Qgc3BvdGlmeVBsYXlsaXN0UmVnZXggPSAvXmh0dHBzPzpcXC9cXC8oPzplbWJlZFxcLnxvcGVuXFwuKSg/OnNwb3RpZnlcXC5jb21cXC8pKGludGwtKFthLXpdfFtBLVpdKStcXC8pPyg/OnBsYXlsaXN0XFwvfFxcP3VyaT1zcG90aWZ5OnBsYXlsaXN0OikoKFxcd3wtKXsyMn0pKFxcP3NpPS4rKT8kLztcbmNvbnN0IHNwb3RpZnlBbGJ1bVJlZ2V4ID0gL15odHRwcz86XFwvXFwvKD86ZW1iZWRcXC58b3BlblxcLikoPzpzcG90aWZ5XFwuY29tXFwvKShpbnRsLShbYS16XXxbQS1aXSkrXFwvKT8oPzphbGJ1bVxcL3xcXD91cmk9c3BvdGlmeTphbGJ1bTopKChcXHd8LSl7MjJ9KShcXD9zaT0uKyk/JC87XG5jb25zdCB2aW1lb1JlZ2V4ID0gL14oaHR0cHxodHRwcyk/OlxcL1xcLyh3d3dcXC58cGxheWVyXFwuKT92aW1lb1xcLmNvbVxcLyg/OmNoYW5uZWxzXFwvKD86XFx3K1xcLyk/fGdyb3Vwc1xcLyhbXi9dKilcXC92aWRlb3NcXC98dmlkZW9cXC98KShcXGQrKSg/OnxcXC9cXD8pJC87XG5jb25zdCByZXZlcmJuYXRpb25SZWdleCA9IC9eaHR0cHM6XFwvXFwvKHd3dy4pP3JldmVyYm5hdGlvbi5jb21cXC8oLispXFwvc29uZ1xcLyguKykkLztcbmNvbnN0IGF0dGFjaG1lbnRSZWdleCA9IC9eaHR0cHM/OlxcL1xcLy4rJC87XG5jb25zdCBhcHBsZU11c2ljU29uZ1JlZ2V4ID0gL15odHRwcz86XFwvXFwvbXVzaWNcXC5hcHBsZVxcLmNvbVxcLy4rP1xcLyhzb25nfGFsYnVtKVxcLy4rPyhcXC8uKz9cXD9pPXxcXC8pKFswLTldKykkLztcbmNvbnN0IGFwcGxlTXVzaWNQbGF5bGlzdFJlZ2V4ID0gL15odHRwcz86XFwvXFwvbXVzaWNcXC5hcHBsZVxcLmNvbVxcLy4rP1xcL3BsYXlsaXN0XFwvLitcXC9wbFxcLih1LXxwbS0pP1thLXpBLVowLTldKyQvO1xuY29uc3QgYXBwbGVNdXNpY0FsYnVtUmVnZXggPSAvXmh0dHBzPzpcXC9cXC9tdXNpY1xcLmFwcGxlXFwuY29tXFwvLis/XFwvYWxidW1cXC8uK1xcLyhbMC05XSspJC87XG5jb25zdCBzb3VuZGNsb3VkVHJhY2tSZWdleCA9IC9eaHR0cHM/OlxcL1xcLyhtLnx3d3cuKT9zb3VuZGNsb3VkLmNvbVxcLyhcXHd8LSkrXFwvKFxcd3wtKSsoLispPyQvO1xuY29uc3Qgc291bmRjbG91ZFBsYXlsaXN0UmVnZXggPSAvXmh0dHBzPzpcXC9cXC8obS58d3d3Lik/c291bmRjbG91ZC5jb21cXC8oXFx3fC0pK1xcL3NldHNcXC8oXFx3fC0pKyguKyk/JC87XG5jb25zdCB5b3V0dWJlUGxheWxpc3RSZWdleCA9IC9eaHR0cHM/OlxcL1xcLyh3d3cuKT95b3V0dWJlLmNvbVxcL3BsYXlsaXN0XFw/bGlzdD0oKFBMfEZMfFVVfExMfFJEfE9MKVthLXpBLVowLTktX117MTYsNDF9KSQvO1xuY29uc3QgeW91dHViZVZpZGVvVVJMUmVnZXggPSAvXigoPzpodHRwcz86KT9cXC9cXC8pPygoPzp3d3d8bSlcXC4pPygoPzp5b3V0dWJlXFwuY29tfHlvdXR1LmJlKSkoXFwvKD86W1xcdy1dK1xcP3Y9fGVtYmVkXFwvfHZcXC8pPykoW1xcdy1dKykoXFxTKyk/JC87XG5jb25zdCB5b3V0dWJlVmlkZW9JZFJlZ2V4ID0gL15bYS16QS1aMC05LV9dezExfSQvO1xuLy8gI2VuZHJlZ2lvbiBzY2FyeSB0aGluZ3MgYWJvdmUgKnNpZ2gqXG5cbmNvbnN0IERvbWFpbnNNYXAgPSB7XG4gICAgWW91VHViZTogWyd5b3V0dWJlLmNvbScsICd5b3V0dS5iZScsICdtdXNpYy55b3V0dWJlLmNvbScsICdnYW1pbmcueW91dHViZS5jb20nLCAnd3d3LnlvdXR1YmUuY29tJywgJ20ueW91dHViZS5jb20nXSxcbiAgICBTcG90aWZ5OiBbJ29wZW4uc3BvdGlmeS5jb20nLCAnZW1iZWQuc3BvdGlmeS5jb20nXSxcbiAgICBWaW1lbzogWyd2aW1lby5jb20nLCAncGxheWVyLnZpbWVvLmNvbSddLFxuICAgIFJldmVyYk5hdGlvbjogWydyZXZlcmJuYXRpb24uY29tJ10sXG4gICAgU291bmRDbG91ZDogWydzb3VuZGNsb3VkLmNvbSddLFxuICAgIEFwcGxlTXVzaWM6IFsnbXVzaWMuYXBwbGUuY29tJ11cbn07XG5cbi8vIHByZXR0aWVyLWlnbm9yZVxuY29uc3QgcmVkaXJlY3REb21haW5zID0gbmV3IFNldChbXG4gICAgL15odHRwcz86XFwvXFwvc3BvdGlmeS5saW5rXFwvW0EtWmEtejAtOV0rJC8sXG5dKTtcblxuZXhwb3J0IGludGVyZmFjZSBSZXNvbHZlZFF1ZXJ5IHtcbiAgICB0eXBlOiAodHlwZW9mIFF1ZXJ5VHlwZSlba2V5b2YgdHlwZW9mIFF1ZXJ5VHlwZV07XG4gICAgcXVlcnk6IHN0cmluZztcbn1cblxuY2xhc3MgUXVlcnlSZXNvbHZlciB7XG4gICAgLyoqXG4gICAgICogUXVlcnkgcmVzb2x2ZXJcbiAgICAgKi9cbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cblxuICAgIHN0YXRpYyBnZXQgcmVnZXgoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzcG90aWZ5QWxidW1SZWdleCxcbiAgICAgICAgICAgIHNwb3RpZnlQbGF5bGlzdFJlZ2V4LFxuICAgICAgICAgICAgc3BvdGlmeVNvbmdSZWdleCxcbiAgICAgICAgICAgIHZpbWVvUmVnZXgsXG4gICAgICAgICAgICByZXZlcmJuYXRpb25SZWdleCxcbiAgICAgICAgICAgIGF0dGFjaG1lbnRSZWdleCxcbiAgICAgICAgICAgIGFwcGxlTXVzaWNBbGJ1bVJlZ2V4LFxuICAgICAgICAgICAgYXBwbGVNdXNpY1BsYXlsaXN0UmVnZXgsXG4gICAgICAgICAgICBhcHBsZU11c2ljU29uZ1JlZ2V4LFxuICAgICAgICAgICAgc291bmRjbG91ZFRyYWNrUmVnZXgsXG4gICAgICAgICAgICBzb3VuZGNsb3VkUGxheWxpc3RSZWdleCxcbiAgICAgICAgICAgIHlvdXR1YmVQbGF5bGlzdFJlZ2V4XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJlLXJlc29sdmUgcmVkaXJlY3QgdXJsc1xuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBwcmVSZXNvbHZlKHF1ZXJ5OiBzdHJpbmcsIG1heERlcHRoID0gNSk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGlmICghVHlwZVV0aWwuaXNTdHJpbmcocXVlcnkpKSB0aHJvdyBFeGNlcHRpb25zLkVSUl9JTlZBTElEX0FSR19UWVBFKHF1ZXJ5LCAnc3RyaW5nJywgdHlwZW9mIHF1ZXJ5KTtcblxuICAgICAgICBmb3IgKGNvbnN0IGRvbWFpbiBvZiByZWRpcmVjdERvbWFpbnMpIHtcbiAgICAgICAgICAgIGlmIChkb21haW4udGVzdChxdWVyeSkpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChxdWVyeSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0OiAnZm9sbG93J1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlcy5vaykgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc3BvdGlmeSBkb2VzIG5vdCBcInJlZGlyZWN0XCIsIGl0IHJldHVybnMgYSBwYWdlIHdpdGgganMgdGhhdCByZWRpcmVjdHNcbiAgICAgICAgICAgICAgICAgICAgaWYgKC9eaHR0cHM/OlxcL1xcL3Nwb3RpZnkuYXBwLmxpbmtcXC8oLispJC8udGVzdChyZXMudXJsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBib2R5LnNwbGl0KCdodHRwczovL29wZW4uc3BvdGlmeS5jb20vdHJhY2svJylbMV0uc3BsaXQoJz9zaT0nKVswXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJnZXQpIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYGh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS90cmFjay8ke3RhcmdldH1gO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXhEZXB0aCA8IDEgPyByZXMudXJsIDogdGhpcy5wcmVSZXNvbHZlKHJlcy51cmwsIG1heERlcHRoIC0gMSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBxdWVyeTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlcyB0aGUgZ2l2ZW4gc2VhcmNoIHF1ZXJ5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5IFRoZSBxdWVyeVxuICAgICAqL1xuICAgIHN0YXRpYyByZXNvbHZlKHF1ZXJ5OiBzdHJpbmcsIGZhbGxiYWNrU2VhcmNoRW5naW5lOiAodHlwZW9mIFF1ZXJ5VHlwZSlba2V5b2YgdHlwZW9mIFF1ZXJ5VHlwZV0gPSBRdWVyeVR5cGUuQVVUT19TRUFSQ0gpOiBSZXNvbHZlZFF1ZXJ5IHtcbiAgICAgICAgaWYgKCFUeXBlVXRpbC5pc1N0cmluZyhxdWVyeSkpIHRocm93IEV4Y2VwdGlvbnMuRVJSX0lOVkFMSURfQVJHX1RZUEUocXVlcnksICdzdHJpbmcnLCB0eXBlb2YgcXVlcnkpO1xuICAgICAgICBpZiAoIXF1ZXJ5Lmxlbmd0aCkgdGhyb3cgRXhjZXB0aW9ucy5FUlJfSU5GT19SRVFVSVJFRCgncXVlcnknLCBTdHJpbmcocXVlcnkpKTtcblxuICAgICAgICBjb25zdCByZXNvbHZlciA9ICh0eXBlOiB0eXBlb2YgZmFsbGJhY2tTZWFyY2hFbmdpbmUsIHF1ZXJ5OiBzdHJpbmcpID0+ICh7IHR5cGUsIHF1ZXJ5IH0pO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHF1ZXJ5KTtcblxuICAgICAgICAgICAgaWYgKERvbWFpbnNNYXAuWW91VHViZS5pbmNsdWRlcyh1cmwuaG9zdCkpIHtcbiAgICAgICAgICAgICAgICBxdWVyeSA9IHF1ZXJ5LnJlcGxhY2UoLyhtKHVzaWMpP3xnYW1pbmcpXFwuLywgJycpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwbGF5bGlzdElkID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ2xpc3QnKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2aWRlb0lkID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ3YnKTtcbiAgICAgICAgICAgICAgICBpZiAocGxheWxpc3RJZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmlkZW9JZCAmJiBwbGF5bGlzdElkLnN0YXJ0c1dpdGgoJ1JEJykpIHJldHVybiByZXNvbHZlcihRdWVyeVR5cGUuWU9VVFVCRV9QTEFZTElTVCwgYGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9JHt2aWRlb0lkfSZsaXN0PSR7cGxheWxpc3RJZH1gKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVyKFF1ZXJ5VHlwZS5ZT1VUVUJFX1BMQVlMSVNULCBgaHR0cHM6Ly93d3cueW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD0ke3BsYXlsaXN0SWR9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChRdWVyeVJlc29sdmVyLnZhbGlkYXRlSWQocXVlcnkpIHx8IFF1ZXJ5UmVzb2x2ZXIudmFsaWRhdGVVUkwocXVlcnkpKSByZXR1cm4gcmVzb2x2ZXIoUXVlcnlUeXBlLllPVVRVQkVfVklERU8sIHF1ZXJ5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZXIoZmFsbGJhY2tTZWFyY2hFbmdpbmUsIHF1ZXJ5KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoRG9tYWluc01hcC5TcG90aWZ5LmluY2x1ZGVzKHVybC5ob3N0KSkge1xuICAgICAgICAgICAgICAgIHF1ZXJ5ID0gcXVlcnkucmVwbGFjZSgvaW50bC0oW2EtekEtWl0rKVxcLy8sICcnKTtcbiAgICAgICAgICAgICAgICBpZiAoc3BvdGlmeVBsYXlsaXN0UmVnZXgudGVzdChxdWVyeSkpIHJldHVybiByZXNvbHZlcihRdWVyeVR5cGUuU1BPVElGWV9QTEFZTElTVCwgcXVlcnkpO1xuICAgICAgICAgICAgICAgIGlmIChzcG90aWZ5QWxidW1SZWdleC50ZXN0KHF1ZXJ5KSkgcmV0dXJuIHJlc29sdmVyKFF1ZXJ5VHlwZS5TUE9USUZZX0FMQlVNLCBxdWVyeSk7XG4gICAgICAgICAgICAgICAgaWYgKHNwb3RpZnlTb25nUmVnZXgudGVzdChxdWVyeSkpIHJldHVybiByZXNvbHZlcihRdWVyeVR5cGUuU1BPVElGWV9TT05HLCBxdWVyeSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVyKGZhbGxiYWNrU2VhcmNoRW5naW5lLCBxdWVyeSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKERvbWFpbnNNYXAuVmltZW8uaW5jbHVkZXModXJsLmhvc3QpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZpbWVvUmVnZXgudGVzdChxdWVyeSkpIHJldHVybiByZXNvbHZlcihRdWVyeVR5cGUuVklNRU8sIHF1ZXJ5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZXIoZmFsbGJhY2tTZWFyY2hFbmdpbmUsIHF1ZXJ5KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoRG9tYWluc01hcC5SZXZlcmJOYXRpb24uaW5jbHVkZXModXJsLmhvc3QpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJldmVyYm5hdGlvblJlZ2V4LnRlc3QocXVlcnkpKSByZXR1cm4gcmVzb2x2ZXIoUXVlcnlUeXBlLlJFVkVSQk5BVElPTiwgcXVlcnkpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlcihmYWxsYmFja1NlYXJjaEVuZ2luZSwgcXVlcnkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChEb21haW5zTWFwLlNvdW5kQ2xvdWQuaW5jbHVkZXModXJsLmhvc3QpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNvdW5kY2xvdWRQbGF5bGlzdFJlZ2V4LnRlc3QocXVlcnkpKSByZXR1cm4gcmVzb2x2ZXIoUXVlcnlUeXBlLlNPVU5EQ0xPVURfUExBWUxJU1QsIHF1ZXJ5KTtcbiAgICAgICAgICAgICAgICBpZiAoc291bmRjbG91ZFRyYWNrUmVnZXgudGVzdChxdWVyeSkpIHJldHVybiByZXNvbHZlcihRdWVyeVR5cGUuU09VTkRDTE9VRF9UUkFDSywgcXVlcnkpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlcihmYWxsYmFja1NlYXJjaEVuZ2luZSwgcXVlcnkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChEb21haW5zTWFwLkFwcGxlTXVzaWMuaW5jbHVkZXModXJsLmhvc3QpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFwcGxlTXVzaWNBbGJ1bVJlZ2V4LnRlc3QocXVlcnkpKSByZXR1cm4gcmVzb2x2ZXIoUXVlcnlUeXBlLkFQUExFX01VU0lDX0FMQlVNLCBxdWVyeSk7XG4gICAgICAgICAgICAgICAgaWYgKGFwcGxlTXVzaWNQbGF5bGlzdFJlZ2V4LnRlc3QocXVlcnkpKSByZXR1cm4gcmVzb2x2ZXIoUXVlcnlUeXBlLkFQUExFX01VU0lDX1BMQVlMSVNULCBxdWVyeSk7XG4gICAgICAgICAgICAgICAgaWYgKGFwcGxlTXVzaWNTb25nUmVnZXgudGVzdChxdWVyeSkpIHJldHVybiByZXNvbHZlcihRdWVyeVR5cGUuQVBQTEVfTVVTSUNfU09ORywgcXVlcnkpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlcihmYWxsYmFja1NlYXJjaEVuZ2luZSwgcXVlcnkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZXIoUXVlcnlUeXBlLkFSQklUUkFSWSwgcXVlcnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlcihmYWxsYmFja1NlYXJjaEVuZ2luZSwgcXVlcnkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIHZpbWVvIGlkIGZyb20gdXJsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5IFRoZSBxdWVyeVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldFZpbWVvSUQocXVlcnk6IHN0cmluZyk6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gUXVlcnlSZXNvbHZlci5yZXNvbHZlKHF1ZXJ5KS50eXBlID09PSBRdWVyeVR5cGUuVklNRU8gPyBxdWVyeS5zcGxpdCgnLycpLmZpbHRlcihCb29sZWFuKS5wb3AoKSA6IG51bGw7XG4gICAgfVxuXG4gICAgc3RhdGljIHZhbGlkYXRlSWQocTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB5b3V0dWJlVmlkZW9JZFJlZ2V4LnRlc3QocSk7XG4gICAgfVxuXG4gICAgc3RhdGljIHZhbGlkYXRlVVJMKHE6IHN0cmluZykge1xuICAgICAgICByZXR1cm4geW91dHViZVZpZGVvVVJMUmVnZXgudGVzdChxKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFF1ZXJ5UmVzb2x2ZXIgfTtcbiIsICJpbXBvcnQgeyBTbm93Zmxha2VVdGlsIH0gZnJvbSAnZGlzY29yZC5qcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXN5bmNRdWV1ZUFjcXVpc2l0aW9uT3B0aW9ucyB7XG4gICAgLyoqXG4gICAgICogQWJvcnRTaWduYWwgdG8gY2FuY2VsIHRoaXMgZW50cnlcbiAgICAgKi9cbiAgICBzaWduYWw/OiBBYm9ydFNpZ25hbDtcbn1cblxuZXhwb3J0IHR5cGUgQXN5bmNRdWV1ZUV4Y2VwdGlvbkhhbmRsZXIgPSAoZXhjZXB0aW9uOiBFcnJvcikgPT4gdm9pZDtcblxuZXhwb3J0IGNsYXNzIEFzeW5jUXVldWUge1xuICAgIC8qKlxuICAgICAqIFRoZSBxdWV1ZWQgZW50cmllc1xuICAgICAqL1xuICAgIHB1YmxpYyBlbnRyaWVzOiBBcnJheTxBc3luY1F1ZXVlRW50cnk+ID0gW107XG5cbiAgICBwdWJsaWMgZXhjZXB0aW9uSGFuZGxlcj86IEFzeW5jUXVldWVFeGNlcHRpb25IYW5kbGVyO1xuXG4gICAgLyoqXG4gICAgICogQ2xlYXIgZW50cmllcyBxdWV1ZVxuICAgICAqIEBwYXJhbSBjb25zdW1lIFdoZXRoZXIgb3Igbm90IHRvIGNvbnN1bWUgYWxsIGVudHJpZXMgYmVmb3JlIGNsZWFyaW5nXG4gICAgICovXG4gICAgcHVibGljIGNsZWFyKGNvbnN1bWUgPSBmYWxzZSkge1xuICAgICAgICBpZiAoY29uc3VtZSkge1xuICAgICAgICAgICAgdGhpcy5lbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiBlbnRyeS5jb25zdW1lKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbnRyaWVzID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHRvdGFsIG51bWJlciBvZiBlbnRyaWVzIGluIHRoaXMgcXVldWUuIFJldHVybnMgYDBgIGlmIG5vIGVudHJpZXMgYXJlIGF2YWlsYWJsZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudHJpZXMubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFjcXVpcmUgYW4gZW50cnkuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSAvLyBsb2NrIHRoZSBxdWV1ZVxuICAgICAqIGNvbnN0IGVudHJ5ID0gYXN5bmNRdWV1ZS5hY3F1aXJlKCk7XG4gICAgICogLy8gd2FpdCB1bnRpbCBwcmV2aW91cyB0YXNrIGlzIGNvbXBsZXRlZFxuICAgICAqIGF3YWl0IGVudHJ5LmdldFRhc2soKTtcbiAgICAgKiAvLyBkbyBzb21ldGhpbmcgZXhwZW5zaXZlXG4gICAgICogYXdhaXQgcGVyZm9ybVNvbWV0aGluZ0V4cGVuc2l2ZSgpO1xuICAgICAqIC8vIG1ha2Ugc3VyZSB0byByZWxlYXNlIHRoZSBsb2NrIG9uY2UgZG9uZVxuICAgICAqIGFzeW5jUXVldWUucmVsZWFzZSgpO1xuICAgICAqXG4gICAgICovXG4gICAgcHVibGljIGFjcXVpcmUob3B0aW9ucz86IEFzeW5jUXVldWVBY3F1aXNpdGlvbk9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZW50cnkgPSBuZXcgQXN5bmNRdWV1ZUVudHJ5KHRoaXMsIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmICh0aGlzLmV4Y2VwdGlvbkhhbmRsZXIpIGVudHJ5LmdldFRhc2soKS5jYXRjaCh0aGlzLmV4Y2VwdGlvbkhhbmRsZXIpO1xuXG4gICAgICAgIGlmICh0aGlzLmVudHJpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVudHJpZXMucHVzaChlbnRyeSk7XG4gICAgICAgICAgICBlbnRyeS5jb25zdW1lKCk7XG4gICAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVudHJpZXMucHVzaChlbnRyeSk7XG4gICAgICAgIHJldHVybiBlbnRyeTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWxlYXNlIHRoZSBjdXJyZW50IGFjcXVpc2l0aW9uIGFuZCBtb3ZlIHRvIG5leHQgZW50cnkuXG4gICAgICovXG4gICAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5lbnRyaWVzLmxlbmd0aCkgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuZW50cmllcy5zaGlmdCgpO1xuICAgICAgICB0aGlzLmVudHJpZXNbMF0/LmNvbnN1bWUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYW5jZWwgYWxsIGVudHJpZXNcbiAgICAgKi9cbiAgICBwdWJsaWMgY2FuY2VsQWxsKCkge1xuICAgICAgICB0aGlzLmVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IGVudHJ5LmNhbmNlbCgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIGdpdmVuIGVudHJ5IGZyb20gdGhlIHF1ZXVlXG4gICAgICogQHBhcmFtIGVudHJ5IFRoZSBlbnRyeSB0byByZW1vdmVcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVtb3ZlRW50cnkoZW50cnk6IEFzeW5jUXVldWVFbnRyeSkge1xuICAgICAgICBjb25zdCBlbnRyeUlkeCA9IHRoaXMuZW50cmllcy5pbmRleE9mKGVudHJ5KTtcblxuICAgICAgICBpZiAoZW50cnlJZHggIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmVudHJpZXMuc3BsaWNlKGVudHJ5SWR4LCAxKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFzeW5jUXVldWVFbnRyeSB7XG4gICAgcHVibGljIHJlYWRvbmx5IGlkID0gU25vd2ZsYWtlVXRpbC5nZW5lcmF0ZSgpLnRvU3RyaW5nKCk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm9taXNlOiBQcm9taXNlPHZvaWQ+O1xuICAgIHB1YmxpYyBzaWduYWw6IEFib3J0U2lnbmFsIHwgbnVsbCA9IG51bGw7XG4gICAgcHVibGljIG9uQWJvcnQ6ICgoKSA9PiB2b2lkKSB8IG51bGwgPSBudWxsO1xuICAgIHByaXZhdGUgcmVzb2x2ZSE6ICgpID0+IHZvaWQ7XG4gICAgcHJpdmF0ZSByZWplY3QhOiAoZXJyOiBFcnJvcikgPT4gdm9pZDtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgcXVldWU6IEFzeW5jUXVldWUsIHB1YmxpYyBvcHRpb25zPzogQXN5bmNRdWV1ZUFjcXVpc2l0aW9uT3B0aW9ucykge1xuICAgICAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICAgICAgdGhpcy5yZWplY3QgPSByZWplY3Q7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnM/LnNpZ25hbCkge1xuICAgICAgICAgICAgdGhpcy5zZXRBYm9ydFNpZ25hbCh0aGlzLm9wdGlvbnMuc2lnbmFsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzZXRBYm9ydFNpZ25hbChzaWduYWw6IEFib3J0U2lnbmFsKSB7XG4gICAgICAgIGlmIChzaWduYWwuYWJvcnRlZCkgcmV0dXJuO1xuICAgICAgICB0aGlzLnNpZ25hbCA9IHNpZ25hbDtcbiAgICAgICAgdGhpcy5vbkFib3J0ID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5xdWV1ZS5yZW1vdmVFbnRyeSh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCB0aGlzLm9uQWJvcnQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb25zdW1lKCkge1xuICAgICAgICB0aGlzLmNsZWFudXAoKTtcbiAgICAgICAgdGhpcy5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbGVhc2UoKSB7XG4gICAgICAgIHRoaXMuY29uc3VtZSgpO1xuICAgICAgICB0aGlzLnF1ZXVlLnJlbGVhc2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2FuY2VsKCkge1xuICAgICAgICB0aGlzLmNsZWFudXAoKTtcbiAgICAgICAgdGhpcy5yZWplY3QobmV3IEVycm9yKCdDYW5jZWxsZWQnKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGNsZWFudXAoKSB7XG4gICAgICAgIGlmICh0aGlzLm9uQWJvcnQpIHRoaXMuc2lnbmFsPy5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIHRoaXMub25BYm9ydCk7XG4gICAgICAgIHRoaXMuc2lnbmFsID0gbnVsbDtcbiAgICAgICAgdGhpcy5vbkFib3J0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VGFzaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvbWlzZTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHsgRmlsdGVyc05hbWUsIFF1ZXVlRmlsdGVycyB9IGZyb20gJy4uL3R5cGVzL3R5cGVzJztcbmltcG9ydCB7IEF1ZGlvRmlsdGVycyB9IGZyb20gJy4uL3V0aWxzL0F1ZGlvRmlsdGVycyc7XG5pbXBvcnQgeyBHdWlsZFF1ZXVlLCBHdWlsZFF1ZXVlRXZlbnQgfSBmcm9tICcuL0d1aWxkUXVldWUnO1xuaW1wb3J0IHsgQmlxdWFkRmlsdGVycywgRXF1YWxpemVyLCBFcXVhbGl6ZXJCYW5kLCBQQ01GaWx0ZXJzIH0gZnJvbSAnQGRpc2NvcmQtcGxheWVyL2VxdWFsaXplcic7XG5pbXBvcnQgeyBGRm1wZWdTdHJlYW1PcHRpb25zLCBjcmVhdGVGRm1wZWdTdHJlYW0gfSBmcm9tICcuLi91dGlscy9GRm1wZWdTdHJlYW0nO1xuaW1wb3J0IHsgRXhjZXB0aW9ucyB9IGZyb20gJy4uL2Vycm9ycyc7XG5cbnR5cGUgRmlsdGVycyA9IGtleW9mIHR5cGVvZiBBdWRpb0ZpbHRlcnMuZmlsdGVycztcblxuY29uc3QgbWFrZUJhbmRzID0gKGFycjogbnVtYmVyW10pID0+IHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShcbiAgICAgICAge1xuICAgICAgICAgICAgbGVuZ3RoOiBFcXVhbGl6ZXIuQkFORF9DT1VOVFxuICAgICAgICB9LFxuICAgICAgICAoXywgaSkgPT4gKHtcbiAgICAgICAgICAgIGJhbmQ6IGksXG4gICAgICAgICAgICBnYWluOiBhcnJbaV0gPyBhcnJbaV0gLyAzMCA6IDBcbiAgICAgICAgfSlcbiAgICApIGFzIEVxdWFsaXplckJhbmRbXTtcbn07XG5cbnR5cGUgRVFQcmVzZXQgPSB7XG4gICAgRmxhdDogRXF1YWxpemVyQmFuZFtdO1xuICAgIENsYXNzaWNhbDogRXF1YWxpemVyQmFuZFtdO1xuICAgIENsdWI6IEVxdWFsaXplckJhbmRbXTtcbiAgICBEYW5jZTogRXF1YWxpemVyQmFuZFtdO1xuICAgIEZ1bGxCYXNzOiBFcXVhbGl6ZXJCYW5kW107XG4gICAgRnVsbEJhc3NUcmVibGU6IEVxdWFsaXplckJhbmRbXTtcbiAgICBGdWxsVHJlYmxlOiBFcXVhbGl6ZXJCYW5kW107XG4gICAgSGVhZHBob25lczogRXF1YWxpemVyQmFuZFtdO1xuICAgIExhcmdlSGFsbDogRXF1YWxpemVyQmFuZFtdO1xuICAgIExpdmU6IEVxdWFsaXplckJhbmRbXTtcbiAgICBQYXJ0eTogRXF1YWxpemVyQmFuZFtdO1xuICAgIFBvcDogRXF1YWxpemVyQmFuZFtdO1xuICAgIFJlZ2dhZTogRXF1YWxpemVyQmFuZFtdO1xuICAgIFJvY2s6IEVxdWFsaXplckJhbmRbXTtcbiAgICBTa2E6IEVxdWFsaXplckJhbmRbXTtcbiAgICBTb2Z0OiBFcXVhbGl6ZXJCYW5kW107XG4gICAgU29mdFJvY2s6IEVxdWFsaXplckJhbmRbXTtcbiAgICBUZWNobm86IEVxdWFsaXplckJhbmRbXTtcbn07XG5cbmV4cG9ydCBjb25zdCBFcXVhbGl6ZXJDb25maWd1cmF0aW9uUHJlc2V0OiBSZWFkb25seTxFUVByZXNldD4gPSBPYmplY3QuZnJlZXplKHtcbiAgICBGbGF0OiBtYWtlQmFuZHMoW10pLFxuICAgIENsYXNzaWNhbDogbWFrZUJhbmRzKFstMS4xMTAyMmUtMTUsIC0xLjExMDIyZS0xNSwgLTEuMTEwMjJlLTE1LCAtMS4xMTAyMmUtMTUsIC0xLjExMDIyZS0xNSwgLTEuMTEwMjJlLTE1LCAtNy4yLCAtNy4yLCAtNy4yLCAtOS42XSksXG4gICAgQ2x1YjogbWFrZUJhbmRzKFstMS4xMTAyMmUtMTUsIC0xLjExMDIyZS0xNSwgOC4wLCA1LjYsIDUuNiwgNS42LCAzLjIsIC0xLjExMDIyZS0xNSwgLTEuMTEwMjJlLTE1LCAtMS4xMTAyMmUtMTVdKSxcbiAgICBEYW5jZTogbWFrZUJhbmRzKFs5LjYsIDcuMiwgMi40LCAtMS4xMTAyMmUtMTUsIC0xLjExMDIyZS0xNSwgLTUuNiwgLTcuMiwgLTcuMiwgLTEuMTEwMjJlLTE1LCAtMS4xMTAyMmUtMTVdKSxcbiAgICBGdWxsQmFzczogbWFrZUJhbmRzKFstOC4wLCA5LjYsIDkuNiwgNS42LCAxLjYsIC00LjAsIC04LjAsIC0xMC40LCAtMTEuMiwgLTExLjJdKSxcbiAgICBGdWxsQmFzc1RyZWJsZTogbWFrZUJhbmRzKFs3LjIsIDUuNiwgLTEuMTEwMjJlLTE1LCAtNy4yLCAtNC44LCAxLjYsIDguMCwgMTEuMiwgMTIuMCwgMTIuMF0pLFxuICAgIEZ1bGxUcmVibGU6IG1ha2VCYW5kcyhbLTkuNiwgLTkuNiwgLTkuNiwgLTQuMCwgMi40LCAxMS4yLCAxNi4wLCAxNi4wLCAxNi4wLCAxNi44XSksXG4gICAgSGVhZHBob25lczogbWFrZUJhbmRzKFs0LjgsIDExLjIsIDUuNiwgLTMuMiwgLTIuNCwgMS42LCA0LjgsIDkuNiwgMTIuOCwgMTQuNF0pLFxuICAgIExhcmdlSGFsbDogbWFrZUJhbmRzKFsxMC40LCAxMC40LCA1LjYsIDUuNiwgLTEuMTEwMjJlLTE1LCAtNC44LCAtNC44LCAtNC44LCAtMS4xMTAyMmUtMTUsIC0xLjExMDIyZS0xNV0pLFxuICAgIExpdmU6IG1ha2VCYW5kcyhbLTQuOCwgLTEuMTEwMjJlLTE1LCA0LjAsIDUuNiwgNS42LCA1LjYsIDQuMCwgMi40LCAyLjQsIDIuNF0pLFxuICAgIFBhcnR5OiBtYWtlQmFuZHMoWzcuMiwgNy4yLCAtMS4xMTAyMmUtMTUsIC0xLjExMDIyZS0xNSwgLTEuMTEwMjJlLTE1LCAtMS4xMTAyMmUtMTUsIC0xLjExMDIyZS0xNSwgLTEuMTEwMjJlLTE1LCA3LjIsIDcuMl0pLFxuICAgIFBvcDogbWFrZUJhbmRzKFstMS42LCA0LjgsIDcuMiwgOC4wLCA1LjYsIC0xLjExMDIyZS0xNSwgLTIuNCwgLTIuNCwgLTEuNiwgLTEuNl0pLFxuICAgIFJlZ2dhZTogbWFrZUJhbmRzKFstMS4xMTAyMmUtMTUsIC0xLjExMDIyZS0xNSwgLTEuMTEwMjJlLTE1LCAtNS42LCAtMS4xMTAyMmUtMTUsIDYuNCwgNi40LCAtMS4xMTAyMmUtMTUsIC0xLjExMDIyZS0xNSwgLTEuMTEwMjJlLTE1XSksXG4gICAgUm9jazogbWFrZUJhbmRzKFs4LjAsIDQuOCwgLTUuNiwgLTguMCwgLTMuMiwgNC4wLCA4LjgsIDExLjIsIDExLjIsIDExLjJdKSxcbiAgICBTa2E6IG1ha2VCYW5kcyhbLTIuNCwgLTQuOCwgLTQuMCwgLTEuMTEwMjJlLTE1LCA0LjAsIDUuNiwgOC44LCA5LjYsIDExLjIsIDkuNl0pLFxuICAgIFNvZnQ6IG1ha2VCYW5kcyhbNC44LCAxLjYsIC0xLjExMDIyZS0xNSwgLTIuNCwgLTEuMTEwMjJlLTE1LCA0LjAsIDguMCwgOS42LCAxMS4yLCAxMi4wXSksXG4gICAgU29mdFJvY2s6IG1ha2VCYW5kcyhbNC4wLCA0LjAsIDIuNCwgLTEuMTEwMjJlLTE1LCAtNC4wLCAtNS42LCAtMy4yLCAtMS4xMTAyMmUtMTUsIDIuNCwgOC44XSksXG4gICAgVGVjaG5vOiBtYWtlQmFuZHMoWzguMCwgNS42LCAtMS4xMTAyMmUtMTUsIC01LjYsIC00LjgsIC0xLjExMDIyZS0xNSwgOC4wLCA5LjYsIDkuNiwgOC44XSlcbn0pO1xuXG5leHBvcnQgY2xhc3MgRkZtcGVnRmlsdGVyZXI8TWV0YSA9IHVua25vd24+IHtcbiAgICAjZmZtcGVnRmlsdGVyczogRmlsdGVyc1tdID0gW107XG4gICAgI2lucHV0QXJnczogc3RyaW5nW10gPSBbXTtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIGFmOiBHdWlsZFF1ZXVlQXVkaW9GaWx0ZXJzPE1ldGE+KSB7fVxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgZmZtcGVnIG1heSBiZSBza2lwcGVkXG4gICAgICovXG4gICAgcHVibGljIGdldCBza2lwcGFibGUoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuYWYucXVldWUucGxheWVyLm9wdGlvbnMuc2tpcEZGbXBlZztcbiAgICB9XG5cbiAgICAjc2V0RmlsdGVycyhmaWx0ZXJzOiBGaWx0ZXJzW10pIHtcbiAgICAgICAgY29uc3QgeyBxdWV1ZSB9ID0gdGhpcy5hZjtcbiAgICAgICAgLy8gc2tpcCBpZiBmaWx0ZXJzIGFyZSB0aGUgc2FtZVxuICAgICAgICBpZiAoZmlsdGVycy5ldmVyeSgoZikgPT4gdGhpcy4jZmZtcGVnRmlsdGVycy5pbmNsdWRlcyhmKSkgJiYgdGhpcy4jZmZtcGVnRmlsdGVycy5ldmVyeSgoZikgPT4gZmlsdGVycy5pbmNsdWRlcyhmKSkpIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICAgICAgICBjb25zdCBpZ25vcmVGaWx0ZXJzID0gdGhpcy5maWx0ZXJzLnNvbWUoKGZmKSA9PiBmZiA9PT0gJ25pZ2h0Y29yZScgfHwgZmYgPT09ICd2YXBvcndhdmUnKSAmJiAhZmlsdGVycy5zb21lKChmZikgPT4gZmYgPT09ICduaWdodGNvcmUnIHx8IGZmID09PSAndmFwb3J3YXZlJyk7XG4gICAgICAgIGNvbnN0IHNlZWtUaW1lID0gcXVldWUubm9kZS5nZXRUaW1lc3RhbXAoaWdub3JlRmlsdGVycyk/LmN1cnJlbnQudmFsdWUgfHwgMDtcbiAgICAgICAgY29uc3QgcHJldiA9IHRoaXMuI2ZmbXBlZ0ZpbHRlcnMuc2xpY2UoKTtcbiAgICAgICAgdGhpcy4jZmZtcGVnRmlsdGVycyA9IFsuLi5uZXcgU2V0KGZpbHRlcnMpXTtcblxuICAgICAgICByZXR1cm4gdGhpcy5hZi50cmlnZ2VyUmVwbGF5KHNlZWtUaW1lKS50aGVuKCh0KSA9PiB7XG4gICAgICAgICAgICBxdWV1ZS5lbWl0KEd1aWxkUXVldWVFdmVudC5hdWRpb0ZpbHRlcnNVcGRhdGUsIHF1ZXVlLCBwcmV2LCB0aGlzLiNmZm1wZWdGaWx0ZXJzLnNsaWNlKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCBpbnB1dCBhcmdzIGZvciBGRm1wZWdcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0SW5wdXRBcmdzKGFyZ3M6IHN0cmluZ1tdKSB7XG4gICAgICAgIGlmICghYXJncy5ldmVyeSgoYXJnKSA9PiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJykpIHRocm93IEV4Y2VwdGlvbnMuRVJSX0lOVkFMSURfQVJHX1RZUEUoJ2FyZ3MnLCAnQXJyYXk8c3RyaW5nPicsICdpbnZhbGlkIGl0ZW0ocyknKTtcbiAgICAgICAgdGhpcy4jaW5wdXRBcmdzID0gYXJncztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgaW5wdXQgYXJnc1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgaW5wdXRBcmdzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jaW5wdXRBcmdzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBlbmNvZGVyIGFyZ3NcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGVuY29kZXJBcmdzKCkge1xuICAgICAgICBpZiAoIXRoaXMuZmlsdGVycy5sZW5ndGgpIHJldHVybiBbXTtcblxuICAgICAgICByZXR1cm4gWyctYWYnLCB0aGlzLnRvU3RyaW5nKCldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBmaW5hbCBmZm1wZWcgYXJnc1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgYXJncygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRBcmdzLmNvbmNhdCh0aGlzLmVuY29kZXJBcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgZmZtcGVnIHN0cmVhbVxuICAgICAqIEBwYXJhbSBzb3VyY2UgVGhlIHN0cmVhbSBzb3VyY2VcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgc3RyZWFtIG9wdGlvbnNcbiAgICAgKi9cbiAgICBwdWJsaWMgY3JlYXRlU3RyZWFtKHNvdXJjZTogc3RyaW5nIHwgUmVhZGFibGUsIG9wdGlvbnM6IEZGbXBlZ1N0cmVhbU9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHRoaXMuI2lucHV0QXJncy5sZW5ndGgpIG9wdGlvbnMuZW5jb2RlckFyZ3MgPSBbLi4udGhpcy4jaW5wdXRBcmdzLCAuLi4ob3B0aW9ucy5lbmNvZGVyQXJncyB8fCBbXSldO1xuICAgICAgICByZXR1cm4gY3JlYXRlRkZtcGVnU3RyZWFtKHNvdXJjZSwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IGZmbXBlZyBmaWx0ZXJzXG4gICAgICogQHBhcmFtIGZpbHRlcnMgVGhlIGZpbHRlcnNcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0RmlsdGVycyhmaWx0ZXJzOiBGaWx0ZXJzW10gfCBSZWNvcmQ8RmlsdGVycywgYm9vbGVhbj4gfCBzdHJpbmdbXSB8IGJvb2xlYW4pIHtcbiAgICAgICAgbGV0IF9maWx0ZXJzOiBGaWx0ZXJzW10gPSBbXTtcbiAgICAgICAgaWYgKHR5cGVvZiBmaWx0ZXJzID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIF9maWx0ZXJzID0gIWZpbHRlcnMgPyBbXSA6IChPYmplY3Qua2V5cyhBdWRpb0ZpbHRlcnMuZmlsdGVycykgYXMgRmlsdGVyc1tdKTtcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGZpbHRlcnMpKSB7XG4gICAgICAgICAgICBfZmlsdGVycyA9IGZpbHRlcnMgYXMgRmlsdGVyc1tdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX2ZpbHRlcnMgPSBPYmplY3QuZW50cmllcyhmaWx0ZXJzKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKHJlcykgPT4gcmVzWzFdID09PSB0cnVlKVxuICAgICAgICAgICAgICAgIC5tYXAoKG0pID0+IG1bMF0pIGFzIEZpbHRlcnNbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLiNzZXRGaWx0ZXJzKF9maWx0ZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50bHkgYWN0aXZlIGZmbXBlZyBmaWx0ZXJzXG4gICAgICovXG4gICAgcHVibGljIGdldCBmaWx0ZXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jZmZtcGVnRmlsdGVycztcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IGZpbHRlcnMoZmlsdGVyczogRmlsdGVyc1tdKSB7XG4gICAgICAgIHRoaXMuc2V0RmlsdGVycyhmaWx0ZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGUgZ2l2ZW4gZmZtcGVnIGZpbHRlcihzKVxuICAgICAqIEBwYXJhbSBmaWx0ZXJzIFRoZSBmaWx0ZXIocylcbiAgICAgKi9cbiAgICBwdWJsaWMgdG9nZ2xlKGZpbHRlcnM6IEZpbHRlcnNbXSB8IEZpbHRlcnMpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGZpbHRlcnMpKSBmaWx0ZXJzID0gW2ZpbHRlcnNdO1xuICAgICAgICBjb25zdCBmcmVzaDogRmlsdGVyc1tdID0gW107XG5cbiAgICAgICAgZmlsdGVycy5mb3JFYWNoKChmKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5maWx0ZXJzLmluY2x1ZGVzKGYpKSByZXR1cm47XG4gICAgICAgICAgICBmcmVzaC5wdXNoKGYpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy4jc2V0RmlsdGVycyh0aGlzLiNmZm1wZWdGaWx0ZXJzLmZpbHRlcigocikgPT4gIWZpbHRlcnMuaW5jbHVkZXMocikpLmNvbmNhdChmcmVzaCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCBkZWZhdWx0IGZpbHRlcnNcbiAgICAgKiBAcGFyYW0gZmYgRmlsdGVycyBsaXN0XG4gICAgICovXG4gICAgcHVibGljIHNldERlZmF1bHRzKGZmOiBGaWx0ZXJzW10pIHtcbiAgICAgICAgdGhpcy4jZmZtcGVnRmlsdGVycyA9IGZmO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBsaXN0IG9mIGVuYWJsZWQgZmlsdGVyc1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRGaWx0ZXJzRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2ZmbXBlZ0ZpbHRlcnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGxpc3Qgb2YgZGlzYWJsZWQgZmlsdGVyc1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRGaWx0ZXJzRGlzYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiBBdWRpb0ZpbHRlcnMubmFtZXMuZmlsdGVyKChmKSA9PiAhdGhpcy4jZmZtcGVnRmlsdGVycy5pbmNsdWRlcyhmKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIGZpbHRlciBpcyBlbmFibGVkXG4gICAgICogQHBhcmFtIGZpbHRlciBUaGUgZmlsdGVyXG4gICAgICovXG4gICAgcHVibGljIGlzRW5hYmxlZDxUIGV4dGVuZHMgRmlsdGVycz4oZmlsdGVyOiBUKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLiNmZm1wZWdGaWx0ZXJzLmluY2x1ZGVzKGZpbHRlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIGZpbHRlciBpcyBkaXNhYmxlZFxuICAgICAqIEBwYXJhbSBmaWx0ZXIgVGhlIGZpbHRlclxuICAgICAqL1xuICAgIHB1YmxpYyBpc0Rpc2FibGVkPFQgZXh0ZW5kcyBGaWx0ZXJzPihmaWx0ZXI6IFQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmlzRW5hYmxlZChmaWx0ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBnaXZlbiBmaWx0ZXIgaXMgYSB2YWxpZCBmaWx0ZXJcbiAgICAgKiBAcGFyYW0gZmlsdGVyIFRoZSBmaWx0ZXIgdG8gdGVzdFxuICAgICAqL1xuICAgIHB1YmxpYyBpc1ZhbGlkRmlsdGVyKGZpbHRlcjogc3RyaW5nKTogZmlsdGVyIGlzIEZpbHRlcnNOYW1lIHtcbiAgICAgICAgcmV0dXJuIEF1ZGlvRmlsdGVycy5oYXMoZmlsdGVyIGFzIEZpbHRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgY3VycmVudCBmaWx0ZXJzIHRvIGFycmF5XG4gICAgICovXG4gICAgcHVibGljIHRvQXJyYXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlcnMubWFwKChmaWx0ZXIpID0+IEF1ZGlvRmlsdGVycy5nZXQoZmlsdGVyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCBjdXJyZW50IGZpbHRlcnMgdG8gSlNPTiBvYmplY3RcbiAgICAgKi9cbiAgICBwdWJsaWMgdG9KU09OKCkge1xuICAgICAgICBjb25zdCBvYmogPSB7fSBhcyBSZWNvcmQ8a2V5b2YgUXVldWVGaWx0ZXJzLCBzdHJpbmc+O1xuXG4gICAgICAgIHRoaXMuZmlsdGVycy5mb3JFYWNoKChmaWx0ZXIpID0+IChvYmpbZmlsdGVyXSA9IEF1ZGlvRmlsdGVycy5nZXQoZmlsdGVyKSkpO1xuXG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGN1cnJlbnQgZmlsdGVyc1xuICAgICAqL1xuICAgIHB1YmxpYyB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIEF1ZGlvRmlsdGVycy5jcmVhdGUodGhpcy5maWx0ZXJzKTtcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR3VpbGRRdWV1ZUFGaWx0ZXJzQ2FjaGUge1xuICAgIGVxdWFsaXplcjogRXF1YWxpemVyQmFuZFtdO1xuICAgIGJpcXVhZDogQmlxdWFkRmlsdGVycyB8IG51bGw7XG4gICAgZmlsdGVyczogUENNRmlsdGVyc1tdO1xuICAgIHZvbHVtZTogbnVtYmVyO1xuICAgIHNhbXBsZVJhdGU6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEd1aWxkUXVldWVBdWRpb0ZpbHRlcnM8TWV0YSA9IHVua25vd24+IHtcbiAgICBwdWJsaWMgZ3JhcGggPSBuZXcgQUZpbHRlckdyYXBoPE1ldGE+KHRoaXMpO1xuICAgIHB1YmxpYyBmZm1wZWcgPSBuZXcgRkZtcGVnRmlsdGVyZXI8TWV0YT4odGhpcyk7XG4gICAgcHVibGljIGVxdWFsaXplclByZXNldHMgPSBFcXVhbGl6ZXJDb25maWd1cmF0aW9uUHJlc2V0O1xuICAgIHB1YmxpYyBfbGFzdEZpbHRlcnNDYWNoZTogR3VpbGRRdWV1ZUFGaWx0ZXJzQ2FjaGUgPSB7XG4gICAgICAgIGJpcXVhZDogbnVsbCxcbiAgICAgICAgZXF1YWxpemVyOiBbXSxcbiAgICAgICAgZmlsdGVyczogW10sXG4gICAgICAgIHZvbHVtZTogMTAwLFxuICAgICAgICBzYW1wbGVSYXRlOiAtMVxuICAgIH07XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBxdWV1ZTogR3VpbGRRdWV1ZTxNZXRhPikge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMucXVldWUub3B0aW9ucy52b2x1bWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLl9sYXN0RmlsdGVyc0NhY2hlLnZvbHVtZSA9IHRoaXMucXVldWUub3B0aW9ucy52b2x1bWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUT0RPOiBlbmFibGUgdGhpcyBpbiB0aGUgZnV0dXJlXG4gICAgLy8gcHVibGljIGdldCBmZm1wZWcoKTogRkZtcGVnRmlsdGVyZXI8TWV0YT4gfCBudWxsIHtcbiAgICAvLyAgICAgaWYgKHRoaXMucXVldWUucGxheWVyLm9wdGlvbnMuc2tpcEZGbXBlZykge1xuICAgIC8vICAgICAgICAgaWYgKHRoaXMuI2ZmbXBlZykgdGhpcy4jZmZtcGVnID0gbnVsbDtcbiAgICAvLyAgICAgICAgIHJldHVybiBudWxsO1xuICAgIC8vICAgICB9XG5cbiAgICAvLyAgICAgaWYgKCF0aGlzLiNmZm1wZWcpIHtcbiAgICAvLyAgICAgICAgIHRoaXMuI2ZmbXBlZyA9IG5ldyBGRm1wZWdGaWx0ZXJlcjxNZXRhPih0aGlzKTtcbiAgICAvLyAgICAgfVxuXG4gICAgLy8gICAgIHJldHVybiB0aGlzLiNmZm1wZWc7XG4gICAgLy8gfVxuXG4gICAgLyoqXG4gICAgICogVm9sdW1lIHRyYW5zZm9ybWVyXG4gICAgICovXG4gICAgcHVibGljIGdldCB2b2x1bWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXVlLmRpc3BhdGNoZXI/LmRzcD8udm9sdW1lIHx8IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogMTUgQmFuZCBFcXVhbGl6ZXJcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGVxdWFsaXplcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucXVldWUuZGlzcGF0Y2hlcj8uZXF1YWxpemVyIHx8IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlnaXRhbCBiaXF1YWQgZmlsdGVyc1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgYmlxdWFkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5xdWV1ZS5kaXNwYXRjaGVyPy5iaXF1YWQgfHwgbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEU1AgZmlsdGVyc1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgZmlsdGVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucXVldWUuZGlzcGF0Y2hlcj8uZmlsdGVycyB8fCBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEF1ZGlvIHJlc2FtcGxlclxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgcmVzYW1wbGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5xdWV1ZS5kaXNwYXRjaGVyPy5yZXNhbXBsZXIgfHwgbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYXkgY3VycmVudCB0cmFjayBpbiB0cmFuc2l0aW9uIG1vZGVcbiAgICAgKiBAcGFyYW0gc2VlayBUaGUgZHVyYXRpb24gdG8gc2VlayB0b1xuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyB0cmlnZ2VyUmVwbGF5KHNlZWsgPSAwKSB7XG4gICAgICAgIGlmICghdGhpcy5xdWV1ZS5jdXJyZW50VHJhY2spIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgZW50cnkgPSB0aGlzLnF1ZXVlLm5vZGUudGFza3NRdWV1ZS5hY3F1aXJlKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBlbnRyeS5nZXRUYXNrKCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnF1ZXVlLm5vZGUucGxheSh0aGlzLnF1ZXVlLmN1cnJlbnRUcmFjaywge1xuICAgICAgICAgICAgICAgIHF1ZXVlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzZWVrLFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25Nb2RlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMucXVldWUubm9kZS50YXNrc1F1ZXVlLnJlbGVhc2UoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgIHRoaXMucXVldWUubm9kZS50YXNrc1F1ZXVlLnJlbGVhc2UoKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFGaWx0ZXJHcmFwaDxNZXRhID0gdW5rbm93bj4ge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgYWY6IEd1aWxkUXVldWVBdWRpb0ZpbHRlcnM8TWV0YT4pIHt9XG5cbiAgICBwdWJsaWMgZ2V0IGZmbXBlZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWYuZmZtcGVnPy5maWx0ZXJzID8/IFtdO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgZXF1YWxpemVyKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuYWYuZXF1YWxpemVyPy5iYW5kTXVsdGlwbGllcnMgfHwgW10pLm1hcCgobSwgaSkgPT4gKHtcbiAgICAgICAgICAgIGJhbmQ6IGksXG4gICAgICAgICAgICBnYWluOiBtXG4gICAgICAgIH0pKSBhcyBFcXVhbGl6ZXJCYW5kW107XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBiaXF1YWQoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5hZi5iaXF1YWQ/LmdldEZpbHRlck5hbWUoKSBhcyBFeGNsdWRlPEJpcXVhZEZpbHRlcnMsIG51bWJlcj4gfCBudWxsKSB8fCBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgZmlsdGVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWYuZmlsdGVycz8uZmlsdGVycyB8fCBbXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHZvbHVtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWYudm9sdW1lO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgcmVzYW1wbGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZi5yZXNhbXBsZXI7XG4gICAgfVxuXG4gICAgcHVibGljIGR1bXAoKTogRmlsdGVyR3JhcGgge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmZtcGVnOiB0aGlzLmZmbXBlZyxcbiAgICAgICAgICAgIGVxdWFsaXplcjogdGhpcy5lcXVhbGl6ZXIsXG4gICAgICAgICAgICBiaXF1YWQ6IHRoaXMuYmlxdWFkLFxuICAgICAgICAgICAgZmlsdGVyczogdGhpcy5maWx0ZXJzLFxuICAgICAgICAgICAgc2FtcGxlUmF0ZTogdGhpcy5yZXNhbXBsZXI/LnRhcmdldFNhbXBsZVJhdGUgfHwgdGhpcy5yZXNhbXBsZXI/LnNhbXBsZVJhdGUgfHwgNDgwMDAsXG4gICAgICAgICAgICB2b2x1bWU6IHRoaXMudm9sdW1lPy52b2x1bWUgPz8gMTAwXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbHRlckdyYXBoIHtcbiAgICBmZm1wZWc6IEZpbHRlcnNbXTtcbiAgICBlcXVhbGl6ZXI6IEVxdWFsaXplckJhbmRbXTtcbiAgICBiaXF1YWQ6IEV4Y2x1ZGU8QmlxdWFkRmlsdGVycywgbnVtYmVyPiB8IG51bGw7XG4gICAgZmlsdGVyczogUENNRmlsdGVyc1tdO1xuICAgIHZvbHVtZTogbnVtYmVyO1xuICAgIHNhbXBsZVJhdGU6IG51bWJlcjtcbn1cbiIsICJpbXBvcnQgdHlwZSB7IER1cGxleCwgUmVhZGFibGUgfSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0ICogYXMgcHJpc20gZnJvbSAncHJpc20tbWVkaWEnO1xuaW1wb3J0IHsgRkZtcGVnIH0gZnJvbSAnQGRpc2NvcmQtcGxheWVyL2ZmbXBlZyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRkZtcGVnU3RyZWFtT3B0aW9ucyB7XG4gICAgZm10Pzogc3RyaW5nO1xuICAgIGVuY29kZXJBcmdzPzogc3RyaW5nW107XG4gICAgc2Vlaz86IG51bWJlcjtcbiAgICBza2lwPzogYm9vbGVhbjtcbiAgICBjb29raWVzPzogc3RyaW5nO1xuICAgIHVzZUxlZ2FjeUZGbXBlZz86IGJvb2xlYW47XG59XG5cbmNvbnN0IGdldEZGbXBlZ1Byb3ZpZGVyID0gKGxlZ2FjeSA9IGZhbHNlKSA9PiAobGVnYWN5ID8gKHByaXNtIGFzIHR5cGVvZiBwcmlzbSAmIHsgZGVmYXVsdDogdHlwZW9mIHByaXNtIH0pLmRlZmF1bHQ/LkZGbXBlZyB8fCBwcmlzbS5GRm1wZWcgOiBGRm1wZWcpO1xuXG5jb25zdCByZXNvbHZlQXJncyA9IChjb25maWc6IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IG51bWJlciB8IG51bGwgfCB1bmRlZmluZWQ+KTogc3RyaW5nW10gPT4ge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhjb25maWcpLnJlZHVjZSgoYWNjLCBba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBhY2M7XG4gICAgICAgIGFjYy5wdXNoKGAtJHtrZXl9YCwgU3RyaW5nKHZhbHVlKSk7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10gYXMgc3RyaW5nW10pO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIEZGTVBFR19BUkdTX1NUUklORyhzdHJlYW06IHN0cmluZywgZm10Pzogc3RyaW5nLCBjb29raWVzPzogc3RyaW5nKSB7XG4gICAgY29uc3QgYXJncyA9IHJlc29sdmVBcmdzKHtcbiAgICAgICAgcmVjb25uZWN0OiAxLFxuICAgICAgICByZWNvbm5lY3Rfc3RyZWFtZWQ6IDEsXG4gICAgICAgIHJlY29ubmVjdF9kZWxheV9tYXg6IDUsXG4gICAgICAgIGk6IHN0cmVhbSxcbiAgICAgICAgYW5hbHl6ZWR1cmF0aW9uOiAwLFxuICAgICAgICBsb2dsZXZlbDogMCxcbiAgICAgICAgYXI6IDQ4MDAwLFxuICAgICAgICBhYzogMixcbiAgICAgICAgZjogYCR7dHlwZW9mIGZtdCA9PT0gJ3N0cmluZycgPyBmbXQgOiAnczE2bGUnfWAsXG4gICAgICAgIGFjb2RlYzogZm10ID09PSAnb3B1cycgPyAnbGlib3B1cycgOiBudWxsLFxuICAgICAgICBjb29raWVzOiB0eXBlb2YgY29va2llcyA9PT0gJ3N0cmluZycgPyAoIWNvb2tpZXMuaW5jbHVkZXMoJyAnKSA/IGNvb2tpZXMgOiBgXCIke2Nvb2tpZXN9XCJgKSA6IG51bGxcbiAgICB9KTtcblxuICAgIHJldHVybiBhcmdzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRkZNUEVHX0FSR1NfUElQRUQoZm10Pzogc3RyaW5nKSB7XG4gICAgY29uc3QgYXJncyA9IHJlc29sdmVBcmdzKHtcbiAgICAgICAgYW5hbHl6ZWR1cmF0aW9uOiAwLFxuICAgICAgICBsb2dsZXZlbDogMCxcbiAgICAgICAgYXI6IDQ4MDAwLFxuICAgICAgICBhYzogMixcbiAgICAgICAgZjogYCR7dHlwZW9mIGZtdCA9PT0gJ3N0cmluZycgPyBmbXQgOiAnczE2bGUnfWAsXG4gICAgICAgIGFjb2RlYzogZm10ID09PSAnb3B1cycgPyAnbGlib3B1cycgOiBudWxsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJncztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIEZGbXBlZyBzdHJlYW1cbiAqIEBwYXJhbSBzdHJlYW0gVGhlIHNvdXJjZSBzdHJlYW1cbiAqIEBwYXJhbSBvcHRpb25zIEZGbXBlZyBzdHJlYW0gb3B0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRkZtcGVnU3RyZWFtKHN0cmVhbTogUmVhZGFibGUgfCBEdXBsZXggfCBzdHJpbmcsIG9wdGlvbnM/OiBGRm1wZWdTdHJlYW1PcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnM/LnNraXAgJiYgdHlwZW9mIHN0cmVhbSAhPT0gJ3N0cmluZycpIHJldHVybiBzdHJlYW07XG4gICAgb3B0aW9ucyA/Pz0ge307XG4gICAgY29uc3QgYXJncyA9IHR5cGVvZiBzdHJlYW0gPT09ICdzdHJpbmcnID8gRkZNUEVHX0FSR1NfU1RSSU5HKHN0cmVhbSwgb3B0aW9ucy5mbXQsIG9wdGlvbnMuY29va2llcykgOiBGRk1QRUdfQVJHU19QSVBFRChvcHRpb25zLmZtdCk7XG5cbiAgICBpZiAoIU51bWJlci5pc05hTihvcHRpb25zLnNlZWspKSBhcmdzLnVuc2hpZnQoJy1zcycsIFN0cmluZyhvcHRpb25zLnNlZWspKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zLmVuY29kZXJBcmdzKSkgYXJncy5wdXNoKC4uLm9wdGlvbnMuZW5jb2RlckFyZ3MpO1xuXG4gICAgY29uc3QgRkZNUEVHID0gZ2V0RkZtcGVnUHJvdmlkZXIoISFvcHRpb25zLnVzZUxlZ2FjeUZGbXBlZyk7XG5cbiAgICBjb25zdCB0cmFuc2NvZGVyID0gbmV3IEZGTVBFRyh7IHNoZWxsOiBmYWxzZSwgYXJncyB9KTtcblxuICAgIHRyYW5zY29kZXIub24oJ2Nsb3NlJywgKCkgPT4gdHJhbnNjb2Rlci5kZXN0cm95KCkpO1xuXG4gICAgaWYgKHR5cGVvZiBzdHJlYW0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHN0cmVhbS5vbignZXJyb3InLCAoKSA9PiB0cmFuc2NvZGVyLmRlc3Ryb3koKSk7XG4gICAgICAgIHN0cmVhbS5waXBlKHRyYW5zY29kZXIpO1xuICAgIH1cblxuICAgIHJldHVybiB0cmFuc2NvZGVyO1xufVxuIiwgImltcG9ydCB7IEd1aWxkUXVldWUgfSBmcm9tICcuL0d1aWxkUXVldWUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEd1aWxkUXVldWVTdGF0aXN0aWNzTWV0YWRhdGEge1xuICAgIGxhdGVuY3k6IHtcbiAgICAgICAgZXZlbnRMb29wOiBudW1iZXI7XG4gICAgICAgIHZvaWNlQ29ubmVjdGlvbjogbnVtYmVyO1xuICAgIH07XG4gICAgc3RhdHVzOiB7XG4gICAgICAgIGJ1ZmZlcmluZzogYm9vbGVhbjtcbiAgICAgICAgcGxheWluZzogYm9vbGVhbjtcbiAgICAgICAgcGF1c2VkOiBib29sZWFuO1xuICAgICAgICBpZGxlOiBib29sZWFuO1xuICAgIH07XG4gICAgdHJhY2tzQ291bnQ6IG51bWJlcjtcbiAgICBoaXN0b3J5U2l6ZTogbnVtYmVyO1xuICAgIGV4dHJhY3RvcnM6IG51bWJlcjtcbiAgICBsaXN0ZW5lcnM6IG51bWJlcjtcbiAgICBtZW1vcnlVc2FnZTogTm9kZUpTLk1lbW9yeVVzYWdlO1xuICAgIHZlcnNpb25zOiB7XG4gICAgICAgIG5vZGU6IHN0cmluZztcbiAgICAgICAgcGxheWVyOiBzdHJpbmc7XG4gICAgfTtcbn1cblxuZXhwb3J0IGNsYXNzIEd1aWxkUXVldWVTdGF0aXN0aWNzPE1ldGEgPSB1bmtub3duPiB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBxdWV1ZTogR3VpbGRRdWV1ZTxNZXRhPikge31cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIHN0YXRpc3RpY3Mgb2YgdGhpcyBxdWV1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBnZW5lcmF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhdGVuY3k6IHtcbiAgICAgICAgICAgICAgICBldmVudExvb3A6IHRoaXMucXVldWUucGxheWVyLmV2ZW50TG9vcExhZyxcbiAgICAgICAgICAgICAgICB2b2ljZUNvbm5lY3Rpb246IHRoaXMucXVldWUucGluZ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YXR1czoge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcmluZzogdGhpcy5xdWV1ZS5ub2RlLmlzQnVmZmVyaW5nKCksXG4gICAgICAgICAgICAgICAgcGxheWluZzogdGhpcy5xdWV1ZS5ub2RlLmlzUGxheWluZygpLFxuICAgICAgICAgICAgICAgIHBhdXNlZDogdGhpcy5xdWV1ZS5ub2RlLmlzUGF1c2VkKCksXG4gICAgICAgICAgICAgICAgaWRsZTogdGhpcy5xdWV1ZS5ub2RlLmlzSWRsZSgpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHJhY2tzQ291bnQ6IHRoaXMucXVldWUudHJhY2tzLnNpemUsXG4gICAgICAgICAgICBoaXN0b3J5U2l6ZTogdGhpcy5xdWV1ZS5oaXN0b3J5LnRyYWNrcy5zaXplLFxuICAgICAgICAgICAgZXh0cmFjdG9yczogdGhpcy5xdWV1ZS5wbGF5ZXIuZXh0cmFjdG9ycy5zaXplLFxuICAgICAgICAgICAgbGlzdGVuZXJzOiB0aGlzLnF1ZXVlLmd1aWxkLm1lbWJlcnMubWU/LnZvaWNlLmNoYW5uZWw/Lm1lbWJlcnMuZmlsdGVyKChtKSA9PiAhbS51c2VyLmJvdCkuc2l6ZSB8fCAwLFxuICAgICAgICAgICAgbWVtb3J5VXNhZ2U6IHByb2Nlc3MubWVtb3J5VXNhZ2UoKSxcbiAgICAgICAgICAgIHZlcnNpb25zOiB7XG4gICAgICAgICAgICAgICAgbm9kZTogcHJvY2Vzcy52ZXJzaW9uLFxuICAgICAgICAgICAgICAgIHBsYXllcjogJzYuNy4xJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGFzIEd1aWxkUXVldWVTdGF0aXN0aWNzTWV0YWRhdGE7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IEV4Y2VwdGlvbnMgfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgTHJjR2V0UmVzdWx0LCBMcmNTZWFyY2hSZXN1bHQgfSBmcm9tICcuLi9scmNsaWIvTHJjTGliJztcbmltcG9ydCB0eXBlIHsgR3VpbGRRdWV1ZSB9IGZyb20gJy4vR3VpbGRRdWV1ZSc7XG5cbmV4cG9ydCB0eXBlIEx5cmljc0RhdGEgPSBNYXA8bnVtYmVyLCBzdHJpbmc+O1xuZXhwb3J0IHR5cGUgVW5zdWJzY3JpYmUgPSAoKSA9PiB2b2lkO1xuZXhwb3J0IHR5cGUgTHlyaWNzQ2FsbGJhY2sgPSAobHlyaWNzOiBzdHJpbmcsIHRpbWVzdGFtcDogbnVtYmVyKSA9PiB1bmtub3duO1xuZXhwb3J0IHR5cGUgTHlyaWNzQXQgPSB7IHRpbWVzdGFtcDogbnVtYmVyOyBsaW5lOiBzdHJpbmcgfTtcblxuY29uc3QgdGltZXN0YW1wUGF0dGVybiA9IC9cXFsoXFxkezJ9KTooXFxkezJ9KVxcLihcXGR7Mn0pXFxdLztcblxuZXhwb3J0IGNsYXNzIFN5bmNlZEx5cmljc1Byb3ZpZGVyIHtcbiAgICAjbG9vcDogTm9kZUpTLlRpbWVvdXQgfCBudWxsID0gbnVsbDtcbiAgICAjY2FsbGJhY2s6IEx5cmljc0NhbGxiYWNrIHwgbnVsbCA9IG51bGw7XG4gICAgI29uVW5zdWJzY3JpYmU6IFVuc3Vic2NyaWJlIHwgbnVsbCA9IG51bGw7XG5cbiAgICBwdWJsaWMgaW50ZXJ2YWwgPSAxMDA7XG4gICAgcHVibGljIHJlYWRvbmx5IGx5cmljczogTHlyaWNzRGF0YSA9IG5ldyBNYXAoKTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgcXVldWU6IEd1aWxkUXVldWUsIHB1YmxpYyByZWFkb25seSByYXc/OiBMcmNHZXRSZXN1bHQgfCBMcmNTZWFyY2hSZXN1bHQpIHtcbiAgICAgICAgaWYgKHJhdz8uc3luY2VkTHlyaWNzKSB0aGlzLmxvYWQocmF3Py5zeW5jZWRMeXJpY3MpO1xuICAgIH1cblxuICAgIHB1YmxpYyBpc1N1YnNjcmliZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNjYWxsYmFjayAhPT0gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgbG9hZChseXJpY3M6IHN0cmluZykge1xuICAgICAgICBpZiAoIWx5cmljcykgdGhyb3cgRXhjZXB0aW9ucy5FUlJfTk9UX0VYSVNUSU5HKCdzeW5jZWRMeXJpY3MnKTtcblxuICAgICAgICB0aGlzLmx5cmljcy5jbGVhcigpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG5cbiAgICAgICAgY29uc3QgbGluZXMgPSBseXJpY3Muc3BsaXQoJ1xcbicpO1xuXG4gICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBsaW5lLm1hdGNoKHRpbWVzdGFtcFBhdHRlcm4pO1xuXG4gICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBbLCBtaW51dGVzLCBzZWNvbmRzLCBtaWxsaXNlY29uZHNdID0gbWF0Y2g7XG4gICAgICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gcGFyc2VJbnQobWludXRlcykgKiA2MCAqIDEwMDAgKyBwYXJzZUludChzZWNvbmRzKSAqIDEwMDAgKyBwYXJzZUludChtaWxsaXNlY29uZHMpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5seXJpY3Muc2V0KHRpbWVzdGFtcCwgbGluZS5yZXBsYWNlKHRpbWVzdGFtcFBhdHRlcm4sICcnKS50cmltKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbHlyaWNzIGF0IGEgc3BlY2lmaWMgdGltZSBvciBhdCB0aGUgY2xvc2VzdCB0aW1lIChcdTAwQjEyIHNlY29uZHMpXG4gICAgICogQHBhcmFtIHRpbWUgVGhlIHRpbWUgaW4gbWlsbGlzZWNvbmRzXG4gICAgICovXG4gICAgcHVibGljIGF0KHRpbWU6IG51bWJlcik6IEx5cmljc0F0IHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IGxvd2VzdFRpbWUgPSB0aGlzLmx5cmljcy5rZXlzKCkubmV4dCgpLnZhbHVlO1xuICAgICAgICBpZiAobG93ZXN0VGltZSA9PSBudWxsIHx8IHRpbWUgPCBsb3dlc3RUaW1lKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMubHlyaWNzLmhhcyh0aW1lKSkgcmV0dXJuIHsgbGluZTogdGhpcy5seXJpY3MuZ2V0KHRpbWUpIGFzIHN0cmluZywgdGltZXN0YW1wOiB0aW1lIH07XG5cbiAgICAgICAgY29uc3Qga2V5cyA9IEFycmF5LmZyb20odGhpcy5seXJpY3Mua2V5cygpKTtcblxuICAgICAgICBjb25zdCBjbG9zZXN0ID0ga2V5cy5yZWR1Y2UoKGEsIGIpID0+IChNYXRoLmFicyhiIC0gdGltZSkgPCBNYXRoLmFicyhhIC0gdGltZSkgPyBiIDogYSkpO1xuXG4gICAgICAgIGlmIChjbG9zZXN0ID4gdGltZSkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKGNsb3Nlc3QgLSB0aW1lKSA+IDIwMDApIHJldHVybiBudWxsO1xuXG4gICAgICAgIGNvbnN0IGxpbmUgPSB0aGlzLmx5cmljcy5nZXQoY2xvc2VzdCk7XG5cbiAgICAgICAgaWYgKCFsaW5lKSByZXR1cm4gbnVsbDtcblxuICAgICAgICByZXR1cm4geyB0aW1lc3RhbXA6IGNsb3Nlc3QsIGxpbmUgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBmb3IgdGhlIGx5cmljcyBjaGFuZ2UuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvblxuICAgICAqL1xuICAgIHB1YmxpYyBvbkNoYW5nZShjYWxsYmFjazogTHlyaWNzQ2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy4jY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayB0byBkZXRlY3Qgd2hlbiB0aGUgcHJvdmlkZXIgaXMgdW5zdWJzY3JpYmVkLlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBwdWJsaWMgb25VbnN1YnNjcmliZShjYWxsYmFjazogVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgdGhpcy4jb25VbnN1YnNjcmliZSA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVuc3Vic2NyaWJlcyBmcm9tIHRoZSBxdWV1ZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICh0aGlzLiNsb29wKSBjbGVhckludGVydmFsKHRoaXMuI2xvb3ApO1xuICAgICAgICBpZiAodGhpcy4jb25VbnN1YnNjcmliZSkgdGhpcy4jb25VbnN1YnNjcmliZSgpO1xuXG4gICAgICAgIHRoaXMuI2NhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgdGhpcy4jb25VbnN1YnNjcmliZSA9IG51bGw7XG4gICAgICAgIHRoaXMuI2xvb3AgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgdG8gdGhlIHF1ZXVlIHRvIG1vbml0b3IgdGhlIGN1cnJlbnQgdGltZS5cbiAgICAgKiBAcmV0dXJucyBUaGUgdW5zdWJzY3JpYmUgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBwdWJsaWMgc3Vic2NyaWJlKCk6IFVuc3Vic2NyaWJlIHtcbiAgICAgICAgaWYgKHRoaXMuI2xvb3ApIHJldHVybiAoKSA9PiB0aGlzLnVuc3Vic2NyaWJlKCk7XG5cbiAgICAgICAgdGhpcy4jY3JlYXRlTG9vcCgpO1xuXG4gICAgICAgIHJldHVybiAoKSA9PiB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGF1c2VzIHRoZSBseXJpY3MgcHJvdmlkZXIuXG4gICAgICovXG4gICAgcHVibGljIHBhdXNlKCkge1xuICAgICAgICBjb25zdCBoYXNMb29wID0gdGhpcy4jbG9vcCAhPT0gbnVsbDtcblxuICAgICAgICBpZiAoaGFzTG9vcCkge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLiNsb29wISk7XG4gICAgICAgICAgICB0aGlzLiNsb29wID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBoYXNMb29wO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc3VtZXMgdGhlIGx5cmljcyBwcm92aWRlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzdW1lKCkge1xuICAgICAgICBjb25zdCBoYXNMb29wID0gdGhpcy4jbG9vcCAhPT0gbnVsbDtcblxuICAgICAgICBpZiAoIWhhc0xvb3ApIHRoaXMuI2NyZWF0ZUxvb3AoKTtcblxuICAgICAgICByZXR1cm4gIWhhc0xvb3A7XG4gICAgfVxuXG4gICAgI2NyZWF0ZUxvb3AoKSB7XG4gICAgICAgIGlmICghdGhpcy4jY2FsbGJhY2spIHJldHVybjtcbiAgICAgICAgaWYgKHRoaXMuI2xvb3ApIGNsZWFySW50ZXJ2YWwodGhpcy4jbG9vcCk7XG5cbiAgICAgICAgbGV0IGxhc3RWYWx1ZTogTHlyaWNzQXQgfCBudWxsID0gbnVsbDtcblxuICAgICAgICB0aGlzLiNsb29wID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMucXVldWUuZGVsZXRlZCkgcmV0dXJuIHRoaXMudW5zdWJzY3JpYmUoKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLiNjYWxsYmFjayB8fCAhdGhpcy5xdWV1ZS5pc1BsYXlpbmcoKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICBjb25zdCB0aW1lID0gdGhpcy5xdWV1ZS5ub2RlLmdldFRpbWVzdGFtcCgpO1xuICAgICAgICAgICAgaWYgKCF0aW1lKSByZXR1cm47XG5cbiAgICAgICAgICAgIGNvbnN0IGx5cmljcyA9IHRoaXMuYXQodGltZS5jdXJyZW50LnZhbHVlKTtcblxuICAgICAgICAgICAgaWYgKCFseXJpY3MpIHJldHVybjtcblxuICAgICAgICAgICAgaWYgKGxhc3RWYWx1ZSAhPT0gbnVsbCAmJiBseXJpY3MubGluZSA9PT0gbGFzdFZhbHVlLmxpbmUgJiYgbHlyaWNzLnRpbWVzdGFtcCA9PT0gbGFzdFZhbHVlLnRpbWVzdGFtcCkgcmV0dXJuO1xuXG4gICAgICAgICAgICBsYXN0VmFsdWUgPSBseXJpY3M7XG5cbiAgICAgICAgICAgIHRoaXMuI2NhbGxiYWNrKGx5cmljcy5saW5lLCBseXJpY3MudGltZXN0YW1wKTtcbiAgICAgICAgfSwgdGhpcy5pbnRlcnZhbCkudW5yZWYoKTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBQbGF5ZXIgfSBmcm9tICcuLi8uLi9QbGF5ZXInO1xuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gJ0BkaXNjb3JkLXBsYXllci91dGlscyc7XG5cbmV4cG9ydCBjb25zdCBpbnN0YW5jZXMgPSBuZXcgQ29sbGVjdGlvbjxzdHJpbmcsIFBsYXllcj4oKTtcbmV4cG9ydCBjb25zdCBnbG9iYWxSZWdpc3RyeSA9IG5ldyBDb2xsZWN0aW9uPHN0cmluZywgdW5rbm93bj4oKTtcbiIsICJpbXBvcnQgeyBQbGF5ZXIgfSBmcm9tICcuLi8uLi9QbGF5ZXInO1xuaW1wb3J0IHsgaW5zdGFuY2VzIH0gZnJvbSAnLi9fY29udGFpbmVyJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFBsYXllcihwbGF5ZXI6IFBsYXllcikge1xuICAgIGlmIChpbnN0YW5jZXMuaGFzKHBsYXllci5pZCkpIHJldHVybiB0cnVlO1xuXG4gICAgaW5zdGFuY2VzLnNldChwbGF5ZXIuaWQsIHBsYXllcik7XG5cbiAgICByZXR1cm4gaW5zdGFuY2VzLmhhcyhwbGF5ZXIuaWQpO1xufVxuIiwgImltcG9ydCB7IFBsYXllciB9IGZyb20gJy4uLy4uL1BsYXllcic7XG5pbXBvcnQgeyBpbnN0YW5jZXMgfSBmcm9tICcuL19jb250YWluZXInO1xuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJQbGF5ZXIocGxheWVyOiBQbGF5ZXIpIHtcbiAgICByZXR1cm4gaW5zdGFuY2VzLmRlbGV0ZShwbGF5ZXIuaWQpO1xufVxuIiwgImltcG9ydCB7IGluc3RhbmNlcyB9IGZyb20gJy4vX2NvbnRhaW5lcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQbGF5ZXJzKCkge1xuICAgIHJldHVybiBpbnN0YW5jZXMuYXJyYXkoKTtcbn1cbiIsICJpbXBvcnQgeyBnbG9iYWxSZWdpc3RyeSB9IGZyb20gJy4vX2NvbnRhaW5lcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRHbG9iYWxSZWdpc3RyeSgpIHtcbiAgICByZXR1cm4gZ2xvYmFsUmVnaXN0cnk7XG59XG4iLCAiaW1wb3J0IHsgc2V0VGltZW91dCB9IGZyb20gJ3RpbWVycy9wcm9taXNlcyc7XG5pbXBvcnQgeyBBc3luY1F1ZXVlIH0gZnJvbSAnLi9Bc3luY1F1ZXVlJztcblxuZXhwb3J0IHR5cGUgUmVxdWVzdEVudGl0eSA9ICgpID0+IFByb21pc2U8UmVzcG9uc2U+O1xuXG5leHBvcnQgY2xhc3MgU2VxdWVudGlhbEJ1Y2tldCB7XG4gICAgcHVibGljIGxpbWl0ID0gMTtcbiAgICBwdWJsaWMgcmVtYWluaW5nID0gMTtcbiAgICBwdWJsaWMgcmVzZXRBZnRlciA9IDA7XG4gICAgcHVibGljIHF1ZXVlID0gbmV3IEFzeW5jUXVldWUoKTtcbiAgICBwdWJsaWMgTUFYX1JFVFJJRVMgPSA1O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBidWNrZXQgaXMgcmF0ZSBsaW1pdGVkLlxuICAgICAqL1xuICAgIHB1YmxpYyBpc1JhdGVMaW1pdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW1haW5pbmcgPD0gMCAmJiBEYXRlLm5vdygpIDwgdGhpcy5yZXNldEFmdGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVucXVldWVzIGEgcmVxdWVzdC5cbiAgICAgKiBAcGFyYW0gcmVxIFRoZSByZXF1ZXN0IGZ1bmN0aW9uIHRvIGVucXVldWVcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgZW5xdWV1ZShyZXE6IFJlcXVlc3RFbnRpdHkpIHtcbiAgICAgICAgY29uc3QgZW50cnkgPSB0aGlzLnF1ZXVlLmFjcXVpcmUoKTtcbiAgICAgICAgYXdhaXQgZW50cnkuZ2V0VGFzaygpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChyZXEpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgZW50cnkucmVsZWFzZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBfcmVxdWVzdChyZXE6IFJlcXVlc3RFbnRpdHksIHJldHJpZXMgPSAwKTogUHJvbWlzZTxSZXNwb25zZT4ge1xuICAgICAgICB3aGlsZSAodGhpcy5pc1JhdGVMaW1pdGVkKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc2V0ID0gdGhpcy5yZXNldEFmdGVyIC0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIGF3YWl0IHNldFRpbWVvdXQocmVzZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBhc3MgPSBmYWxzZTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcmVxKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3BhdGNoSGVhZGVycyhyZXMpO1xuXG4gICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gNDI5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzZXQgPSB0aGlzLnJlc2V0QWZ0ZXIgLSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHNldFRpbWVvdXQocmVzZXQpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KHJlcSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghcmVzLm9rKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVycjogRXJyb3I7XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBib2R5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgIH0gPSBhd2FpdCByZXMuanNvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGJvZHkubWVzc2FnZSkgYXMgRXJyb3IgJiB7IGNvZGU6IG51bWJlciB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGVycm9yLm5hbWUgPSBib2R5Lm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLmNvZGUgPSBib2R5LmNvZGU7XG5cbiAgICAgICAgICAgICAgICAgICAgZXJyID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgICAgIGVyciA9IG5ldyBFcnJvcihgSFRUUCBFcnJvcjogJHtyZXMuc3RhdHVzfSAke3Jlcy5zdGF0dXNUZXh0fWApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHBhc3MgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAocGFzcykgdGhyb3cgZTtcblxuICAgICAgICAgICAgY29uc3QgYmFkUmVxID0gZSBpbnN0YW5jZW9mIEVycm9yICYmIC9FcnJvcjogNFswLTldezJ9Ly50ZXN0KGUubWVzc2FnZSk7XG5cbiAgICAgICAgICAgIGlmICghYmFkUmVxICYmIHJldHJpZXMgPCB0aGlzLk1BWF9SRVRSSUVTKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QocmVxLCArK3JldHJpZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfcGF0Y2hIZWFkZXJzKHJlczogUmVzcG9uc2UpIHtcbiAgICAgICAgY29uc3QgbGltaXQgPSBOdW1iZXIocmVzLmhlYWRlcnMuZ2V0KCdYLVJhdGVMaW1pdC1MaW1pdCcpKTtcbiAgICAgICAgY29uc3QgcmVtYWluaW5nID0gTnVtYmVyKHJlcy5oZWFkZXJzLmdldCgnWC1SYXRlTGltaXQtUmVtYWluaW5nJykpO1xuICAgICAgICBjb25zdCByZXNldEFmdGVyID0gTnVtYmVyKHJlcy5oZWFkZXJzLmdldCgnWC1SYXRlTGltaXQtUmVzZXQnKSkgKiAxMDAwICsgRGF0ZS5ub3coKTtcblxuICAgICAgICBpZiAoIU51bWJlci5pc05hTihsaW1pdCkpIHRoaXMubGltaXQgPSBsaW1pdDtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNOYU4ocmVtYWluaW5nKSkgdGhpcy5yZW1haW5pbmcgPSByZW1haW5pbmc7XG4gICAgICAgIGlmICghTnVtYmVyLmlzTmFOKHJlc2V0QWZ0ZXIpKSB0aGlzLnJlc2V0QWZ0ZXIgPSByZXNldEFmdGVyO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBFeGNlcHRpb25zIH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB0eXBlIHsgUGxheWVyIH0gZnJvbSAnLi4vUGxheWVyJztcbmltcG9ydCB7IFV0aWwgfSBmcm9tICcuLi91dGlscy9VdGlsJztcbmltcG9ydCB7IFNlcXVlbnRpYWxCdWNrZXQgfSBmcm9tICcuLi91dGlscy9TZXF1ZW50aWFsQnVja2V0JztcblxuZXhwb3J0IGludGVyZmFjZSBMcmNTZWFyY2hQYXJhbXMge1xuICAgIC8qKlxuICAgICAqIFRoZSBxdWVyeSB0byBzZWFyY2ggZm9yLiBFaXRoZXIgdGhpcyBvciB0cmFja05hbWUgaXMgcmVxdWlyZWQuXG4gICAgICovXG4gICAgcT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgdHJhY2sgbmFtZSB0byBzZWFyY2ggZm9yLiBFaXRoZXIgdGhpcyBvciBxdWVyeSBpcyByZXF1aXJlZC5cbiAgICAgKi9cbiAgICB0cmFja05hbWU/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGFydGlzdCBuYW1lXG4gICAgICovXG4gICAgYXJ0aXN0TmFtZT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgYWxidW0gbmFtZVxuICAgICAqL1xuICAgIGFsYnVtTmFtZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMcmNHZXRQYXJhbXMgZXh0ZW5kcyBSZXF1aXJlZDxPbWl0PExyY1NlYXJjaFBhcmFtcywgJ3F1ZXJ5Jz4+IHtcbiAgICAvKipcbiAgICAgKiBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYWNrXG4gICAgICovXG4gICAgZHVyYXRpb246IG51bWJlcjtcbn1cblxuY29uc3QgdG9TbmFrZUNhc2UgPSAob2JqOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9PiB7XG4gICAgY29uc3Qgc25ha2VPYmo6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcblxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG9iaikpIHtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBuZXdLZXkgPSBrZXkucmVwbGFjZSgvW0EtWl0vZywgKGxldHRlcikgPT4gYF8ke2xldHRlci50b0xvd2VyQ2FzZSgpfWApO1xuICAgICAgICBzbmFrZU9ialtuZXdLZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNuYWtlT2JqO1xufTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmNvbnN0IGNyZWF0ZVF1ZXJ5ID0gKHBhcmFtczogYW55KSA9PiBuZXcgVVJMU2VhcmNoUGFyYW1zKHRvU25ha2VDYXNlKHBhcmFtcykpLnRvU3RyaW5nKCk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTHJjU2VhcmNoUmVzdWx0IHtcbiAgICAvKipcbiAgICAgKiBUaGUgdHJhY2sgaWRcbiAgICAgKi9cbiAgICBpZDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSB0cmFjayBuYW1lXG4gICAgICovXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBhcnRpc3QgbmFtZVxuICAgICAqL1xuICAgIHRyYWNrTmFtZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBhbGJ1bSBuYW1lXG4gICAgICovXG4gICAgYXJ0aXN0TmFtZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBhbGJ1bSBuYW1lXG4gICAgICovXG4gICAgYWxidW1OYW1lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFja1xuICAgICAqL1xuICAgIGR1cmF0aW9uOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIHJlbGVhc2UgZGF0ZSBvZiB0aGUgdHJhY2tcbiAgICAgKi9cbiAgICBpbnN0cnVtZW50YWw6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVGhlIHJlbGVhc2UgZGF0ZSBvZiB0aGUgdHJhY2tcbiAgICAgKi9cbiAgICBwbGFpbkx5cmljczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSByZWxlYXNlIGRhdGUgb2YgdGhlIHRyYWNrXG4gICAgICovXG4gICAgc3luY2VkTHlyaWNzPzogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBMcmNHZXRSZXN1bHQgPSBPbWl0PExyY1NlYXJjaFJlc3VsdCwgJ25hbWUnPjtcblxuZXhwb3J0IGNsYXNzIExyY0xpYiB7XG4gICAgLyoqXG4gICAgICogVGhlIEFQSSBVUkxcbiAgICAgKi9cbiAgICBwdWJsaWMgYXBpID0gJ2h0dHBzOi8vbHJjbGliLm5ldC9hcGknO1xuICAgIC8qKlxuICAgICAqIFRoZSByZXF1ZXN0IHRpbWVvdXQuIERlZmF1bHQgaXMgMTUgc2Vjb25kcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgdGltZW91dCA9IDE1XzAwMDtcbiAgICAvKipcbiAgICAgKiBUaGUgcmVxdWVzdCBidWNrZXRcbiAgICAgKi9cbiAgICBwdWJsaWMgYnVja2V0ID0gbmV3IFNlcXVlbnRpYWxCdWNrZXQoKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgTHJjTGliIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtQbGF5ZXJ9IHBsYXllciBUaGUgcGxheWVyIGluc3RhbmNlXG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBwbGF5ZXI6IFBsYXllcikge31cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHJlcXVlc3QgdGltZW91dFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0IFRoZSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kc1xuICAgICAqL1xuICAgIHB1YmxpYyBzZXRSZXF1ZXN0VGltZW91dCh0aW1lb3V0OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gdGltZW91dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSByZXRyeSBsaW1pdC4gRGVmYXVsdCBpcyA1LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCBUaGUgcmV0cnkgbGltaXRcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0UmV0cnlMaW1pdChsaW1pdDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuYnVja2V0Lk1BWF9SRVRSSUVTID0gbGltaXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBseXJpY3NcbiAgICAgKiBAcGFyYW0gcGFyYW1zIFRoZSBnZXQgcGFyYW1zXG4gICAgICovXG4gICAgcHVibGljIGdldChwYXJhbXM6IExyY0dldFBhcmFtcykge1xuICAgICAgICBjb25zdCBwYXRoID0gYGdldD8ke2NyZWF0ZVF1ZXJ5KHBhcmFtcyl9YDtcblxuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0PExyY1NlYXJjaFJlc3VsdD4ocGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBseXJpY3MgYnkgSURcbiAgICAgKiBAcGFyYW0gaWQgVGhlIGx5cmljcyBJRFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRCeUlkKGlkOiBgJHtudW1iZXJ9YCB8IG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0PExyY1NlYXJjaFJlc3VsdD4oYGdldC8ke2lkfWApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgY2FjaGVkIGx5cmljc1xuICAgICAqIEBwYXJhbSBwYXJhbXMgVGhlIGdldCBwYXJhbXNcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Q2FjaGVkKHBhcmFtczogTHJjR2V0UGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBgZ2V0LWNhY2hlZD8ke2NyZWF0ZVF1ZXJ5KHBhcmFtcyl9YDtcblxuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0PExyY1NlYXJjaFJlc3VsdD4ocGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VhcmNoZXMgZm9yIGx5cmljc1xuICAgICAqIEBwYXJhbSBwYXJhbXMgVGhlIHNlYXJjaCBwYXJhbXNcbiAgICAgKi9cbiAgICBwdWJsaWMgc2VhcmNoKHBhcmFtczogTHJjU2VhcmNoUGFyYW1zKSB7XG4gICAgICAgIGlmICghcGFyYW1zLnEgJiYgIXBhcmFtcy50cmFja05hbWUpIHtcbiAgICAgICAgICAgIHRocm93IEV4Y2VwdGlvbnMuRVJSX0lOVkFMSURfQVJHX1RZUEUoJ29uZSBvZiBxIG9yIHRyYWNrTmFtZScsICdzdHJpbmcnLCBbU3RyaW5nKHBhcmFtcy5xKSwgU3RyaW5nKHBhcmFtcy50cmFja05hbWUpXS5qb2luKCcsICcpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBhdGggPSBgc2VhcmNoPyR7Y3JlYXRlUXVlcnkocGFyYW1zKX1gO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3Q8THJjU2VhcmNoUmVzdWx0W10+KHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcXVlc3RzIHRoZSBBUElcbiAgICAgKiBAcGFyYW0gcGF0aCBUaGUgcGF0aFxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSByZXF1ZXN0IG9wdGlvbnNcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgcmVxdWVzdDxUPihwYXRoOiBzdHJpbmcsIG9wdGlvbnM/OiBSZXF1ZXN0SW5pdCk6IFByb21pc2U8VD4ge1xuICAgICAgICBsZXQgdGltZW91dDogTm9kZUpTLlRpbWVvdXQgfCBudWxsID0gbnVsbDtcblxuICAgICAgICBjb25zdCBkaXNwYXRjaGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcblxuICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgICAgIH0sIHRoaXMudGltZW91dCkudW5yZWYoKTtcblxuICAgICAgICAgICAgY29uc3QgeyBuYW1lLCB2ZXJzaW9uIH0gPSBVdGlsLmdldFJ1bnRpbWUoKTtcblxuICAgICAgICAgICAgY29uc3QgcnVudGltZVZlcnNpb24gPSBuYW1lID09PSAndW5rbm93bicgPyB2ZXJzaW9uIDogYCR7bmFtZX0vJHt2ZXJzaW9ufWA7XG5cbiAgICAgICAgICAgIGNvbnN0IGluaXQ6IFJlcXVlc3RJbml0ID0ge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICAgICAgcmVkaXJlY3Q6ICdmb2xsb3cnLFxuICAgICAgICAgICAgICAgIHNpZ25hbDogY29udHJvbGxlci5zaWduYWwsXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzogYERpc2NvcmQtUGxheWVyLyR7dGhpcy5wbGF5ZXIudmVyc2lvbn0gJHtydW50aW1lVmVyc2lvbiA/PyAnJ31gLnRyaW1FbmQoKSxcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAgICAgLi4ub3B0aW9ucz8uaGVhZGVyc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMucGxheWVyLmRlYnVnKGBbTHJjTGliXSBSZXF1ZXN0aW5nICR7cGF0aH1gKTtcblxuICAgICAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuYXBpfSR7cGF0aC5zdGFydHNXaXRoKCcvJykgPyBwYXRoIDogJy8nICsgcGF0aH1gLCBpbml0KTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmJ1Y2tldC5lbnF1ZXVlKGRpc3BhdGNoZXIpO1xuXG4gICAgICAgIGlmICh0aW1lb3V0KSBjbGVhclRpbWVvdXQodGltZW91dCk7XG5cbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IFZvaWNlQ2hhbm5lbCwgU3RhZ2VDaGFubmVsLCBTbm93Zmxha2UgfSBmcm9tICdkaXNjb3JkLmpzJztcbmltcG9ydCB7IERpc2NvcmRHYXRld2F5QWRhcHRlckNyZWF0b3IsIGpvaW5Wb2ljZUNoYW5uZWwsIFZvaWNlQ29ubmVjdGlvbiwgZ2V0Vm9pY2VDb25uZWN0aW9uLCBWb2ljZUNvbm5lY3Rpb25TdGF0dXMsIEF1ZGlvUGxheWVyIH0gZnJvbSAnZGlzY29yZC12b2lwJztcbmltcG9ydCB7IFN0cmVhbURpc3BhdGNoZXIgfSBmcm9tICcuL1N0cmVhbURpc3BhdGNoZXInO1xuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gJ0BkaXNjb3JkLXBsYXllci91dGlscyc7XG5pbXBvcnQgeyBHdWlsZFF1ZXVlIH0gZnJvbSAnLi4vcXVldWUnO1xuaW1wb3J0IHR5cGUgeyBQbGF5ZXIgfSBmcm9tICcuLi9QbGF5ZXInO1xuaW1wb3J0IHsgRXhjZXB0aW9ucyB9IGZyb20gJy4uL2Vycm9ycyc7XG5cbmNsYXNzIFZvaWNlVXRpbHMge1xuICAgIC8qKlxuICAgICAqIFZvaWNlIGNvbm5lY3Rpb24gY2FjaGUgdG8gc3RvcmUgdm9pY2UgY29ubmVjdGlvbnMgb2YgdGhlIFBsYXllciBjb21wb25lbnRzLlxuICAgICAqIFRoaXMgcHJvcGVydHkgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuXG4gICAgICogSXQgb25seSBleGlzdHMgZm9yIGNvbXBhdGliaWxpdHkgcmVhc29ucy5cbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIHB1YmxpYyBjYWNoZTogQ29sbGVjdGlvbjxTbm93Zmxha2UsIFN0cmVhbURpc3BhdGNoZXI+ID0gbmV3IENvbGxlY3Rpb248U25vd2ZsYWtlLCBTdHJlYW1EaXNwYXRjaGVyPigpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHZvaWNlIHV0aWxzIGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHVibGljIHBsYXllcjogUGxheWVyKSB7fVxuXG4gICAgLyoqXG4gICAgICogSm9pbnMgYSB2b2ljZSBjaGFubmVsLCBjcmVhdGluZyBiYXNpYyBzdHJlYW0gZGlzcGF0Y2ggbWFuYWdlclxuICAgICAqIEBwYXJhbSB7U3RhZ2VDaGFubmVsfFZvaWNlQ2hhbm5lbH0gY2hhbm5lbCBUaGUgdm9pY2UgY2hhbm5lbFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gSm9pbiBvcHRpb25zXG4gICAgICogQHJldHVybnMge1Byb21pc2U8U3RyZWFtRGlzcGF0Y2hlcj59XG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGNvbm5lY3QoXG4gICAgICAgIGNoYW5uZWw6IFZvaWNlQ2hhbm5lbCB8IFN0YWdlQ2hhbm5lbCxcbiAgICAgICAgb3B0aW9ucz86IHtcbiAgICAgICAgICAgIGRlYWY/OiBib29sZWFuO1xuICAgICAgICAgICAgbWF4VGltZT86IG51bWJlcjtcbiAgICAgICAgICAgIHF1ZXVlOiBHdWlsZFF1ZXVlO1xuICAgICAgICAgICAgYXVkaW9QbGF5ZXI/OiBBdWRpb1BsYXllcjtcbiAgICAgICAgICAgIGdyb3VwPzogc3RyaW5nO1xuICAgICAgICB9XG4gICAgKTogUHJvbWlzZTxTdHJlYW1EaXNwYXRjaGVyPiB7XG4gICAgICAgIGlmICghb3B0aW9ucz8ucXVldWUpIHRocm93IEV4Y2VwdGlvbnMuRVJSX05PX0dVSUxEX1FVRVVFKCk7XG4gICAgICAgIGNvbnN0IGNvbm4gPSBhd2FpdCB0aGlzLmpvaW4oY2hhbm5lbCwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHN1YiA9IG5ldyBTdHJlYW1EaXNwYXRjaGVyKGNvbm4sIGNoYW5uZWwsIG9wdGlvbnMucXVldWUsIG9wdGlvbnMubWF4VGltZSwgb3B0aW9ucy5hdWRpb1BsYXllcik7XG4gICAgICAgIHJldHVybiBzdWI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSm9pbnMgYSB2b2ljZSBjaGFubmVsXG4gICAgICogQHBhcmFtIHtTdGFnZUNoYW5uZWx8Vm9pY2VDaGFubmVsfSBbY2hhbm5lbF0gVGhlIHZvaWNlL3N0YWdlIGNoYW5uZWwgdG8gam9pblxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gSm9pbiBvcHRpb25zXG4gICAgICogQHJldHVybnMge1ZvaWNlQ29ubmVjdGlvbn1cbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgam9pbihcbiAgICAgICAgY2hhbm5lbDogVm9pY2VDaGFubmVsIHwgU3RhZ2VDaGFubmVsLFxuICAgICAgICBvcHRpb25zPzoge1xuICAgICAgICAgICAgZGVhZj86IGJvb2xlYW47XG4gICAgICAgICAgICBtYXhUaW1lPzogbnVtYmVyO1xuICAgICAgICAgICAgZ3JvdXA/OiBzdHJpbmc7XG4gICAgICAgIH1cbiAgICApIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdDb25uZWN0aW9uID0gdGhpcy5nZXRDb25uZWN0aW9uKGNoYW5uZWwuZ3VpbGQuaWQsIG9wdGlvbnM/Lmdyb3VwKTtcblxuICAgICAgICBpZiAoZXhpc3RpbmdDb25uZWN0aW9uPy5qb2luQ29uZmlnLmNoYW5uZWxJZCA9PT0gY2hhbm5lbD8uaWQgJiYgZXhpc3RpbmdDb25uZWN0aW9uLnN0YXRlLnN0YXR1cyAhPT0gVm9pY2VDb25uZWN0aW9uU3RhdHVzLkRlc3Ryb3llZCkge1xuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nQ29ubmVjdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbm4gPSBqb2luVm9pY2VDaGFubmVsKHtcbiAgICAgICAgICAgIGd1aWxkSWQ6IGNoYW5uZWwuZ3VpbGQuaWQsXG4gICAgICAgICAgICBjaGFubmVsSWQ6IGNoYW5uZWwuaWQsXG4gICAgICAgICAgICBhZGFwdGVyQ3JlYXRvcjogY2hhbm5lbC5ndWlsZC52b2ljZUFkYXB0ZXJDcmVhdG9yIGFzIHVua25vd24gYXMgRGlzY29yZEdhdGV3YXlBZGFwdGVyQ3JlYXRvcixcbiAgICAgICAgICAgIHNlbGZEZWFmOiBCb29sZWFuKG9wdGlvbnM/LmRlYWYpLFxuICAgICAgICAgICAgZGVidWc6IHRoaXMucGxheWVyLmV2ZW50cy5saXN0ZW5lckNvdW50KCdkZWJ1ZycpID4gMCxcbiAgICAgICAgICAgIGdyb3VwOiBvcHRpb25zPy5ncm91cFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gY29ubjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNjb25uZWN0cyB2b2ljZSBjb25uZWN0aW9uXG4gICAgICogQHBhcmFtIHtWb2ljZUNvbm5lY3Rpb259IGNvbm5lY3Rpb24gVGhlIHZvaWNlIGNvbm5lY3Rpb25cbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cbiAgICBwdWJsaWMgZGlzY29ubmVjdChjb25uZWN0aW9uOiBWb2ljZUNvbm5lY3Rpb24gfCBTdHJlYW1EaXNwYXRjaGVyKSB7XG4gICAgICAgIGlmIChjb25uZWN0aW9uIGluc3RhbmNlb2YgU3RyZWFtRGlzcGF0Y2hlcikgY29ubmVjdGlvbiA9IGNvbm5lY3Rpb24udm9pY2VDb25uZWN0aW9uO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoY29ubmVjdGlvbi5zdGF0ZS5zdGF0dXMgIT09IFZvaWNlQ29ubmVjdGlvblN0YXR1cy5EZXN0cm95ZWQpIHJldHVybiBjb25uZWN0aW9uLmRlc3Ryb3koKTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAvL1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBEaXNjb3JkIFBsYXllciB2b2ljZSBjb25uZWN0aW9uXG4gICAgICogQHBhcmFtIHtTbm93Zmxha2V9IGd1aWxkIFRoZSBndWlsZCBpZFxuICAgICAqIEByZXR1cm5zIHtTdHJlYW1EaXNwYXRjaGVyfVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRDb25uZWN0aW9uKGd1aWxkOiBTbm93Zmxha2UsIGdyb3VwPzogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBnZXRWb2ljZUNvbm5lY3Rpb24oZ3VpbGQsIGdyb3VwKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFZvaWNlVXRpbHMgfTtcbiIsICJpbXBvcnQgeyBQbGF5ZXIgfSBmcm9tICcuLi9QbGF5ZXInO1xuaW1wb3J0IHsgU2VhcmNoUmVzdWx0IH0gZnJvbSAnLi4vZmFicmljL1NlYXJjaFJlc3VsdCc7XG5pbXBvcnQgeyBUcmFjayB9IGZyb20gJy4uL2ZhYnJpYy9UcmFjayc7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnZGlzY29yZC5qcyc7XG5pbXBvcnQgeyBTZWFyY2hRdWVyeVR5cGUgfSBmcm9tICcuLi90eXBlcy90eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUXVlcnlDYWNoZU9wdGlvbnMge1xuICAgIGNoZWNrSW50ZXJ2YWw/OiBudW1iZXI7XG59XG5cbi8vIDVoXG5jb25zdCBERUZBVUxUX0VYUElSWV9USU1FT1VUID0gMThfMDAwXzAwMDtcblxuZXhwb3J0IGludGVyZmFjZSBRdWVyeUNhY2hlUHJvdmlkZXI8VD4ge1xuICAgIGdldERhdGEoKTogUHJvbWlzZTxEaXNjb3JkUGxheWVyUXVlcnlSZXN1bHRDYWNoZTxUPltdPjtcbiAgICBhZGREYXRhKGRhdGE6IFNlYXJjaFJlc3VsdCk6IFByb21pc2U8dm9pZD47XG4gICAgcmVzb2x2ZShjb250ZXh0OiBRdWVyeUNhY2hlUmVzb2x2ZXJDb250ZXh0KTogUHJvbWlzZTxTZWFyY2hSZXN1bHQ+O1xufVxuXG5leHBvcnQgY2xhc3MgUXVlcnlDYWNoZSBpbXBsZW1lbnRzIFF1ZXJ5Q2FjaGVQcm92aWRlcjxUcmFjaz4ge1xuICAgICNkZWZhdWx0Q2FjaGUgPSBuZXcgTWFwPHN0cmluZywgRGlzY29yZFBsYXllclF1ZXJ5UmVzdWx0Q2FjaGU8VHJhY2s+PigpO1xuICAgIHB1YmxpYyB0aW1lcjogTm9kZUpTLlRpbWVyO1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIHBsYXllcjogUGxheWVyLFxuICAgICAgICBwdWJsaWMgb3B0aW9uczogUXVlcnlDYWNoZU9wdGlvbnMgPSB7XG4gICAgICAgICAgICBjaGVja0ludGVydmFsOiBERUZBVUxUX0VYUElSWV9USU1FT1VUXG4gICAgICAgIH1cbiAgICApIHtcbiAgICAgICAgdGhpcy50aW1lciA9IHNldEludGVydmFsKHRoaXMuY2xlYW51cC5iaW5kKHRoaXMpLCB0aGlzLmNoZWNrSW50ZXJ2YWwpLnVucmVmKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBjaGVja0ludGVydmFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmNoZWNrSW50ZXJ2YWwgPz8gREVGQVVMVF9FWFBJUllfVElNRU9VVDtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgY2xlYW51cCgpIHtcbiAgICAgICAgZm9yIChjb25zdCBbaWQsIHZhbHVlXSBvZiB0aGlzLiNkZWZhdWx0Q2FjaGUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNFeHBpcmVkKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiNkZWZhdWx0Q2FjaGUuZGVsZXRlKGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBjbGVhcigpIHtcbiAgICAgICAgdGhpcy4jZGVmYXVsdENhY2hlLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldERhdGEoKSB7XG4gICAgICAgIHJldHVybiBbLi4udGhpcy4jZGVmYXVsdENhY2hlLnZhbHVlcygpXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgYWRkRGF0YShkYXRhOiBTZWFyY2hSZXN1bHQpIHtcbiAgICAgICAgZGF0YS50cmFja3MuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuI2RlZmF1bHRDYWNoZS5oYXMoZC51cmwpKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLiNkZWZhdWx0Q2FjaGUuc2V0KGQudXJsLCBuZXcgRGlzY29yZFBsYXllclF1ZXJ5UmVzdWx0Q2FjaGUoZCkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgcmVzb2x2ZShjb250ZXh0OiBRdWVyeUNhY2hlUmVzb2x2ZXJDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuI2RlZmF1bHRDYWNoZS5nZXQoY29udGV4dC5xdWVyeSk7XG4gICAgICAgIGlmICghcmVzdWx0KVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTZWFyY2hSZXN1bHQodGhpcy5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICBxdWVyeTogY29udGV4dC5xdWVyeSxcbiAgICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogY29udGV4dC5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgICAgICBxdWVyeVR5cGU6IGNvbnRleHQucXVlcnlUeXBlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbmV3IFNlYXJjaFJlc3VsdCh0aGlzLnBsYXllciwge1xuICAgICAgICAgICAgcXVlcnk6IGNvbnRleHQucXVlcnksXG4gICAgICAgICAgICB0cmFja3M6IFtyZXN1bHQuZGF0YV0sXG4gICAgICAgICAgICBwbGF5bGlzdDogbnVsbCxcbiAgICAgICAgICAgIHF1ZXJ5VHlwZTogY29udGV4dC5xdWVyeVR5cGUsXG4gICAgICAgICAgICByZXF1ZXN0ZWRCeTogY29udGV4dC5yZXF1ZXN0ZWRCeVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEaXNjb3JkUGxheWVyUXVlcnlSZXN1bHRDYWNoZTxUID0gdW5rbm93bj4ge1xuICAgIHB1YmxpYyBleHBpcmVBZnRlciA9IERFRkFVTFRfRVhQSVJZX1RJTUVPVVQ7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBkYXRhOiBULCBleHBpcmVBZnRlcjogbnVtYmVyID0gREVGQVVMVF9FWFBJUllfVElNRU9VVCkge1xuICAgICAgICBpZiAodHlwZW9mIGV4cGlyZUFmdGVyID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5leHBpcmVBZnRlciA9IERhdGUubm93KCkgKyBleHBpcmVBZnRlcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBoYXNFeHBpcmVkKCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZXhwaXJlQWZ0ZXIgIT09ICdudW1iZXInIHx8IGlzTmFOKHRoaXMuZXhwaXJlQWZ0ZXIpIHx8IHRoaXMuZXhwaXJlQWZ0ZXIgPCAxKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdygpIDw9IHRoaXMuZXhwaXJlQWZ0ZXI7XG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFF1ZXJ5Q2FjaGVSZXNvbHZlckNvbnRleHQge1xuICAgIHF1ZXJ5OiBzdHJpbmc7XG4gICAgcmVxdWVzdGVkQnk/OiBVc2VyO1xuICAgIHF1ZXJ5VHlwZT86IFNlYXJjaFF1ZXJ5VHlwZSB8IGBleHQ6JHtzdHJpbmd9YDtcbn1cbiIsICJpbXBvcnQgeyBGRm1wZWcgfSBmcm9tICdAZGlzY29yZC1wbGF5ZXIvZmZtcGVnJztcbmltcG9ydCB7IENsaWVudCwgU25vd2ZsYWtlVXRpbCwgVm9pY2VTdGF0ZSwgSW50ZW50c0JpdEZpZWxkLCBVc2VyLCBHdWlsZFZvaWNlQ2hhbm5lbFJlc29sdmFibGUsIHZlcnNpb24gYXMgZGpzVmVyc2lvbiwgRXZlbnRzIH0gZnJvbSAnZGlzY29yZC5qcyc7XG5pbXBvcnQgeyBQbGF5bGlzdCwgVHJhY2ssIFNlYXJjaFJlc3VsdCB9IGZyb20gJy4vZmFicmljJztcbmltcG9ydCB7IEd1aWxkUXVldWVFdmVudHMsIFZvaWNlQ29ubmVjdENvbmZpZywgR3VpbGROb2RlQ3JlYXRlT3B0aW9ucywgR3VpbGROb2RlTWFuYWdlciwgR3VpbGRRdWV1ZSwgUmVzb3VyY2VQbGF5T3B0aW9ucywgR3VpbGRRdWV1ZUV2ZW50IH0gZnJvbSAnLi9xdWV1ZSc7XG5pbXBvcnQgeyBWb2ljZVV0aWxzIH0gZnJvbSAnLi9Wb2ljZUludGVyZmFjZS9Wb2ljZVV0aWxzJztcbmltcG9ydCB7IFBsYXllckV2ZW50cywgUXVlcnlUeXBlLCBTZWFyY2hPcHRpb25zLCBQbGF5ZXJJbml0T3B0aW9ucywgUGxheWxpc3RJbml0RGF0YSwgU2VhcmNoUXVlcnlUeXBlLCBQbGF5ZXJFdmVudCB9IGZyb20gJy4vdHlwZXMvdHlwZXMnO1xuaW1wb3J0IHsgUXVlcnlSZXNvbHZlciwgUmVzb2x2ZWRRdWVyeSB9IGZyb20gJy4vdXRpbHMvUXVlcnlSZXNvbHZlcic7XG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi91dGlscy9VdGlsJztcbmltcG9ydCB7IGdlbmVyYXRlRGVwZW5kZW5jeVJlcG9ydCwgdmVyc2lvbiBhcyBkVm9pY2VWZXJzaW9uIH0gZnJvbSAnZGlzY29yZC12b2lwJztcbmltcG9ydCB7IEV4dHJhY3RvckV4ZWN1dGlvbkNvbnRleHQgfSBmcm9tICcuL2V4dHJhY3RvcnMvRXh0cmFjdG9yRXhlY3V0aW9uQ29udGV4dCc7XG5pbXBvcnQgeyBCYXNlRXh0cmFjdG9yIH0gZnJvbSAnLi9leHRyYWN0b3JzL0Jhc2VFeHRyYWN0b3InO1xuaW1wb3J0ICogYXMgX2ludGVybmFscyBmcm9tICcuL3V0aWxzL19faW50ZXJuYWxfXyc7XG5pbXBvcnQgeyBRdWVyeUNhY2hlIH0gZnJvbSAnLi91dGlscy9RdWVyeUNhY2hlJztcbmltcG9ydCB7IFBsYXllckV2ZW50c0VtaXR0ZXIgfSBmcm9tICcuL3V0aWxzL1BsYXllckV2ZW50c0VtaXR0ZXInO1xuaW1wb3J0IHsgRXhjZXB0aW9ucyB9IGZyb20gJy4vZXJyb3JzJztcbmltcG9ydCB7IGRlZmF1bHRWb2ljZVN0YXRlSGFuZGxlciB9IGZyb20gJy4vRGVmYXVsdFZvaWNlU3RhdGVIYW5kbGVyJztcbmltcG9ydCB7IElQUm90YXRvciB9IGZyb20gJy4vdXRpbHMvSVBSb3RhdG9yJztcbmltcG9ydCB7IENvbnRleHQsIGNyZWF0ZUNvbnRleHQgfSBmcm9tICcuL2hvb2tzJztcbmltcG9ydCB7IEhvb2tzQ3R4IH0gZnJvbSAnLi9ob29rcy9jb21tb24nO1xuaW1wb3J0IHsgTHJjTGliIH0gZnJvbSAnLi9scmNsaWIvTHJjTGliJztcblxuY29uc3Qga1NpbmdsZXRvbiA9IFN5bWJvbCgnSW5zdGFuY2VEaXNjb3JkUGxheWVyU2luZ2xldG9uJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGxheWVyTm9kZUluaXRpYWxpemF0aW9uUmVzdWx0PFQgPSB1bmtub3duPiB7XG4gICAgdHJhY2s6IFRyYWNrO1xuICAgIGV4dHJhY3RvcjogQmFzZUV4dHJhY3RvciB8IG51bGw7XG4gICAgc2VhcmNoUmVzdWx0OiBTZWFyY2hSZXN1bHQ7XG4gICAgcXVldWU6IEd1aWxkUXVldWU8VD47XG59XG5cbmV4cG9ydCB0eXBlIFRyYWNrTGlrZSA9IHN0cmluZyB8IFRyYWNrIHwgU2VhcmNoUmVzdWx0IHwgVHJhY2tbXSB8IFBsYXlsaXN0O1xuXG5leHBvcnQgaW50ZXJmYWNlIFBsYXllck5vZGVJbml0aWFsaXplck9wdGlvbnM8VD4gZXh0ZW5kcyBTZWFyY2hPcHRpb25zIHtcbiAgICBub2RlT3B0aW9ucz86IEd1aWxkTm9kZUNyZWF0ZU9wdGlvbnM8VD47XG4gICAgY29ubmVjdGlvbk9wdGlvbnM/OiBWb2ljZUNvbm5lY3RDb25maWc7XG4gICAgYXVkaW9QbGF5ZXJPcHRpb25zPzogUmVzb3VyY2VQbGF5T3B0aW9ucztcbiAgICBzaWduYWw/OiBBYm9ydFNpZ25hbDtcbiAgICBhZnRlclNlYXJjaD86IChyZXN1bHQ6IFNlYXJjaFJlc3VsdCkgPT4gUHJvbWlzZTxTZWFyY2hSZXN1bHQ+O1xufVxuXG5leHBvcnQgdHlwZSBWb2ljZVN0YXRlSGFuZGxlciA9IChwbGF5ZXI6IFBsYXllciwgcXVldWU6IEd1aWxkUXVldWUsIG9sZFZvaWNlU3RhdGU6IFZvaWNlU3RhdGUsIG5ld1ZvaWNlU3RhdGU6IFZvaWNlU3RhdGUpID0+IEF3YWl0ZWQ8dm9pZD47XG5cbmV4cG9ydCBjbGFzcyBQbGF5ZXIgZXh0ZW5kcyBQbGF5ZXJFdmVudHNFbWl0dGVyPFBsYXllckV2ZW50cz4ge1xuICAgICNsYXN0TGF0ZW5jeSA9IC0xO1xuICAgICN2b2ljZVN0YXRlVXBkYXRlTGlzdGVuZXIgPSB0aGlzLmhhbmRsZVZvaWNlU3RhdGUuYmluZCh0aGlzKTtcbiAgICAjbGFnTW9uaXRvclRpbWVvdXQhOiBOb2RlSlMuVGltZW91dDtcbiAgICAjbGFnTW9uaXRvckludGVydmFsITogTm9kZUpTLlRpbWVvdXQ7XG4gICAgI29uVm9pY2VTdGF0ZVVwZGF0ZTogVm9pY2VTdGF0ZUhhbmRsZXIgPSBkZWZhdWx0Vm9pY2VTdGF0ZUhhbmRsZXI7XG4gICAgI2hvb2tzQ3R4OiBDb250ZXh0PEhvb2tzQ3R4PiB8IG51bGwgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIFRoZSB2ZXJzaW9uIG9mIGRpc2NvcmQtcGxheWVyXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSB2ZXJzaW9uOiBzdHJpbmcgPSAnNi43LjEnO1xuICAgIHB1YmxpYyBzdGF0aWMgX3NpbmdsZXRvbktleSA9IGtTaW5nbGV0b247XG4gICAgLyoqXG4gICAgICogVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoaXMgcGxheWVyIGluc3RhbmNlXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGlkID0gU25vd2ZsYWtlVXRpbC5nZW5lcmF0ZSgpLnRvU3RyaW5nKCk7XG4gICAgLyoqXG4gICAgICogVGhlIGRpc2NvcmQuanMgY2xpZW50XG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGNsaWVudCE6IENsaWVudDtcbiAgICAvKipcbiAgICAgKiBUaGUgcGxheWVyIG9wdGlvbnNcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgb3B0aW9ucyE6IFBsYXllckluaXRPcHRpb25zO1xuICAgIC8qKlxuICAgICAqIFRoZSBwbGF5ZXIgbm9kZXMgKHF1ZXVlKSBtYW5hZ2VyXG4gICAgICovXG4gICAgcHVibGljIG5vZGVzID0gbmV3IEd1aWxkTm9kZU1hbmFnZXIodGhpcyk7XG4gICAgLyoqXG4gICAgICogVGhlIHZvaWNlIGFwaSB1dGlsaXRpZXNcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgdm9pY2VVdGlscyA9IG5ldyBWb2ljZVV0aWxzKHRoaXMpO1xuICAgIC8qKlxuICAgICAqIFRoZSBleHRyYWN0b3JzIG1hbmFnZXJcbiAgICAgKi9cbiAgICBwdWJsaWMgZXh0cmFjdG9ycyA9IG5ldyBFeHRyYWN0b3JFeGVjdXRpb25Db250ZXh0KHRoaXMpO1xuICAgIC8qKlxuICAgICAqIFRoZSBwbGF5ZXIgZXZlbnRzIGNoYW5uZWxcbiAgICAgKi9cbiAgICBwdWJsaWMgZXZlbnRzID0gbmV3IFBsYXllckV2ZW50c0VtaXR0ZXI8R3VpbGRRdWV1ZUV2ZW50cz4oW0d1aWxkUXVldWVFdmVudC5FcnJvciwgR3VpbGRRdWV1ZUV2ZW50LlBsYXllckVycm9yXSk7XG4gICAgLyoqXG4gICAgICogVGhlIHJvdXRlIHBsYW5uZXJcbiAgICAgKi9cbiAgICBwdWJsaWMgcm91dGVQbGFubmVyOiBJUFJvdGF0b3IgfCBudWxsID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBUaGUgcGxheWVyIHZlcnNpb25cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgdmVyc2lvbiA9IFBsYXllci52ZXJzaW9uO1xuICAgIC8qKlxuICAgICAqIFRoZSBseXJpY3MgYXBpXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGx5cmljcyA9IG5ldyBMcmNMaWIodGhpcyk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIG5ldyBEaXNjb3JkIFBsYXllclxuICAgICAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnQgVGhlIERpc2NvcmQgQ2xpZW50XG4gICAgICogQHBhcmFtIHtQbGF5ZXJJbml0T3B0aW9uc30gW29wdGlvbnNdIFRoZSBwbGF5ZXIgaW5pdCBvcHRpb25zXG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNsaWVudDogQ2xpZW50LCBvcHRpb25zOiBQbGF5ZXJJbml0T3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGlmICghb3B0aW9ucy5pZ25vcmVJbnN0YW5jZSAmJiBrU2luZ2xldG9uIGluIFBsYXllcikgcmV0dXJuICg8YW55PlBsYXllcilba1NpbmdsZXRvbl0gYXMgUGxheWVyO1xuXG4gICAgICAgIHN1cGVyKFtQbGF5ZXJFdmVudC5FcnJvcl0pO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZGlzY29yZC5qcyBjbGllbnRcbiAgICAgICAgICogQHR5cGUge0NsaWVudH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIShjbGllbnQgaW5zdGFuY2VvZiBDbGllbnQpKSB7XG4gICAgICAgICAgICAgICAgVXRpbC53YXJuKFxuICAgICAgICAgICAgICAgICAgICBgQ2xpZW50IGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBkaXNjb3JkLmpzQCR7ZGpzVmVyc2lvbn0gY2xpZW50LCBzb21lIHRoaW5ncyBtYXkgbm90IHdvcmsgY29ycmVjdGx5LiBUaGlzIGNhbiBoYXBwZW4gZHVlIHRvIGNvcnJ1cHQgZGVwZW5kZW5jaWVzIG9yIGhhdmluZyBtdWx0aXBsZSBpbnN0YWxsYXRpb25zIG9mIGRpc2NvcmQuanMuYCxcbiAgICAgICAgICAgICAgICAgICAgJ0ludmFsaWRDbGllbnRJbnN0YW5jZSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBpYmYgPSB0aGlzLmNsaWVudC5vcHRpb25zLmludGVudHMgaW5zdGFuY2VvZiBJbnRlbnRzQml0RmllbGQgPyB0aGlzLmNsaWVudC5vcHRpb25zLmludGVudHMgOiBuZXcgSW50ZW50c0JpdEZpZWxkKHRoaXMuY2xpZW50Lm9wdGlvbnMuaW50ZW50cyk7XG5cbiAgICAgICAgICAgIGlmICghaWJmLmhhcyhJbnRlbnRzQml0RmllbGQuRmxhZ3MuR3VpbGRWb2ljZVN0YXRlcykpIHtcbiAgICAgICAgICAgICAgICBVdGlsLndhcm4oJ2NsaWVudCBpcyBtaXNzaW5nIFwiR3VpbGRWb2ljZVN0YXRlc1wiIGludGVudCcsICdJbnZhbGlkSW50ZW50c0JpdEZpZWxkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgLy8gbm9vcFxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgICAgICAgbG9ja1ZvaWNlU3RhdGVIYW5kbGVyOiBmYWxzZSxcbiAgICAgICAgICAgIGJsb2NrRXh0cmFjdG9yczogW10sXG4gICAgICAgICAgICBibG9ja1N0cmVhbUZyb206IFtdLFxuICAgICAgICAgICAgY29ubmVjdGlvblRpbWVvdXQ6IDIwMDAwLFxuICAgICAgICAgICAgbGFnTW9uaXRvcjogMzAwMDAsXG4gICAgICAgICAgICBxdWVyeUNhY2hlOiBvcHRpb25zLnF1ZXJ5Q2FjaGUgPT09IG51bGwgPyBudWxsIDogb3B0aW9ucy5xdWVyeUNhY2hlIHx8IG5ldyBRdWVyeUNhY2hlKHRoaXMpLFxuICAgICAgICAgICAgdXNlTGVnYWN5RkZtcGVnOiBmYWxzZSxcbiAgICAgICAgICAgIHNraXBGRm1wZWc6IHRydWUsXG4gICAgICAgICAgICBwcm9iZVRpbWVvdXQ6IDUwMDAsXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgeXRkbE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBoaWdoV2F0ZXJNYXJrOiAxIDw8IDI1LFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMueXRkbE9wdGlvbnNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBhcyBQbGF5ZXJJbml0T3B0aW9ucztcblxuICAgICAgICAvLyBAdHMtaWdub3JlIHByaXZhdGUgbWV0aG9kXG4gICAgICAgIHRoaXMuY2xpZW50LmluY3JlbWVudE1heExpc3RlbmVycygpO1xuXG4gICAgICAgIHRoaXMuY2xpZW50Lm9uKEV2ZW50cy5Wb2ljZVN0YXRlVXBkYXRlLCB0aGlzLiN2b2ljZVN0YXRlVXBkYXRlTGlzdGVuZXIpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmxhZ01vbml0b3IgPT09ICdudW1iZXInICYmIHRoaXMub3B0aW9ucy5sYWdNb25pdG9yID4gMCkge1xuICAgICAgICAgICAgdGhpcy4jbGFnTW9uaXRvckludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgICAgICAgdGhpcy4jbGFnTW9uaXRvclRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jbGFzdExhdGVuY3kgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNEZWJ1Z2dlcikgdGhpcy5kZWJ1ZyhgW0xhZyBNb25pdG9yXSBFdmVudCBsb29wIGxhdGVuY3k6ICR7dGhpcy4jbGFzdExhdGVuY3l9bXNgKTtcbiAgICAgICAgICAgICAgICB9LCAwKS51bnJlZigpO1xuICAgICAgICAgICAgfSwgdGhpcy5vcHRpb25zLmxhZ01vbml0b3IpLnVucmVmKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmlwY29uZmlnKSB7XG4gICAgICAgICAgICB0aGlzLnJvdXRlUGxhbm5lciA9IG5ldyBJUFJvdGF0b3IodGhpcy5vcHRpb25zLmlwY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9pbnRlcm5hbHMuYWRkUGxheWVyKHRoaXMpO1xuXG4gICAgICAgIGlmICghKGtTaW5nbGV0b24gaW4gUGxheWVyKSkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFBsYXllciwga1NpbmdsZXRvbiwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLFxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaG9va3MgY29udGV4dCBmb3IgdGhpcyBwbGF5ZXIgaW5zdGFuY2UuXG4gICAgICovXG4gICAgcHVibGljIGdldCBjb250ZXh0KCkge1xuICAgICAgICBpZiAoIXRoaXMuI2hvb2tzQ3R4KSB7XG4gICAgICAgICAgICB0aGlzLiNob29rc0N0eCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLiNob29rc0N0eDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSBkZWZhdWx0IHZvaWNlIHN0YXRlIHVwZGF0ZSBoYW5kbGVyXG4gICAgICogQHBhcmFtIGhhbmRsZXIgVGhlIGhhbmRsZXIgY2FsbGJhY2tcbiAgICAgKi9cbiAgICBwdWJsaWMgb25Wb2ljZVN0YXRlVXBkYXRlKGhhbmRsZXI6IFZvaWNlU3RhdGVIYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuI29uVm9pY2VTdGF0ZVVwZGF0ZSA9IGhhbmRsZXI7XG4gICAgfVxuXG4gICAgcHVibGljIGRlYnVnKG06IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5lbWl0KCdkZWJ1ZycsIG0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgZGlzY29yZC1wbGF5ZXIgc2luZ2xldG9uIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSBjbGllbnQgVGhlIGNsaWVudCB0aGF0IGluc3RhbnRpYXRlZCBwbGF5ZXJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBQbGF5ZXIgaW5pdGlhbGl6ZXIgb3B0aW9uc1xuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgc2luZ2xldG9uKGNsaWVudDogQ2xpZW50LCBvcHRpb25zOiBPbWl0PFBsYXllckluaXRPcHRpb25zLCAnaWdub3JlSW5zdGFuY2UnPiA9IHt9KSB7XG4gICAgICAgIHJldHVybiBuZXcgUGxheWVyKGNsaWVudCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGlnbm9yZUluc3RhbmNlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIG5ldyBkaXNjb3JkLXBsYXllciBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0gY2xpZW50IFRoZSBjbGllbnQgdGhhdCBpbnN0YW50aWF0ZWQgcGxheWVyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgUGxheWVyIGluaXRpYWxpemVyIG9wdGlvbnNcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShjbGllbnQ6IENsaWVudCwgb3B0aW9uczogT21pdDxQbGF5ZXJJbml0T3B0aW9ucywgJ2lnbm9yZUluc3RhbmNlJz4gPSB7fSkge1xuICAgICAgICByZXR1cm4gbmV3IFBsYXllcihjbGllbnQsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBpZ25vcmVJbnN0YW5jZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIGFjdGl2ZSBtYXN0ZXIgcGxheWVyIGluc3RhbmNlc1xuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0QWxsUGxheWVycygpIHtcbiAgICAgICAgcmV0dXJuIF9pbnRlcm5hbHMuZ2V0UGxheWVycygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFyIGFsbCBtYXN0ZXIgcGxheWVyIGluc3RhbmNlc1xuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgY2xlYXJBbGxQbGF5ZXJzKCkge1xuICAgICAgICByZXR1cm4gX2ludGVybmFscy5pbnN0YW5jZXMuY2xlYXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBxdWVyeSBjYWNoZSBwcm92aWRlciBpbiB1c2VcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHF1ZXJ5Q2FjaGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMucXVlcnlDYWNoZSA/PyBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFsaWFzIHRvIGBQbGF5ZXIubm9kZXNgLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgcXVldWVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub2RlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBsb29wIGxhdGVuY3kgaW4gbXMuIElmIHlvdXIgYm90IGlzIGxhZ2d5IGFuZCB0aGlzIHJldHVybnMgYSBudW1iZXIgYWJvdmUgMjBtcyBmb3IgZXhhbXBsZSxcbiAgICAgKiBzb21lIGV4cGVuc2l2ZSB0YXNrIGlzIGJlaW5nIGV4ZWN1dGVkIG9uIHRoZSBjdXJyZW50IHRocmVhZCB3aGljaCBpcyBzbG93aW5nIGRvd24gdGhlIGV2ZW50IGxvb3AuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGV2ZW50TG9vcExhZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2xhc3RMYXRlbmN5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBzdGF0aXN0aWNzIHRoYXQgY291bGQgYmUgdXNlZnVsLiBTdGF0aXN0aWNzIGdlbmVyYXRvciBpcyBzdGlsbCBleHBlcmltZW50YWwuXG4gICAgICogQGV4YW1wbGUgYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IHN0YXRzID0gcGxheWVyLmdlbmVyYXRlU3RhdGlzdGljcygpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coc3RhdHMpO1xuICAgICAqXG4gICAgICogLy8gb3V0cHV0cyBzb21ldGhpbmcgbGlrZVxuICAgICAqIC8vIHtcbiAgICAgKiAvLyAgIGluc3RhbmNlczogbnVtYmVyLFxuICAgICAqIC8vICAgcXVldWVzQ291bnQ6IG51bWJlcixcbiAgICAgKiAvLyAgIHF1ZXJ5Q2FjaGVFbmFibGVkOiBib29sZWFuLFxuICAgICAqIC8vICAgcXVldWVzOiBbXG4gICAgICogLy8gICAgICBHdWlsZFF1ZXVlU3RhdGlzdGljc01ldGFkYXRhLFxuICAgICAqIC8vICAgICAgR3VpbGRRdWV1ZVN0YXRpc3RpY3NNZXRhZGF0YSxcbiAgICAgKiAvLyAgICAgIEd1aWxkUXVldWVTdGF0aXN0aWNzTWV0YWRhdGEsXG4gICAgICogLy8gICAgICAuLi5cbiAgICAgKiAvLyAgIF1cbiAgICAgKiAvLyB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIGdlbmVyYXRlU3RhdGlzdGljcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluc3RhbmNlczogX2ludGVybmFscy5pbnN0YW5jZXMuc2l6ZSxcbiAgICAgICAgICAgIHF1ZXVlc0NvdW50OiB0aGlzLnF1ZXVlcy5jYWNoZS5zaXplLFxuICAgICAgICAgICAgcXVlcnlDYWNoZUVuYWJsZWQ6IHRoaXMucXVlcnlDYWNoZSAhPSBudWxsLFxuICAgICAgICAgICAgcXVldWVzOiB0aGlzLnF1ZXVlcy5jYWNoZS5tYXAoKG0pID0+IG0uc3RhdHMuZ2VuZXJhdGUoKSlcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95IGV2ZXJ5IHNpbmdsZSBxdWV1ZXMgbWFuYWdlZCBieSB0aGlzIG1hc3RlciBwbGF5ZXIgaW5zdGFuY2VcbiAgICAgKiBAZXhhbXBsZSBgYGB0eXBlc2NyaXB0XG4gICAgICogLy8gdXNlIG1lIHdoZW4geW91IHdhbnQgdG8gaW1tZWRpYXRlbHkgdGVybWluYXRlIGV2ZXJ5IHNpbmdsZSBxdWV1ZXMgaW4gZXhpc3RlbmNlIFx1RDgzRFx1REQyQVxuICAgICAqIGF3YWl0IHBsYXllci5kZXN0cm95KCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMubm9kZXMuY2FjaGUuZm9yRWFjaCgobm9kZSkgPT4gbm9kZS5kZWxldGUoKSk7XG4gICAgICAgIHRoaXMuY2xpZW50Lm9mZihFdmVudHMuVm9pY2VTdGF0ZVVwZGF0ZSwgdGhpcy4jdm9pY2VTdGF0ZVVwZGF0ZUxpc3RlbmVyKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZSBwcml2YXRlIG1ldGhvZFxuICAgICAgICB0aGlzLmNsaWVudC5kZWNyZW1lbnRNYXhMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5ldmVudHMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgIGF3YWl0IHRoaXMuZXh0cmFjdG9ycy51bnJlZ2lzdGVyQWxsKCk7XG4gICAgICAgIGlmICh0aGlzLiNsYWdNb25pdG9ySW50ZXJ2YWwpIGNsZWFySW50ZXJ2YWwodGhpcy4jbGFnTW9uaXRvckludGVydmFsKTtcbiAgICAgICAgaWYgKHRoaXMuI2xhZ01vbml0b3JUaW1lb3V0KSBjbGVhckludGVydmFsKHRoaXMuI2xhZ01vbml0b3JUaW1lb3V0KTtcbiAgICAgICAgX2ludGVybmFscy5jbGVhclBsYXllcih0aGlzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9oYW5kbGVWb2ljZVN0YXRlKG9sZFN0YXRlOiBWb2ljZVN0YXRlLCBuZXdTdGF0ZTogVm9pY2VTdGF0ZSkge1xuICAgICAgICBjb25zdCBxdWV1ZSA9IHRoaXMubm9kZXMuZ2V0KG9sZFN0YXRlLmd1aWxkLmlkKTtcbiAgICAgICAgaWYgKCFxdWV1ZSB8fCAhcXVldWUuY29ubmVjdGlvbiB8fCAhcXVldWUuY2hhbm5lbCkgcmV0dXJuO1xuXG4gICAgICAgIC8vIGRpc3BhdGNoIHZvaWNlIHN0YXRlIHVwZGF0ZVxuICAgICAgICBjb25zdCB3YXNIYW5kbGVkID0gdGhpcy5ldmVudHMuZW1pdChHdWlsZFF1ZXVlRXZlbnQudm9pY2VTdGF0ZVVwZGF0ZSwgcXVldWUsIG9sZFN0YXRlLCBuZXdTdGF0ZSk7XG4gICAgICAgIC8vIGlmIHRoZSBldmVudCB3YXMgaGFuZGxlZCwgcmV0dXJuIGFzc3VtaW5nIHRoZSBsaXN0ZW5lciBpbXBsZW1lbnRlZCBhbGwgb2YgdGhlIGxvZ2ljIGJlbG93XG4gICAgICAgIGlmICh3YXNIYW5kbGVkICYmICF0aGlzLm9wdGlvbnMubG9ja1ZvaWNlU3RhdGVIYW5kbGVyKSByZXR1cm47XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuI29uVm9pY2VTdGF0ZVVwZGF0ZSh0aGlzLCBxdWV1ZSwgb2xkU3RhdGUsIG5ld1N0YXRlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHZvaWNlIHN0YXRlIHVwZGF0ZVxuICAgICAqIEBwYXJhbSB7Vm9pY2VTdGF0ZX0gb2xkU3RhdGUgVGhlIG9sZCB2b2ljZSBzdGF0ZVxuICAgICAqIEBwYXJhbSB7Vm9pY2VTdGF0ZX0gbmV3U3RhdGUgVGhlIG5ldyB2b2ljZSBzdGF0ZVxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqIEBleGFtcGxlIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAvLyBwYXNzaW5nIHZvaWNlIHN0YXRlIHVwZGF0ZSBkYXRhIHRvIHRoaXMgbWV0aG9kIHdpbGwgdHJpZ2dlciB2b2ljZSBzdGF0ZSBoYW5kbGVyXG4gICAgICpcbiAgICAgKiBjbGllbnQub24oJ3ZvaWNlU3RhdGVVcGRhdGUnLCAob2xkU3RhdGUsIG5ld1N0YXRlKSA9PiB7XG4gICAgICogICAvLyB0aGlzIGlzIGRlZmluaXRlbHkgYSByb2NrZXQgc2NpZW5jZSwgcmlnaHQgaGVyZVxuICAgICAqICAgcGxheWVyLmhhbmRsZVZvaWNlU3RhdGUob2xkU3RhdGUsIG5ld1N0YXRlKTtcbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgaGFuZGxlVm9pY2VTdGF0ZShvbGRTdGF0ZTogVm9pY2VTdGF0ZSwgbmV3U3RhdGU6IFZvaWNlU3RhdGUpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5faGFuZGxlVm9pY2VTdGF0ZShvbGRTdGF0ZSwgbmV3U3RhdGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvY2sgdm9pY2Ugc3RhdGUgaGFuZGxlci4gV2hlbiB0aGlzIG1ldGhvZCBpcyBjYWxsZWQsIGRpc2NvcmQtcGxheWVyIHdpbGwga2VlcCB1c2luZyB0aGUgZGVmYXVsdCB2b2ljZSBzdGF0ZSB1cGRhdGUgaGFuZGxlciwgZXZlbiBpZiBjdXN0b20gaW1wbGVtZW50YXRpb24gZXhpc3RzLlxuICAgICAqL1xuICAgIHB1YmxpYyBsb2NrVm9pY2VTdGF0ZUhhbmRsZXIoKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5sb2NrVm9pY2VTdGF0ZUhhbmRsZXIgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVubG9jayB2b2ljZSBzdGF0ZSBoYW5kbGVyLiBXaGVuIHRoaXMgbWV0aG9kIGlzIGNhbGxlZCwgZGlzY29yZC1wbGF5ZXIgd2lsbCBzdG9wIHVzaW5nIHRoZSBkZWZhdWx0IHZvaWNlIHN0YXRlIHVwZGF0ZSBoYW5kbGVyIGlmIGN1c3RvbSBpbXBsZW1lbnRhdGlvbiBleGlzdHMuXG4gICAgICovXG4gICAgcHVibGljIHVubG9ja1ZvaWNlU3RhdGVIYW5kbGVyKCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMubG9ja1ZvaWNlU3RhdGVIYW5kbGVyID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHZvaWNlIHN0YXRlIGhhbmRsZXIgaXMgbG9ja2VkLlxuICAgICAqL1xuICAgIHB1YmxpYyBpc1ZvaWNlU3RhdGVIYW5kbGVyTG9ja2VkKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLm9wdGlvbnMubG9ja1ZvaWNlU3RhdGVIYW5kbGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYXRlIGF1ZGlvIHBsYXllclxuICAgICAqIEBwYXJhbSBjaGFubmVsIFRoZSB2b2ljZSBjaGFubmVsIG9uIHdoaWNoIHRoZSBtdXNpYyBzaG91bGQgYmUgcGxheWVkXG4gICAgICogQHBhcmFtIHF1ZXJ5IFRoZSB0cmFjayBvciBzb3VyY2UgdG8gcGxheVxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIHBsYXllclxuICAgICAqIEBleGFtcGxlIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAvLyBubyBuZWVkIHRvIHdvcnJ5IGFib3V0IHF1ZXVlIG1hbmFnZW1lbnQsIGp1c3QgdXNlIHRoaXMgbWV0aG9kIFx1RDgzRFx1REUwNFxuICAgICAqIGNvbnN0IHF1ZXJ5ID0gJ3RoaXMgaXMgbXkgc3VwZXIgY29vbCBzZWFyY2ggcXVlcnkgdGhhdCBJIHdhbnQgdG8gcGxheSc7XG4gICAgICpcbiAgICAgKiB0cnkge1xuICAgICAqICAgIGNvbnN0IHsgdHJhY2sgfSA9IGF3YWl0IHBsYXllci5wbGF5KHZvaWNlQ2hhbm5lbCwgcXVlcnkpO1xuICAgICAqICAgY29uc29sZS5sb2coYFx1RDgzQ1x1REY4OSBJIGFtIHBsYXlpbmcgJHt0cmFjay50aXRsZX0gXHVEODNDXHVERjg5YCk7XG4gICAgICogfSBjYXRjaChlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhgXHVEODNEXHVERTJEIEZhaWxlZCB0byBwbGF5IGVycm9yIG9oIG5vOlxcblxcbiR7ZX1gKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIHBsYXk8VCA9IHVua25vd24+KGNoYW5uZWw6IEd1aWxkVm9pY2VDaGFubmVsUmVzb2x2YWJsZSwgcXVlcnk6IFRyYWNrTGlrZSwgb3B0aW9uczogUGxheWVyTm9kZUluaXRpYWxpemVyT3B0aW9uczxUPiA9IHt9KTogUHJvbWlzZTxQbGF5ZXJOb2RlSW5pdGlhbGl6YXRpb25SZXN1bHQ8VD4+IHtcbiAgICAgICAgY29uc3QgdmMgPSB0aGlzLmNsaWVudC5jaGFubmVscy5yZXNvbHZlKGNoYW5uZWwpO1xuICAgICAgICBpZiAoIXZjPy5pc1ZvaWNlQmFzZWQoKSkgdGhyb3cgRXhjZXB0aW9ucy5FUlJfSU5WQUxJRF9BUkdfVFlQRSgnY2hhbm5lbCcsICdWb2ljZUJhc2VkQ2hhbm5lbCcsICF2YyA/ICd1bmRlZmluZWQnIDogYGNoYW5uZWwgdHlwZSAke3ZjLnR5cGV9YCk7XG5cbiAgICAgICAgY29uc3Qgb3JpZ2luYWxSZXN1bHQgPSBxdWVyeSBpbnN0YW5jZW9mIFNlYXJjaFJlc3VsdCA/IHF1ZXJ5IDogYXdhaXQgdGhpcy5zZWFyY2gocXVlcnksIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSAoYXdhaXQgb3B0aW9ucy5hZnRlclNlYXJjaD8uKG9yaWdpbmFsUmVzdWx0KSkgfHwgb3JpZ2luYWxSZXN1bHQ7XG4gICAgICAgIGlmIChyZXN1bHQuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICB0aHJvdyBFeGNlcHRpb25zLkVSUl9OT19SRVNVTFQoYE5vIHJlc3VsdHMgZm91bmQgZm9yIFwiJHtxdWVyeX1cIiAoRXh0cmFjdG9yOiAke3Jlc3VsdC5leHRyYWN0b3I/LmlkZW50aWZpZXIgfHwgJ04vQSd9KWApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcXVldWUgPSB0aGlzLm5vZGVzLmNyZWF0ZSh2Yy5ndWlsZCwgb3B0aW9ucy5ub2RlT3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHRoaXMuaGFzRGVidWdnZXIpIHRoaXMuZGVidWcoYFtBc3luY1F1ZXVlXSBBY3F1aXJpbmcgYW4gZW50cnkuLi5gKTtcbiAgICAgICAgY29uc3QgZW50cnkgPSBxdWV1ZS50YXNrc1F1ZXVlLmFjcXVpcmUoeyBzaWduYWw6IG9wdGlvbnMuc2lnbmFsIH0pO1xuICAgICAgICBpZiAodGhpcy5oYXNEZWJ1Z2dlcikgdGhpcy5kZWJ1ZyhgW0FzeW5jUXVldWVdIEVudHJ5ICR7ZW50cnkuaWR9IHdhcyBhY3F1aXJlZCBzdWNjZXNzZnVsbHkhYCk7XG5cbiAgICAgICAgaWYgKHRoaXMuaGFzRGVidWdnZXIpIHRoaXMuZGVidWcoYFtBc3luY1F1ZXVlXSBXYWl0aW5nIGZvciB0aGUgcXVldWUgdG8gcmVzb2x2ZS4uLmApO1xuICAgICAgICBhd2FpdCBlbnRyeS5nZXRUYXNrKCk7XG4gICAgICAgIGlmICh0aGlzLmhhc0RlYnVnZ2VyKSB0aGlzLmRlYnVnKGBbQXN5bmNRdWV1ZV0gRW50cnkgJHtlbnRyeS5pZH0gd2FzIHJlc29sdmVkIWApO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIXF1ZXVlLmNoYW5uZWwpIGF3YWl0IHF1ZXVlLmNvbm5lY3QodmMsIG9wdGlvbnMuY29ubmVjdGlvbk9wdGlvbnMpO1xuXG4gICAgICAgICAgICBpZiAoIXJlc3VsdC5wbGF5bGlzdCkge1xuICAgICAgICAgICAgICAgIHF1ZXVlLmFkZFRyYWNrKHJlc3VsdC50cmFja3NbMF0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBxdWV1ZS5hZGRUcmFjayhyZXN1bHQucGxheWxpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFxdWV1ZS5pc1BsYXlpbmcoKSkgYXdhaXQgcXVldWUubm9kZS5wbGF5KG51bGwsIG9wdGlvbnMuYXVkaW9QbGF5ZXJPcHRpb25zKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc0RlYnVnZ2VyKSB0aGlzLmRlYnVnKGBbQXN5bmNRdWV1ZV0gUmVsZWFzaW5nIGFuIGVudHJ5IGZyb20gdGhlIHF1ZXVlLi4uYCk7XG4gICAgICAgICAgICBxdWV1ZS50YXNrc1F1ZXVlLnJlbGVhc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0cmFjazogcmVzdWx0LnRyYWNrc1swXSxcbiAgICAgICAgICAgIGV4dHJhY3RvcjogcmVzdWx0LmV4dHJhY3RvcixcbiAgICAgICAgICAgIHNlYXJjaFJlc3VsdDogcmVzdWx0LFxuICAgICAgICAgICAgcXVldWVcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZWFyY2ggdHJhY2tzXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCBUcmFjayB8IFRyYWNrW10gfCBQbGF5bGlzdCB8IFNlYXJjaFJlc3VsdH0gcXVlcnkgVGhlIHNlYXJjaCBxdWVyeVxuICAgICAqIEBwYXJhbSB7U2VhcmNoT3B0aW9uc30gb3B0aW9ucyBUaGUgc2VhcmNoIG9wdGlvbnNcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxTZWFyY2hSZXN1bHQ+fVxuICAgICAqIEBleGFtcGxlIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBzZWFyY2hRdWVyeSA9ICdwYXNzIHVybCBvciB0ZXh0IG9yIGRpc2NvcmQtcGxheWVyIHRyYWNrIGNvbnN0cnVjdGFibGUgb2JqZWN0cywgd2UgZ290IHlvdSBjb3ZlcmVkIFx1RDgzRFx1REUwRSc7XG4gICAgICogY29uc3QgcmVzdWx0ID0gYXdhaXQgcGxheWVyLnNlYXJjaChzZWFyY2hRdWVyeSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhyZXN1bHQpOyAvLyBMb2dzIGBTZWFyY2hSZXN1bHRgIG9iamVjdFxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBzZWFyY2goc2VhcmNoUXVlcnk6IHN0cmluZyB8IFRyYWNrIHwgVHJhY2tbXSB8IFBsYXlsaXN0IHwgU2VhcmNoUmVzdWx0LCBvcHRpb25zOiBTZWFyY2hPcHRpb25zID0ge30pOiBQcm9taXNlPFNlYXJjaFJlc3VsdD4ge1xuICAgICAgICBpZiAoc2VhcmNoUXVlcnkgaW5zdGFuY2VvZiBTZWFyY2hSZXN1bHQpIHJldHVybiBzZWFyY2hRdWVyeTtcblxuICAgICAgICBpZiAob3B0aW9ucy5yZXF1ZXN0ZWRCeSAhPSBudWxsKSBvcHRpb25zLnJlcXVlc3RlZEJ5ID0gdGhpcy5jbGllbnQudXNlcnMucmVzb2x2ZShvcHRpb25zLnJlcXVlc3RlZEJ5KSE7XG4gICAgICAgIG9wdGlvbnMuYmxvY2tFeHRyYWN0b3JzID8/PSB0aGlzLm9wdGlvbnMuYmxvY2tFeHRyYWN0b3JzO1xuICAgICAgICBvcHRpb25zLmZhbGxiYWNrU2VhcmNoRW5naW5lID8/PSBRdWVyeVR5cGUuQVVUT19TRUFSQ0g7XG5cbiAgICAgICAgaWYgKHNlYXJjaFF1ZXJ5IGluc3RhbmNlb2YgVHJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2VhcmNoUmVzdWx0KHRoaXMsIHtcbiAgICAgICAgICAgICAgICBwbGF5bGlzdDogc2VhcmNoUXVlcnkucGxheWxpc3QgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICB0cmFja3M6IFtzZWFyY2hRdWVyeV0sXG4gICAgICAgICAgICAgICAgcXVlcnk6IHNlYXJjaFF1ZXJ5LnRpdGxlLFxuICAgICAgICAgICAgICAgIGV4dHJhY3Rvcjogc2VhcmNoUXVlcnkuZXh0cmFjdG9yLFxuICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogc2VhcmNoUXVlcnkucXVlcnlUeXBlLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBvcHRpb25zLnJlcXVlc3RlZEJ5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWFyY2hRdWVyeSBpbnN0YW5jZW9mIFBsYXlsaXN0KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNlYXJjaFJlc3VsdCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgcGxheWxpc3Q6IHNlYXJjaFF1ZXJ5LFxuICAgICAgICAgICAgICAgIHRyYWNrczogc2VhcmNoUXVlcnkudHJhY2tzLFxuICAgICAgICAgICAgICAgIHF1ZXJ5OiBzZWFyY2hRdWVyeS50aXRsZSxcbiAgICAgICAgICAgICAgICBleHRyYWN0b3I6IHNlYXJjaFF1ZXJ5LnRyYWNrc1swXT8uZXh0cmFjdG9yLFxuICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogUXVlcnlUeXBlLkFVVE8sXG4gICAgICAgICAgICAgICAgcmVxdWVzdGVkQnk6IG9wdGlvbnMucmVxdWVzdGVkQnlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2VhcmNoUXVlcnkpKSB7XG4gICAgICAgICAgICBjb25zdCB0cmFja3MgPSBzZWFyY2hRdWVyeS5maWx0ZXIoKHQpID0+IHQgaW5zdGFuY2VvZiBUcmFjayk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNlYXJjaFJlc3VsdCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgcGxheWxpc3Q6IG51bGwsXG4gICAgICAgICAgICAgICAgdHJhY2tzLFxuICAgICAgICAgICAgICAgIHF1ZXJ5OiAnQEAjJXt7VXNlckxvYWRlZENvbnRlbnR9fSUjQEAnLFxuICAgICAgICAgICAgICAgIGV4dHJhY3RvcjogbnVsbCxcbiAgICAgICAgICAgICAgICBxdWVyeVR5cGU6IFF1ZXJ5VHlwZS5BVVRPLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBvcHRpb25zLnJlcXVlc3RlZEJ5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmhhc0RlYnVnZ2VyKSB0aGlzLmRlYnVnKGBTZWFyY2hpbmcgJHtzZWFyY2hRdWVyeX1gKTtcblxuICAgICAgICBsZXQgZXh0cmFjdG9yOiBCYXNlRXh0cmFjdG9yIHwgbnVsbCA9IG51bGwsXG4gICAgICAgICAgICBwcm90b2NvbDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cbiAgICAgICAgb3B0aW9ucy5zZWFyY2hFbmdpbmUgPz89IFF1ZXJ5VHlwZS5BVVRPO1xuICAgICAgICBvcHRpb25zLmZhbGxiYWNrU2VhcmNoRW5naW5lID8/PSBRdWVyeVR5cGUuQVVUT19TRUFSQ0g7XG5cbiAgICAgICAgaWYgKHRoaXMuaGFzRGVidWdnZXIpIHRoaXMuZGVidWcoYFNlYXJjaCBlbmdpbmUgc2V0IHRvICR7b3B0aW9ucy5zZWFyY2hFbmdpbmV9LCBmYWxsYmFjayBzZWFyY2ggZW5naW5lIHNldCB0byAke29wdGlvbnMuZmFsbGJhY2tTZWFyY2hFbmdpbmV9YCk7XG5cbiAgICAgICAgaWYgKC9eXFx3KzovLnRlc3Qoc2VhcmNoUXVlcnkpKSB7XG4gICAgICAgICAgICBjb25zdCBbcHJvdG9jb2xOYW1lLCAuLi5xdWVyeV0gPSBzZWFyY2hRdWVyeS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzRGVidWdnZXIpIHRoaXMuZGVidWcoYFByb3RvY29sICR7cHJvdG9jb2xOYW1lfSBkZXRlY3RlZCBpbiBxdWVyeWApO1xuXG4gICAgICAgICAgICBjb25zdCBtYXRjaGluZ0V4dHJhY3RvciA9IHRoaXMuZXh0cmFjdG9ycy5zdG9yZS5maW5kKChlKSA9PiAhdGhpcy5leHRyYWN0b3JzLmlzRGlzYWJsZWQoZS5pZGVudGlmaWVyKSAmJiBlLnByb3RvY29scy5pbmNsdWRlcyhwcm90b2NvbE5hbWUpKTtcblxuICAgICAgICAgICAgaWYgKG1hdGNoaW5nRXh0cmFjdG9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzRGVidWdnZXIpIHRoaXMuZGVidWcoYFByb3RvY29sICR7cHJvdG9jb2xOYW1lfSBpcyBzdXBwb3J0ZWQgYnkgJHttYXRjaGluZ0V4dHJhY3Rvci5pZGVudGlmaWVyfSBleHRyYWN0b3IhYCk7XG4gICAgICAgICAgICAgICAgZXh0cmFjdG9yID0gbWF0Y2hpbmdFeHRyYWN0b3I7XG4gICAgICAgICAgICAgICAgc2VhcmNoUXVlcnkgPSBxdWVyeS5qb2luKCc6Jyk7XG4gICAgICAgICAgICAgICAgcHJvdG9jb2wgPSBwcm90b2NvbE5hbWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc0RlYnVnZ2VyKSB0aGlzLmRlYnVnKGBDb3VsZCBub3QgZmluZCBhbiBleHRyYWN0b3IgdGhhdCBzdXBwb3J0cyAke3Byb3RvY29sTmFtZX0gcHJvdG9jb2wuIEZhbGxpbmcgYmFjayB0byBkZWZhdWx0IGJlaGF2aW9yLi4uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZWRpcmVjdGVkID0gYXdhaXQgUXVlcnlSZXNvbHZlci5wcmVSZXNvbHZlKHNlYXJjaFF1ZXJ5KTtcbiAgICAgICAgY29uc3QgeyB0eXBlOiBxdWVyeVR5cGUsIHF1ZXJ5IH0gPVxuICAgICAgICAgICAgb3B0aW9ucy5zZWFyY2hFbmdpbmUgPT09IFF1ZXJ5VHlwZS5BVVRPID8gUXVlcnlSZXNvbHZlci5yZXNvbHZlKHJlZGlyZWN0ZWQsIG9wdGlvbnMuZmFsbGJhY2tTZWFyY2hFbmdpbmUpIDogKHsgdHlwZTogb3B0aW9ucy5zZWFyY2hFbmdpbmUsIHF1ZXJ5OiByZWRpcmVjdGVkIH0gYXMgUmVzb2x2ZWRRdWVyeSk7XG5cbiAgICAgICAgaWYgKHRoaXMuaGFzRGVidWdnZXIpIHRoaXMuZGVidWcoYFF1ZXJ5IHR5cGUgaWRlbnRpZmllZCBhcyAke3F1ZXJ5VHlwZX0ke2V4dHJhY3RvciAmJiBwcm90b2NvbCA/ICcgYnV0IG1pZ2h0IG5vdCBiZSB1c2VkIGR1ZSB0byB0aGUgcHJlc2VuY2Ugb2YgcHJvdG9jb2wnIDogJyd9YCk7XG5cbiAgICAgICAgLy8gZm9yY2UgcGFydGljdWxhciBleHRyYWN0b3JcbiAgICAgICAgaWYgKG9wdGlvbnMuc2VhcmNoRW5naW5lLnN0YXJ0c1dpdGgoJ2V4dDonKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzRGVidWdnZXIpIHRoaXMuZGVidWcoYEZvcmNpbmcgJHtvcHRpb25zLnNlYXJjaEVuZ2luZS5zdWJzdHJpbmcoNCl9IGV4dHJhY3Rvci4uLmApO1xuICAgICAgICAgICAgZXh0cmFjdG9yID0gdGhpcy5leHRyYWN0b3JzLmdldChvcHRpb25zLnNlYXJjaEVuZ2luZS5zdWJzdHJpbmcoNCkpITtcbiAgICAgICAgICAgIGlmICghZXh0cmFjdG9yKVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU2VhcmNoUmVzdWx0KHRoaXMsIHtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZSxcbiAgICAgICAgICAgICAgICAgICAgZXh0cmFjdG9yLFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogb3B0aW9ucy5yZXF1ZXN0ZWRCeVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcXVlcnkgYWxsIGV4dHJhY3RvcnNcbiAgICAgICAgaWYgKCFleHRyYWN0b3IpIHtcbiAgICAgICAgICAgIC8vIGNhY2hlIHZhbGlkYXRpb25cbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5pZ25vcmVDYWNoZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc0RlYnVnZ2VyKSB0aGlzLmRlYnVnKGBDaGVja2luZyBjYWNoZS4uLmApO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMucXVlcnlDYWNoZT8ucmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICBxdWVyeVR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBvcHRpb25zLnJlcXVlc3RlZEJ5XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gY2FjaGUgaGl0XG4gICAgICAgICAgICAgICAgaWYgKHJlcz8uaGFzVHJhY2tzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzRGVidWdnZXIpIHRoaXMuZGVidWcoYENhY2hlIGhpdCBmb3IgcXVlcnkgJHtxdWVyeX1gKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNEZWJ1Z2dlcikgdGhpcy5kZWJ1ZyhgQ2FjaGUgbWlzcyBmb3IgcXVlcnkgJHtxdWVyeX1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuaGFzRGVidWdnZXIpIHRoaXMuZGVidWcoYEV4ZWN1dGluZyBleHRyYWN0b3JzLi4uYCk7XG5cbiAgICAgICAgICAgIC8vIGNhY2hlIG1pc3NcbiAgICAgICAgICAgIGV4dHJhY3RvciA9XG4gICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmV4dHJhY3RvcnMucnVuKGFzeW5jIChleHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmJsb2NrRXh0cmFjdG9ycz8uaW5jbHVkZXMoZXh0LmlkZW50aWZpZXIpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXh0LnZhbGlkYXRlKHF1ZXJ5LCBxdWVyeVR5cGUgYXMgU2VhcmNoUXVlcnlUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApPy5leHRyYWN0b3IgfHwgbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG5vIGV4dHJhY3RvcnMgYXZhaWxhYmxlXG4gICAgICAgIGlmICghZXh0cmFjdG9yKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXNEZWJ1Z2dlcikgdGhpcy5kZWJ1ZygnRmFpbGVkIHRvIGZpbmQgYXBwcm9wcmlhdGUgZXh0cmFjdG9yJyk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNlYXJjaFJlc3VsdCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAgICAgcXVlcnlUeXBlLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBvcHRpb25zLnJlcXVlc3RlZEJ5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmhhc0RlYnVnZ2VyKSB0aGlzLmRlYnVnKGBFeGVjdXRpbmcgbWV0YWRhdGEgcXVlcnkgdXNpbmcgJHtleHRyYWN0b3IuaWRlbnRpZmllcn0gZXh0cmFjdG9yLi4uYCk7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGV4dHJhY3RvclxuICAgICAgICAgICAgLmhhbmRsZShxdWVyeSwge1xuICAgICAgICAgICAgICAgIHR5cGU6IHF1ZXJ5VHlwZSBhcyBTZWFyY2hRdWVyeVR5cGUsXG4gICAgICAgICAgICAgICAgcmVxdWVzdGVkQnk6IG9wdGlvbnMucmVxdWVzdGVkQnkgYXMgVXNlcixcbiAgICAgICAgICAgICAgICByZXF1ZXN0T3B0aW9uczogb3B0aW9ucy5yZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgICAgICBwcm90b2NvbFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoKSA9PiBudWxsKTtcblxuICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXNEZWJ1Z2dlcikgdGhpcy5kZWJ1ZygnTWV0YWRhdGEgcXVlcnkgd2FzIHN1Y2Nlc3NmdWwhJyk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgU2VhcmNoUmVzdWx0KHRoaXMsIHtcbiAgICAgICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgICAgICBxdWVyeVR5cGUsXG4gICAgICAgICAgICAgICAgcGxheWxpc3Q6IHJlcy5wbGF5bGlzdCxcbiAgICAgICAgICAgICAgICB0cmFja3M6IHJlcy50cmFja3MsXG4gICAgICAgICAgICAgICAgZXh0cmFjdG9yLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBvcHRpb25zLnJlcXVlc3RlZEJ5XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmlnbm9yZUNhY2hlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzRGVidWdnZXIpIHRoaXMuZGVidWcoYEFkZGluZyBkYXRhIHRvIGNhY2hlLi4uYCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5xdWVyeUNhY2hlPy5hZGREYXRhKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5oYXNEZWJ1Z2dlcikgdGhpcy5kZWJ1ZygnRmFpbGVkIHRvIGZpbmQgcmVzdWx0IHVzaW5nIGFwcHJvcHJpYXRlIGV4dHJhY3Rvci4gUXVlcnlpbmcgYWxsIGV4dHJhY3RvcnMuLi4nKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5leHRyYWN0b3JzLnJ1bihcbiAgICAgICAgICAgIGFzeW5jIChleHQpID0+XG4gICAgICAgICAgICAgICAgIW9wdGlvbnMuYmxvY2tFeHRyYWN0b3JzPy5pbmNsdWRlcyhleHQuaWRlbnRpZmllcikgJiZcbiAgICAgICAgICAgICAgICAoYXdhaXQgZXh0LnZhbGlkYXRlKHF1ZXJ5KSkgJiZcbiAgICAgICAgICAgICAgICBleHQuaGFuZGxlKHF1ZXJ5LCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHF1ZXJ5VHlwZSBhcyBTZWFyY2hRdWVyeVR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBvcHRpb25zLnJlcXVlc3RlZEJ5IGFzIFVzZXIsXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zOiBvcHRpb25zLnJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBwcm90b2NvbFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICAgIGlmICghcmVzdWx0Py5yZXN1bHQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc0RlYnVnZ2VyKSB0aGlzLmRlYnVnKGBGYWlsZWQgdG8gcXVlcnkgbWV0YWRhdGEgcXVlcnkgdXNpbmcgJHtyZXN1bHQ/LmV4dHJhY3Rvci5pZGVudGlmaWVyIHx8ICdOL0EnfSBleHRyYWN0b3IuYCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNlYXJjaFJlc3VsdCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAgICAgcXVlcnlUeXBlLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBvcHRpb25zLnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgIGV4dHJhY3RvcjogcmVzdWx0Py5leHRyYWN0b3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaGFzRGVidWdnZXIpIHRoaXMuZGVidWcoYE1ldGFkYXRhIHF1ZXJ5IHdhcyBzdWNjZXNzZnVsIHVzaW5nICR7cmVzdWx0LmV4dHJhY3Rvci5pZGVudGlmaWVyfSFgKTtcblxuICAgICAgICBjb25zdCBkYXRhID0gbmV3IFNlYXJjaFJlc3VsdCh0aGlzLCB7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIHF1ZXJ5VHlwZSxcbiAgICAgICAgICAgIHBsYXlsaXN0OiByZXN1bHQucmVzdWx0LnBsYXlsaXN0LFxuICAgICAgICAgICAgdHJhY2tzOiByZXN1bHQucmVzdWx0LnRyYWNrcyxcbiAgICAgICAgICAgIGV4dHJhY3RvcjogcmVzdWx0LmV4dHJhY3RvcixcbiAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBvcHRpb25zLnJlcXVlc3RlZEJ5XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghb3B0aW9ucy5pZ25vcmVDYWNoZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzRGVidWdnZXIpIHRoaXMuZGVidWcoYEFkZGluZyBkYXRhIHRvIGNhY2hlLi4uYCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnF1ZXJ5Q2FjaGU/LmFkZERhdGEoZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSByZXBvcnQgb2YgdGhlIGRlcGVuZGVuY2llcyB1c2VkIGJ5IHRoZSBgZGlzY29yZC12b2lwYCBtb2R1bGUuIFVzZWZ1bCBmb3IgZGVidWdnaW5nLlxuICAgICAqIEBleGFtcGxlIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zb2xlLmxvZyhwbGF5ZXIuc2NhbkRlcHMoKSk7XG4gICAgICogLy8gLT4gbG9ncyBkZXBlbmRlbmNpZXMgcmVwb3J0XG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBwdWJsaWMgc2NhbkRlcHMoKSB7XG4gICAgICAgIGNvbnN0IGxpbmUgPSAnLScucmVwZWF0KDUwKTtcbiAgICAgICAgY29uc3QgcnVudGltZSA9ICdCdW4nIGluIGdsb2JhbFRoaXMgPyAnQnVuJyA6ICdEZW5vJyBpbiBnbG9iYWxUaGlzID8gJ0Rlbm8nIDogJ05vZGUnO1xuICAgICAgICBjb25zdCBkZXBzUmVwb3J0ID0gW1xuICAgICAgICAgICAgJ0Rpc2NvcmQgUGxheWVyJyxcbiAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICAgICBgLSBkaXNjb3JkLXBsYXllcjogJHtQbGF5ZXIudmVyc2lvbn1gLFxuICAgICAgICAgICAgYC0gZGlzY29yZC12b2lwOiAke2RWb2ljZVZlcnNpb259YCxcbiAgICAgICAgICAgIGAtIGRpc2NvcmQuanM6ICR7ZGpzVmVyc2lvbn1gLFxuICAgICAgICAgICAgYC0gTm9kZSB2ZXJzaW9uOiAke3Byb2Nlc3MudmVyc2lvbn0gKERldGVjdGVkIFJ1bnRpbWU6ICR7cnVudGltZX0sIFBsYXRmb3JtOiAke3Byb2Nlc3MucGxhdGZvcm19IFske3Byb2Nlc3MuYXJjaH1dKWAsXG4gICAgICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudXNlTGVnYWN5RkZtcGVnKSByZXR1cm4gJy0gZmZtcGVnOiBOL0EgKHVzaW5nIGxlZ2FjeSBmZm1wZWcpJztcbiAgICAgICAgICAgICAgICBjb25zdCBpbmZvID0gRkZtcGVnLmxvY2F0ZVNhZmUoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWluZm8pIHJldHVybiAnRkZtcGVnL0F2Y29udiBub3QgZm91bmQnO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtgLSBmZm1wZWc6ICR7aW5mby52ZXJzaW9ufWAsIGAtIGNvbW1hbmQ6ICR7aW5mby5jb21tYW5kfWAsIGAtIHN0YXRpYzogJHtpbmZvLmlzU3RhdGljfWAsIGAtIGxpYm9wdXM6ICR7aW5mby5tZXRhZGF0YSEuaW5jbHVkZXMoJy0tZW5hYmxlLWxpYm9wdXMnKX1gXS5qb2luKCdcXG4nKTtcbiAgICAgICAgICAgIH0pKCksXG4gICAgICAgICAgICAnXFxuJyxcbiAgICAgICAgICAgICdMb2FkZWQgRXh0cmFjdG9yczonLFxuICAgICAgICAgICAgbGluZSxcbiAgICAgICAgICAgIHRoaXMuZXh0cmFjdG9ycy5zdG9yZVxuICAgICAgICAgICAgICAgIC5tYXAoKG0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uaWRlbnRpZmllcjtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5qb2luKCdcXG4nKSB8fCAnTi9BJyxcbiAgICAgICAgICAgICdcXG5cXG5kaXNjb3JkLXZvaXAnLFxuICAgICAgICAgICAgZ2VuZXJhdGVEZXBlbmRlbmN5UmVwb3J0KClcbiAgICAgICAgXTtcblxuICAgICAgICByZXR1cm4gZGVwc1JlcG9ydC5qb2luKCdcXG4nKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgICAgICB5aWVsZCogdGhpcy5ub2Rlcy5jYWNoZS52YWx1ZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGBQbGF5bGlzdGAgaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gZGF0YSBUaGUgZGF0YSB0byBpbml0aWFsaXplIGEgcGxheWxpc3RcbiAgICAgKi9cbiAgICBwdWJsaWMgY3JlYXRlUGxheWxpc3QoZGF0YTogUGxheWxpc3RJbml0RGF0YSkge1xuICAgICAgICByZXR1cm4gbmV3IFBsYXlsaXN0KHRoaXMsIGRhdGEpO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBDaGFubmVsVHlwZSwgVm9pY2VTdGF0ZSB9IGZyb20gJ2Rpc2NvcmQuanMnO1xuaW1wb3J0IHsgR3VpbGRRdWV1ZSwgR3VpbGRRdWV1ZUV2ZW50IH0gZnJvbSAnLi9xdWV1ZSc7XG5pbXBvcnQgeyBQbGF5ZXIgfSBmcm9tICcuL1BsYXllcic7XG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi91dGlscy9VdGlsJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlZmF1bHRWb2ljZVN0YXRlSGFuZGxlcihwbGF5ZXI6IFBsYXllciwgcXVldWU6IEd1aWxkUXVldWUsIG9sZFN0YXRlOiBWb2ljZVN0YXRlLCBuZXdTdGF0ZTogVm9pY2VTdGF0ZSkge1xuICAgIGlmICghcXVldWUgfHwgIXF1ZXVlLmNvbm5lY3Rpb24gfHwgIXF1ZXVlLmNoYW5uZWwpIHJldHVybjtcblxuICAgIGlmIChvbGRTdGF0ZS5jaGFubmVsSWQgJiYgIW5ld1N0YXRlLmNoYW5uZWxJZCAmJiBuZXdTdGF0ZS5tZW1iZXI/LmlkID09PSBuZXdTdGF0ZS5ndWlsZC5tZW1iZXJzLm1lPy5pZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcXVldWUuZGVsZXRlKCk7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgLyogbm9vcCAqL1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2b2lkIHBsYXllci5ldmVudHMuZW1pdChHdWlsZFF1ZXVlRXZlbnQuZGlzY29ubmVjdCwgcXVldWUpO1xuICAgIH1cblxuICAgIGlmIChxdWV1ZS5vcHRpb25zLnBhdXNlT25FbXB0eSkge1xuICAgICAgICBjb25zdCBpc0VtcHR5ID0gVXRpbC5pc1ZvaWNlRW1wdHkocXVldWUuY2hhbm5lbCk7XG5cbiAgICAgICAgaWYgKGlzRW1wdHkpIHtcbiAgICAgICAgICAgIHF1ZXVlLm5vZGUuc2V0UGF1c2VkKHRydWUpO1xuICAgICAgICAgICAgUmVmbGVjdC5zZXQocXVldWUsICdfX3BhdXNlZE9uRW1wdHknLCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChxdWV1ZS5oYXNEZWJ1Z2dlcikge1xuICAgICAgICAgICAgICAgIHF1ZXVlLmRlYnVnKCdWb2ljZSBjaGFubmVsIGlzIGVtcHR5IGFuZCBvcHRpb25zI3BhdXNlT25FbXB0eSBpcyB0cnVlLCBwYXVzaW5nLi4uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoUmVmbGVjdC5nZXQocXVldWUsICdfX3BhdXNlZE9uRW1wdHknKSkge1xuICAgICAgICAgICAgICAgIHF1ZXVlLm5vZGUuc2V0UGF1c2VkKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBSZWZsZWN0LnNldChxdWV1ZSwgJ19fcGF1c2VkT25FbXB0eScsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBpZiAocXVldWUuaGFzRGVidWdnZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcXVldWUuZGVidWcoJ1ZvaWNlIGNoYW5uZWwgaXMgbm90IGVtcHR5IGFuZCBvcHRpb25zI3BhdXNlT25FbXB0eSBpcyB0cnVlLCByZXN1bWluZy4uLicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICghb2xkU3RhdGUuY2hhbm5lbElkICYmIG5ld1N0YXRlLmNoYW5uZWxJZCAmJiBuZXdTdGF0ZS5tZW1iZXI/LmlkID09PSBuZXdTdGF0ZS5ndWlsZC5tZW1iZXJzLm1lPy5pZCkge1xuICAgICAgICBpZiAobmV3U3RhdGUuc2VydmVyTXV0ZSAhPSBudWxsICYmIG9sZFN0YXRlLnNlcnZlck11dGUgIT09IG5ld1N0YXRlLnNlcnZlck11dGUpIHtcbiAgICAgICAgICAgIHF1ZXVlLm5vZGUuc2V0UGF1c2VkKG5ld1N0YXRlLnNlcnZlck11dGUpO1xuICAgICAgICB9IGVsc2UgaWYgKG5ld1N0YXRlLmNoYW5uZWw/LnR5cGUgPT09IENoYW5uZWxUeXBlLkd1aWxkU3RhZ2VWb2ljZSAmJiBuZXdTdGF0ZS5zdXBwcmVzcyAhPSBudWxsICYmIG9sZFN0YXRlLnN1cHByZXNzICE9PSBuZXdTdGF0ZS5zdXBwcmVzcykge1xuICAgICAgICAgICAgcXVldWUubm9kZS5zZXRQYXVzZWQobmV3U3RhdGUuc3VwcHJlc3MpO1xuICAgICAgICAgICAgaWYgKG5ld1N0YXRlLnN1cHByZXNzKSB7XG4gICAgICAgICAgICAgICAgbmV3U3RhdGUuZ3VpbGQubWVtYmVycy5tZT8udm9pY2Uuc2V0UmVxdWVzdFRvU3BlYWsodHJ1ZSkuY2F0Y2goVXRpbC5ub29wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICghbmV3U3RhdGUuY2hhbm5lbElkICYmIG9sZFN0YXRlLmNoYW5uZWxJZCA9PT0gcXVldWUuY2hhbm5lbC5pZCkge1xuICAgICAgICBpZiAoIVV0aWwuaXNWb2ljZUVtcHR5KHF1ZXVlLmNoYW5uZWwpKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGlmICghVXRpbC5pc1ZvaWNlRW1wdHkocXVldWUuY2hhbm5lbCEpKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoIXBsYXllci5ub2Rlcy5oYXMocXVldWUuZ3VpbGQuaWQpKSByZXR1cm47XG4gICAgICAgICAgICBpZiAocXVldWUub3B0aW9ucy5sZWF2ZU9uRW1wdHkpIHF1ZXVlLmRlbGV0ZSgpO1xuICAgICAgICAgICAgcGxheWVyLmV2ZW50cy5lbWl0KEd1aWxkUXVldWVFdmVudC5lbXB0eUNoYW5uZWwsIHF1ZXVlKTtcbiAgICAgICAgfSwgcXVldWUub3B0aW9ucy5sZWF2ZU9uRW1wdHlDb29sZG93biB8fCAwKS51bnJlZigpO1xuICAgICAgICBxdWV1ZS50aW1lb3V0cy5zZXQoYGVtcHR5XyR7b2xkU3RhdGUuZ3VpbGQuaWR9YCwgdGltZW91dCk7XG4gICAgfVxuXG4gICAgaWYgKG5ld1N0YXRlLmNoYW5uZWxJZCAmJiBuZXdTdGF0ZS5jaGFubmVsSWQgPT09IHF1ZXVlLmNoYW5uZWwuaWQpIHtcbiAgICAgICAgY29uc3QgZW1wdHlUaW1lb3V0ID0gcXVldWUudGltZW91dHMuZ2V0KGBlbXB0eV8ke29sZFN0YXRlLmd1aWxkLmlkfWApO1xuICAgICAgICBjb25zdCBjaGFubmVsRW1wdHkgPSBVdGlsLmlzVm9pY2VFbXB0eShxdWV1ZS5jaGFubmVsKTtcbiAgICAgICAgaWYgKCFjaGFubmVsRW1wdHkgJiYgZW1wdHlUaW1lb3V0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoZW1wdHlUaW1lb3V0KTtcbiAgICAgICAgICAgIHF1ZXVlLnRpbWVvdXRzLmRlbGV0ZShgZW1wdHlfJHtvbGRTdGF0ZS5ndWlsZC5pZH1gKTtcbiAgICAgICAgICAgIHBsYXllci5ldmVudHMuZW1pdChHdWlsZFF1ZXVlRXZlbnQuY2hhbm5lbFBvcHVsYXRlLCBxdWV1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob2xkU3RhdGUuY2hhbm5lbElkICYmIG5ld1N0YXRlLmNoYW5uZWxJZCAmJiBvbGRTdGF0ZS5jaGFubmVsSWQgIT09IG5ld1N0YXRlLmNoYW5uZWxJZCkge1xuICAgICAgICBpZiAobmV3U3RhdGUubWVtYmVyPy5pZCA9PT0gbmV3U3RhdGUuZ3VpbGQubWVtYmVycy5tZT8uaWQpIHtcbiAgICAgICAgICAgIGlmIChxdWV1ZS5jb25uZWN0aW9uICYmIG5ld1N0YXRlLm1lbWJlcj8uaWQgPT09IG5ld1N0YXRlLmd1aWxkLm1lbWJlcnMubWU/LmlkKSBxdWV1ZS5jaGFubmVsID0gbmV3U3RhdGUuY2hhbm5lbCE7XG4gICAgICAgICAgICBjb25zdCBlbXB0eVRpbWVvdXQgPSBxdWV1ZS50aW1lb3V0cy5nZXQoYGVtcHR5XyR7b2xkU3RhdGUuZ3VpbGQuaWR9YCk7XG4gICAgICAgICAgICBjb25zdCBjaGFubmVsRW1wdHkgPSBVdGlsLmlzVm9pY2VFbXB0eShxdWV1ZS5jaGFubmVsKTtcbiAgICAgICAgICAgIGlmICghY2hhbm5lbEVtcHR5ICYmIGVtcHR5VGltZW91dCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChlbXB0eVRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHF1ZXVlLnRpbWVvdXRzLmRlbGV0ZShgZW1wdHlfJHtvbGRTdGF0ZS5ndWlsZC5pZH1gKTtcbiAgICAgICAgICAgICAgICBwbGF5ZXIuZXZlbnRzLmVtaXQoR3VpbGRRdWV1ZUV2ZW50LmNoYW5uZWxQb3B1bGF0ZSwgcXVldWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChxdWV1ZS5jb25uZWN0aW9uICYmICFVdGlsLmlzVm9pY2VFbXB0eShxdWV1ZS5jaGFubmVsISkpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwbGF5ZXIubm9kZXMuaGFzKHF1ZXVlLmd1aWxkLmlkKSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBpZiAocXVldWUub3B0aW9ucy5sZWF2ZU9uRW1wdHkpIHF1ZXVlLmRlbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuZXZlbnRzLmVtaXQoR3VpbGRRdWV1ZUV2ZW50LmVtcHR5Q2hhbm5lbCwgcXVldWUpO1xuICAgICAgICAgICAgICAgIH0sIHF1ZXVlLm9wdGlvbnMubGVhdmVPbkVtcHR5Q29vbGRvd24gfHwgMCkudW5yZWYoKTtcbiAgICAgICAgICAgICAgICBxdWV1ZS50aW1lb3V0cy5zZXQoYGVtcHR5XyR7b2xkU3RhdGUuZ3VpbGQuaWR9YCwgdGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAobmV3U3RhdGUuY2hhbm5lbElkICE9PSBxdWV1ZS5jaGFubmVsLmlkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hhbm5lbEVtcHR5ID0gVXRpbC5pc1ZvaWNlRW1wdHkocXVldWUuY2hhbm5lbCEpO1xuICAgICAgICAgICAgICAgIGlmICghY2hhbm5lbEVtcHR5KSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXVlLnRpbWVvdXRzLmhhcyhgZW1wdHlfJHtvbGRTdGF0ZS5ndWlsZC5pZH1gKSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFVdGlsLmlzVm9pY2VFbXB0eShxdWV1ZS5jaGFubmVsISkpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwbGF5ZXIubm9kZXMuaGFzKHF1ZXVlLmd1aWxkLmlkKSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBpZiAocXVldWUub3B0aW9ucy5sZWF2ZU9uRW1wdHkpIHF1ZXVlLmRlbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuZXZlbnRzLmVtaXQoR3VpbGRRdWV1ZUV2ZW50LmVtcHR5Q2hhbm5lbCwgcXVldWUpO1xuICAgICAgICAgICAgICAgIH0sIHF1ZXVlLm9wdGlvbnMubGVhdmVPbkVtcHR5Q29vbGRvd24gfHwgMCkudW5yZWYoKTtcbiAgICAgICAgICAgICAgICBxdWV1ZS50aW1lb3V0cy5zZXQoYGVtcHR5XyR7b2xkU3RhdGUuZ3VpbGQuaWR9YCwgdGltZW91dCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVtcHR5VGltZW91dCA9IHF1ZXVlLnRpbWVvdXRzLmdldChgZW1wdHlfJHtvbGRTdGF0ZS5ndWlsZC5pZH1gKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFubmVsRW1wdHkgPSBVdGlsLmlzVm9pY2VFbXB0eShxdWV1ZS5jaGFubmVsISk7XG4gICAgICAgICAgICAgICAgaWYgKCFjaGFubmVsRW1wdHkgJiYgZW1wdHlUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChlbXB0eVRpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgICBxdWV1ZS50aW1lb3V0cy5kZWxldGUoYGVtcHR5XyR7b2xkU3RhdGUuZ3VpbGQuaWR9YCk7XG4gICAgICAgICAgICAgICAgICAgIHBsYXllci5ldmVudHMuZW1pdChHdWlsZFF1ZXVlRXZlbnQuY2hhbm5lbFBvcHVsYXRlLCBxdWV1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwgImltcG9ydCB7IFV0aWwgfSBmcm9tICcuL1V0aWwnO1xuaW1wb3J0IHsgRXhjZXB0aW9ucyB9IGZyb20gJy4uL2Vycm9ycyc7XG5cbi8vIEB0cy1pZ25vcmVcbmxldCBpcDogdHlwZW9mIGltcG9ydCgnaXAnKTtcblxuZnVuY3Rpb24gZW5zdXJlSXAoKSB7XG4gICAgaWYgKGlwKSByZXR1cm4gaXA7XG5cbiAgICBjb25zdCB7IGVycm9yLCBtb2R1bGUgfSA9IFV0aWwucmVxdWlyZSgnaXAnKTtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgICB0aHJvdyBFeGNlcHRpb25zLkVSUl9OT1RfRVhJU1RJTkdfTU9EVUxFKCdpcCcsICdpcCBwYWNrYWdlIGlzIHJlcXVpcmVkIHRvIHVzZSBJUFJvdGF0b3IuJyk7XG4gICAgfVxuXG4gICAgaXAgPSBtb2R1bGU7XG5cbiAgICByZXR1cm4gaXA7XG59XG5cbmV4cG9ydCBjbGFzcyBJUEJsb2NrIHtcbiAgICBwdWJsaWMgdXNhZ2UgPSAwO1xuICAgIHB1YmxpYyByZWFkb25seSBjaWRyOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IGNpZHJTaXplOiBudW1iZXI7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIGJsb2NrOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKGVuc3VyZUlwKCkuaXNWNEZvcm1hdChibG9jay5zcGxpdCgnLycpWzBdKSAmJiAhYmxvY2suaW5jbHVkZXMoJy8nKSkge1xuICAgICAgICAgICAgYmxvY2sgKz0gJy8zMic7XG4gICAgICAgIH0gZWxzZSBpZiAoZW5zdXJlSXAoKS5pc1Y2Rm9ybWF0KGJsb2NrLnNwbGl0KCcvJylbMF0pICYmICFibG9jay5pbmNsdWRlcygnLycpKSB7XG4gICAgICAgICAgICBibG9jayArPSAnLzEyOCc7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNpZHIgPSBlbnN1cmVJcCgpLmNpZHIodGhpcy5ibG9jayk7XG4gICAgICAgIHRoaXMuY2lkclNpemUgPSBlbnN1cmVJcCgpLmNpZHJTdWJuZXQodGhpcy5ibG9jaykuc3VibmV0TWFza0xlbmd0aDtcbiAgICB9XG5cbiAgICBwdWJsaWMgY29uc3VtZSgpIHtcbiAgICAgICAgdGhpcy51c2FnZSsrO1xuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUFJvdGF0aW9uQ29uZmlnIHtcbiAgICAvKipcbiAgICAgKiBJUCBibG9ja3MgdG8gdXNlXG4gICAgICovXG4gICAgYmxvY2tzOiBzdHJpbmdbXTtcbiAgICAvKipcbiAgICAgKiBJUHMgdG8gZXhjbHVkZVxuICAgICAqL1xuICAgIGV4Y2x1ZGU/OiBzdHJpbmdbXTtcbiAgICAvKipcbiAgICAgKiBNYXggcmV0cmllcyB0byBmaW5kIGFuIElQIHRoYXQgaXMgbm90IGV4Y2x1ZGVkXG4gICAgICovXG4gICAgbWF4UmV0cmllcz86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIElQUm90YXRvciB7XG4gICAgcHVibGljIGJsb2NrczogSVBCbG9ja1tdID0gW107XG4gICAgcHVibGljIGZhaWx1cmVzID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcbiAgICBwdWJsaWMgTUFYX05FWFRfUkVUUklFUyA9IDMwO1xuICAgICNyZXRyaWVzID0gMDtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgY29uZmlnOiBJUFJvdGF0aW9uQ29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5leGNsdWRlID8/PSBbXTtcbiAgICAgICAgdGhpcy5ibG9ja3MgPSBjb25maWcuYmxvY2tzLm1hcCgoYmxvY2spID0+IG5ldyBJUEJsb2NrKGJsb2NrKSk7XG4gICAgICAgIHRoaXMuTUFYX05FWFRfUkVUUklFUyA9IGNvbmZpZy5tYXhSZXRyaWVzID8/IDEwO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRJUCgpOiB7IGlwOiBzdHJpbmc7IGZhbWlseTogNCB8IDYgfSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gdGhpcy5ibG9ja3Muc29ydCgoYSwgYikgPT4gYS51c2FnZSAtIGIudXNhZ2UpWzBdO1xuICAgICAgICBpZiAoIWJsb2NrKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIElQIGJsb2NrcyBhdmFpbGFibGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJhbmRvbSA9IElQUm90YXRvci5nZXRSYW5kb21JUChibG9jay5jaWRyLCBibG9jay5jaWRyU2l6ZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNGYWlsZWRPckV4Y2x1ZGVkKHJhbmRvbSkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLiNyZXRyaWVzKysgPiB0aGlzLk1BWF9ORVhUX1JFVFJJRVMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiNyZXRyaWVzID0gMDtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIGFuIElQIHRoYXQgaXMgbm90IGV4Y2x1ZGVkJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldElQKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLiNyZXRyaWVzID0gMDtcbiAgICAgICAgYmxvY2suY29uc3VtZSgpO1xuICAgICAgICByZXR1cm4geyBpcDogcmFuZG9tLCBmYW1pbHk6IGVuc3VyZUlwKCkuaXNWNEZvcm1hdChyYW5kb20pID8gNCA6IDYgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaXNGYWlsZWRPckV4Y2x1ZGVkKGlwOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmFpbHVyZXMuaGFzKGlwKSB8fCAhIXRoaXMuY29uZmlnLmV4Y2x1ZGU/LmluY2x1ZGVzKGlwKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkRmFpbGVkKGlwOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgbGFzdEZhaWxlZENvdW50ID0gdGhpcy5mYWlsdXJlcy5nZXQoaXApID8/IDA7XG5cbiAgICAgICAgdGhpcy5mYWlsdXJlcy5zZXQoaXAsIGxhc3RGYWlsZWRDb3VudCArIDEpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0UmFuZG9tSVAoYWRkcmVzczogc3RyaW5nLCBzdGFydD86IG51bWJlciwgZW5kPzogbnVtYmVyKSB7XG4gICAgICAgIC8vIEF1dGhvcjogSmVzc2UgVGFuZSA8amVzc2UudGFuZUBnbWFpbC5jb20+XG4gICAgICAgIC8vIE5QTUpTOiBodHRwczovL25wbWpzLm9yZy9yYW5kb20taXBcblxuICAgICAgICBjb25zdCBieXRlcyA9IGVuc3VyZUlwKCkudG9CdWZmZXIoYWRkcmVzcyk7XG4gICAgICAgIGNvbnN0IGlwdjYgPSBieXRlcy5sZW5ndGggPT09IDE2O1xuICAgICAgICBjb25zdCBieXRlc2l6ZSA9IDg7XG5cbiAgICAgICAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICAgICAgICBlbmQgPSB0eXBlb2YgZW5kICE9PSAndW5kZWZpbmVkJyA/IGVuZCA6IGJ5dGVzLmxlbmd0aCAqIGJ5dGVzaXplO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBiaXQgPSBpICogYnl0ZXNpemU7XG5cbiAgICAgICAgICAgIGlmIChiaXQgKyBieXRlc2l6ZSA8IHN0YXJ0IHx8IGJpdCA+PSBlbmQpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGIgPSBieXRlc1tpXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCBieXRlc2l6ZTsgbisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJpdCA+PSBzdGFydCAmJiBiaXQgPCBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYml0cG9zID0gYnl0ZXNpemUgLSBuIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYml0bWFzayA9IDEgPDwgYml0cG9zO1xuICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5yYW5kb20oKSA8IDAuNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYiB8PSBiaXRtYXNrO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYiAmPSB+Yml0bWFzaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBiaXQrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnl0ZXNbaV0gPSBiO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGV0cyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpcHY2KSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgJSAyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRldHNbaSA+PiAxXSA9ICgoYnl0ZXNbaV0gPDwgYnl0ZXNpemUpIHwgYnl0ZXNbaSArIDFdKS50b1N0cmluZygxNik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZXRzW2ldID0gYnl0ZXNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGV0cy5qb2luKGlwdjYgPyAnOicgOiAnLicpO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBBc3luY0xvY2FsU3RvcmFnZSB9IGZyb20gJ25vZGU6YXN5bmNfaG9va3MnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxudHlwZSB1bnNhZmUgPSBhbnk7XG5cbi8qKlxuICogVGhlIHJlY2VpdmVyIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgY29udGV4dCBpcyBwcm92aWRlZFxuICovXG5leHBvcnQgdHlwZSBDb250ZXh0UmVjZWl2ZXI8Uj4gPSAoKSA9PiBSO1xuXG5leHBvcnQgY2xhc3MgQ29udGV4dDxUPiB7XG4gICAgcHJpdmF0ZSBzdG9yYWdlID0gbmV3IEFzeW5jTG9jYWxTdG9yYWdlPFQ+KCk7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBkZWZhdWx0VmFsdWU/OiBUKSB7fVxuXG4gICAgLyoqXG4gICAgICogRXhpdCBvdXQgb2YgdGhpcyBjb250ZXh0XG4gICAgICovXG4gICAgcHVibGljIGV4aXQoc2NvcGU6IENvbnRleHRSZWNlaXZlcjx2b2lkPikge1xuICAgICAgICB0aGlzLnN0b3JhZ2UuZXhpdChzY29wZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgY29udGV4dCBpcyBsb3N0XG4gICAgICovXG4gICAgcHVibGljIGdldCBpc0xvc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2UuZ2V0U3RvcmUoKSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgY29udGV4dC4gSWYgdGhlIGNvbnRleHQgaXMgbG9zdCBhbmQgbm8gZGVmYXVsdCB2YWx1ZSBpcyBwcm92aWRlZCwgdW5kZWZpbmVkIHdpbGwgYmUgcmV0dXJuZWQuXG4gICAgICovXG4gICAgcHVibGljIGNvbnN1bWUoKTogVCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLnN0b3JhZ2UuZ2V0U3RvcmUoKTtcblxuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkICYmIHRoaXMuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHJldHVybiB0aGlzLmRlZmF1bHRWYWx1ZTtcblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSdW4gYSBmdW5jdGlvbiB3aXRoaW4gdGhlIGNvbnRleHQgb2YgdGhpcyBwcm92aWRlclxuICAgICAqL1xuICAgIHB1YmxpYyBwcm92aWRlPFIgPSB1bnNhZmU+KHZhbHVlOiBULCByZWNlaXZlcjogQ29udGV4dFJlY2VpdmVyPFI+KTogUiB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbnRleHQgdmFsdWUgbWF5IG5vdCBiZSB1bmRlZmluZWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgcmVjZWl2ZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29udGV4dCByZWNlaXZlciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2UucnVuKHZhbHVlLCByZWNlaXZlcik7XG4gICAgfVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBjb250ZXh0LiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBvcHRpb25hbC5cbiAqIEBwYXJhbSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIGNvbnRleHRcbiAqIEBleGFtcGxlIGNvbnN0IHVzZXJDb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICpcbiAqICAvLyB0aGUgdmFsdWUgdG8gcHJvdmlkZVxuICogIGNvbnN0IHVzZXIgPSB7XG4gKiAgIGlkOiAxLFxuICogICBuYW1lOiAnSm9obiBEb2UnXG4gKiAgfTtcbiAqXG4gKiAgLy8gcHJvdmlkZSB0aGUgY29udGV4dCB2YWx1ZSB0byB0aGUgcmVjZWl2ZXJcbiAqICBjb250ZXh0LnByb3ZpZGUodXNlciwgaGFuZGxlcik7XG4gKlxuICogIGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gKiAgICAvLyBnZXQgdGhlIGNvbnRleHQgdmFsdWVcbiAqICAgIGNvbnN0IHsgaWQsIG5hbWUgfSA9IHVzZUNvbnRleHQoY29udGV4dCk7XG4gKlxuICogICAgY29uc29sZS5sb2coaWQsIG5hbWUpOyAvLyAxLCBKb2huIERvZVxuICogIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbnRleHQ8VCA9IHVuc2FmZT4oZGVmYXVsdFZhbHVlPzogVCk6IENvbnRleHQ8VD4ge1xuICAgIHJldHVybiBuZXcgQ29udGV4dChkZWZhdWx0VmFsdWUpO1xufVxuXG4vKipcbiAqIEdldCB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgY29udGV4dC4gSWYgdGhlIGNvbnRleHQgaXMgbG9zdCBhbmQgbm8gZGVmYXVsdCB2YWx1ZSBpcyBwcm92aWRlZCwgdW5kZWZpbmVkIHdpbGwgYmUgcmV0dXJuZWQuXG4gKiBAcGFyYW0gY29udGV4dCBUaGUgY29udGV4dCB0byBnZXQgdGhlIHZhbHVlIGZyb21cbiAqIEBleGFtcGxlIGNvbnN0IHZhbHVlID0gdXNlQ29udGV4dChjb250ZXh0KTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUNvbnRleHQ8VCA9IHVuc2FmZT4oY29udGV4dDogQ29udGV4dDxUPik6IFQgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiBjb250ZXh0LmNvbnN1bWUoKTtcbn1cbiIsICJpbXBvcnQgeyBHdWlsZCB9IGZyb20gJ2Rpc2NvcmQuanMnO1xuaW1wb3J0IHR5cGUgeyBQbGF5ZXIgfSBmcm9tICcuLi9QbGF5ZXInO1xuaW1wb3J0IHsgR3VpbGRRdWV1ZSwgTm9kZVJlc29sdmFibGUgfSBmcm9tICcuLi9xdWV1ZSc7XG5pbXBvcnQgeyBpbnN0YW5jZXMgfSBmcm9tICcuLi91dGlscy9fX2ludGVybmFsX18nO1xuaW1wb3J0IHsgRXhjZXB0aW9ucyB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAnLi9jb250ZXh0L2FzeW5jLWNvbnRleHQnO1xuXG5jb25zdCBwcmVmZXJyZWRJbnN0YW5jZUtleSA9ICdfX2Rpc2NvcmRfcGxheWVyX2hvb2tfaW5zdGFuY2VfY2FjaGVfXyc7XG5cbmV4cG9ydCBjb25zdCBnZXRQbGF5ZXIgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGluc3RhbmNlcy5nZXQocHJlZmVycmVkSW5zdGFuY2VLZXkpIHx8IGluc3RhbmNlcy5maXJzdCgpIHx8IG51bGw7XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIEhvb2tzQ3R4IHtcbiAgICBndWlsZDogR3VpbGQ7XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUhvb2tzQ29udGV4dChob29rTmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgcGxheWVyID0gZ2V0UGxheWVyKCk7XG4gICAgaWYgKCFwbGF5ZXIpIHRocm93IEV4Y2VwdGlvbnMuRVJSX0lMTEVHQUxfSE9PS19JTlZPQ0FUSU9OKCdkaXNjb3JkLXBsYXllcicsICdQbGF5ZXIgaW5zdGFuY2UgbXVzdCBiZSBjcmVhdGVkIGJlZm9yZSB1c2luZyBob29rcycpO1xuXG4gICAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQocGxheWVyLmNvbnRleHQpO1xuXG4gICAgaWYgKCFjb250ZXh0KSB0aHJvdyBFeGNlcHRpb25zLkVSUl9JTExFR0FMX0hPT0tfSU5WT0NBVElPTihob29rTmFtZSwgYCR7aG9va05hbWV9IG11c3QgYmUgY2FsbGVkIGluc2lkZSBhIHBsYXllciBjb250ZXh0IGNyZWF0ZWQgYnkgPFBsYXllcj4uY29udGV4dC5wcm92aWRlKClgKTtcblxuICAgIHJldHVybiBjb250ZXh0O1xufVxuXG4vKipcbiAqIEJpbmQgYSBwbGF5ZXIgaW5zdGFuY2UgdG8gdGhlIGhvb2sgc3lzdGVtLCBkZWZhdWx0cyB0byB0aGUgZmlyc3QgaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBjb25zdCBiaW5kSG9vayA9IChwbGF5ZXI6IFBsYXllcikgPT4ge1xuICAgIGluc3RhbmNlcy5zZXQocHJlZmVycmVkSW5zdGFuY2VLZXksIHBsYXllcik7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UXVldWUgPSA8VCA9IHVua25vd24+KG5vZGU6IE5vZGVSZXNvbHZhYmxlKSA9PiB7XG4gICAgY29uc3QgcGxheWVyID0gZ2V0UGxheWVyKCk7XG4gICAgaWYgKCFwbGF5ZXIpIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIChwbGF5ZXIubm9kZXMucmVzb2x2ZShub2RlKSBhcyBHdWlsZFF1ZXVlPFQ+KSB8fCBudWxsO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBIb29rRGVjbGFyYXRpb25Db250ZXh0IHtcbiAgICBnZXRRdWV1ZTogdHlwZW9mIGdldFF1ZXVlO1xuICAgIGdldFBsYXllcjogdHlwZW9mIGdldFBsYXllcjtcbiAgICBpbnN0YW5jZXM6IHR5cGVvZiBpbnN0YW5jZXM7XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbmV4cG9ydCB0eXBlIEhvb2tEZWNsYXJhdGlvbjxUIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+ID0gKGNvbnRleHQ6IEhvb2tEZWNsYXJhdGlvbkNvbnRleHQpID0+IFQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVIb29rPFQgZXh0ZW5kcyBIb29rRGVjbGFyYXRpb248KC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+Pihob29rOiBUKTogUmV0dXJuVHlwZTxUPiB7XG4gICAgcmV0dXJuIGhvb2soe1xuICAgICAgICBnZXRRdWV1ZSxcbiAgICAgICAgZ2V0UGxheWVyLFxuICAgICAgICBpbnN0YW5jZXNcbiAgICB9KSBhcyBSZXR1cm5UeXBlPFQ+O1xufVxuXG4vKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbiIsICJpbXBvcnQgeyBHdWlsZFF1ZXVlSGlzdG9yeSwgTm9kZVJlc29sdmFibGUgfSBmcm9tICcuLi9xdWV1ZSc7XG5pbXBvcnQgeyBnZXRRdWV1ZSwgdXNlSG9va3NDb250ZXh0IH0gZnJvbSAnLi9jb21tb24nO1xuXG4vKipcbiAqIEZldGNoIGd1aWxkIHF1ZXVlIGhpc3RvcnlcbiAqIEBwYXJhbSBub2RlIGd1aWxkIHF1ZXVlIG5vZGUgcmVzb2x2YWJsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlSGlzdG9yeTxNZXRhID0gdW5rbm93bj4oKTogR3VpbGRRdWV1ZUhpc3Rvcnk8TWV0YT4gfCBudWxsO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUhpc3Rvcnk8TWV0YSA9IHVua25vd24+KG5vZGU6IE5vZGVSZXNvbHZhYmxlKTogR3VpbGRRdWV1ZUhpc3Rvcnk8TWV0YT4gfCBudWxsO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUhpc3Rvcnk8TWV0YSA9IHVua25vd24+KG5vZGU/OiBOb2RlUmVzb2x2YWJsZSk6IEd1aWxkUXVldWVIaXN0b3J5PE1ldGE+IHwgbnVsbCB7XG4gICAgY29uc3QgX25vZGUgPSBub2RlID8/IHVzZUhvb2tzQ29udGV4dCgndXNlSGlzdG9yeScpLmd1aWxkO1xuXG4gICAgY29uc3QgcXVldWUgPSBnZXRRdWV1ZTxNZXRhPihfbm9kZSk7XG4gICAgaWYgKCFxdWV1ZSkgcmV0dXJuIG51bGw7XG5cbiAgICByZXR1cm4gcXVldWUuaGlzdG9yeTtcbn1cbiIsICJpbXBvcnQgeyBHdWlsZFF1ZXVlUGxheWVyTm9kZSwgTm9kZVJlc29sdmFibGUgfSBmcm9tICcuLi9xdWV1ZSc7XG5pbXBvcnQgeyBnZXRRdWV1ZSwgdXNlSG9va3NDb250ZXh0IH0gZnJvbSAnLi9jb21tb24nO1xuXG4vKipcbiAqIEZldGNoIGd1aWxkIHF1ZXVlIHBsYXllciBub2RlXG4gKiBAcGFyYW0gbm9kZSBHdWlsZCBxdWV1ZSBub2RlIHJlc29sdmFibGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVBsYXllcjxNZXRhID0gdW5rbm93bj4oKTogR3VpbGRRdWV1ZVBsYXllck5vZGU8TWV0YT4gfCBudWxsO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVBsYXllcjxNZXRhID0gdW5rbm93bj4obm9kZTogTm9kZVJlc29sdmFibGUpOiBHdWlsZFF1ZXVlUGxheWVyTm9kZTxNZXRhPiB8IG51bGw7XG5leHBvcnQgZnVuY3Rpb24gdXNlUGxheWVyPE1ldGEgPSB1bmtub3duPihub2RlPzogTm9kZVJlc29sdmFibGUpOiBHdWlsZFF1ZXVlUGxheWVyTm9kZTxNZXRhPiB8IG51bGwge1xuICAgIGNvbnN0IF9ub2RlID0gbm9kZSA/PyB1c2VIb29rc0NvbnRleHQoJ3VzZVBsYXllcicpLmd1aWxkO1xuICAgIGNvbnN0IHF1ZXVlID0gZ2V0UXVldWU8TWV0YT4oX25vZGUpO1xuICAgIGlmICghcXVldWUpIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIHF1ZXVlLm5vZGU7XG59XG4iLCAiaW1wb3J0IHsgR3VpbGRRdWV1ZSwgTm9kZVJlc29sdmFibGUgfSBmcm9tICcuLi9xdWV1ZSc7XG5pbXBvcnQgeyBnZXRRdWV1ZSwgdXNlSG9va3NDb250ZXh0IH0gZnJvbSAnLi9jb21tb24nO1xuXG4vKipcbiAqIEZldGNoIGd1aWxkIHF1ZXVlXG4gKiBAcGFyYW0gbm9kZSBHdWlsZCBxdWV1ZSBub2RlIHJlc29sdmFibGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVF1ZXVlPE1ldGEgPSB1bmtub3duPigpOiBHdWlsZFF1ZXVlPE1ldGE+IHwgbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiB1c2VRdWV1ZTxNZXRhID0gdW5rbm93bj4obm9kZTogTm9kZVJlc29sdmFibGUpOiBHdWlsZFF1ZXVlPE1ldGE+IHwgbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiB1c2VRdWV1ZTxNZXRhID0gdW5rbm93bj4obm9kZT86IE5vZGVSZXNvbHZhYmxlKTogR3VpbGRRdWV1ZTxNZXRhPiB8IG51bGwge1xuICAgIGNvbnN0IF9ub2RlID0gbm9kZSA/PyB1c2VIb29rc0NvbnRleHQoJ3VzZVF1ZXVlJykuZ3VpbGQ7XG4gICAgY29uc3QgcXVldWUgPSBnZXRRdWV1ZTxNZXRhPihfbm9kZSk7XG4gICAgaWYgKCFxdWV1ZSkgcmV0dXJuIG51bGw7XG5cbiAgICByZXR1cm4gcXVldWU7XG59XG4iLCAiaW1wb3J0IHsgRXhjZXB0aW9ucyB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vdXRpbHMvVXRpbCc7XG5pbXBvcnQgeyBnZXRQbGF5ZXIgfSBmcm9tICcuL2NvbW1vbic7XG5cbi8qKlxuICogRmV0Y2ggbWFpbiBwbGF5ZXIgaW5zdGFuY2VcbiAqIEBkZXByZWNhdGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNYXN0ZXJQbGF5ZXIoKSB7XG4gICAgVXRpbC53YXJuKCd1c2VNYXN0ZXJQbGF5ZXIoKSBob29rIGlzIGRlcHJlY2F0ZWQsIHVzZSB1c2VNYWluUGxheWVyKCkgaW5zdGVhZC4nLCAnRGVwcmVjYXRpb25XYXJuaW5nJyk7XG4gICAgcmV0dXJuIHVzZU1haW5QbGF5ZXIoKTtcbn1cblxuLyoqXG4gKiBGZXRjaCBtYWluIHBsYXllciBpbnN0YW5jZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTWFpblBsYXllcigpIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldFBsYXllcigpO1xuICAgIGlmICghaW5zdGFuY2UpIHtcbiAgICAgICAgdGhyb3cgRXhjZXB0aW9ucy5FUlJfSUxMRUdBTF9IT09LX0lOVk9DQVRJT04oJ3VzZU1haW5QbGF5ZXInLCAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGNhbGxpbmcgXCJ1c2VNYWluUGxheWVyXCIgaG9vayBiZWZvcmUgY3JlYXRpbmcgYSBwbGF5ZXIgaW5zdGFuY2UuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xufVxuIiwgImltcG9ydCB7IFR5cGVVdGlsIH0gZnJvbSAnLi4vdXRpbHMvVHlwZVV0aWwnO1xuaW1wb3J0IHsgTm9kZVJlc29sdmFibGUgfSBmcm9tICcuLi9xdWV1ZSc7XG5pbXBvcnQgeyBnZXRRdWV1ZSwgdXNlSG9va3NDb250ZXh0IH0gZnJvbSAnLi9jb21tb24nO1xuXG5leHBvcnQgdHlwZSBTZXR0ZXJGTjxULCBQPiA9IChwcmV2aW91czogUCkgPT4gVDtcbmV4cG9ydCB0eXBlIE1ldGFkYXRhRGlzcGF0Y2g8VD4gPSByZWFkb25seSBbKCkgPT4gVCwgKG1ldGFkYXRhOiBUIHwgU2V0dGVyRk48VCwgVD4pID0+IHZvaWRdO1xuXG4vKipcbiAqIEZldGNoIG9yIG1hbmlwdWxhdGUgZ3VpbGQgcXVldWUgbWV0YWRhdGFcbiAqIEBwYXJhbSBub2RlIEd1aWxkIHF1ZXVlIG5vZGUgcmVzb2x2YWJsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTWV0YWRhdGE8VCA9IHVua25vd24+KCk6IE1ldGFkYXRhRGlzcGF0Y2g8VD47XG5leHBvcnQgZnVuY3Rpb24gdXNlTWV0YWRhdGE8VCA9IHVua25vd24+KG5vZGU6IE5vZGVSZXNvbHZhYmxlKTogTWV0YWRhdGFEaXNwYXRjaDxUPjtcbmV4cG9ydCBmdW5jdGlvbiB1c2VNZXRhZGF0YTxUID0gdW5rbm93bj4obm9kZT86IE5vZGVSZXNvbHZhYmxlKTogTWV0YWRhdGFEaXNwYXRjaDxUPiB7XG4gICAgY29uc3QgX25vZGUgPSBub2RlID8/IHVzZUhvb2tzQ29udGV4dCgndXNlTWV0YWRhdGEnKS5ndWlsZDtcbiAgICBjb25zdCBxdWV1ZSA9IGdldFF1ZXVlPFQ+KF9ub2RlKTtcbiAgICBjb25zdCBzZXR0ZXIgPSAobWV0YWRhdGE6IFQgfCBTZXR0ZXJGTjxULCBUPikgPT4ge1xuICAgICAgICBpZiAocXVldWUpIHtcbiAgICAgICAgICAgIGlmIChUeXBlVXRpbC5pc0Z1bmN0aW9uKG1ldGFkYXRhKSkgcmV0dXJuIHF1ZXVlLnNldE1ldGFkYXRhKG1ldGFkYXRhKHF1ZXVlLm1ldGFkYXRhKSk7XG4gICAgICAgICAgICByZXR1cm4gcXVldWUuc2V0TWV0YWRhdGEobWV0YWRhdGEpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IGdldHRlciA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHF1ZXVlPy5tZXRhZGF0YSBhcyBUO1xuICAgIH07XG5cbiAgICByZXR1cm4gW2dldHRlciwgc2V0dGVyXSBhcyBjb25zdDtcbn1cbiIsICJpbXBvcnQgeyBOb2RlUmVzb2x2YWJsZSB9IGZyb20gJy4uL3F1ZXVlJztcbmltcG9ydCB7IGdldFF1ZXVlLCB1c2VIb29rc0NvbnRleHQgfSBmcm9tICcuL2NvbW1vbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGltZWxpbmVEaXNwYXRjaGVyT3B0aW9ucyB7XG4gICAgaWdub3JlRmlsdGVyczogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBGZXRjaCBvciBtYW5pcHVsYXRlIGN1cnJlbnQgdHJhY2tcbiAqIEBwYXJhbSBub2RlIEd1aWxkIHF1ZXVlIG5vZGUgcmVzb2x2YWJsZVxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBmb3IgdGltZWxpbmUgZGlzcGF0Y2hlclxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlVGltZWxpbmUobm9kZT86IE5vZGVSZXNvbHZhYmxlLCBvcHRpb25zPzogUGFydGlhbDxUaW1lbGluZURpc3BhdGNoZXJPcHRpb25zPikge1xuICAgIGNvbnN0IF9ub2RlID0gbm9kZSA/PyB1c2VIb29rc0NvbnRleHQoJ3VzZVRpbWVsaW5lJykuZ3VpbGQ7XG4gICAgY29uc3QgcXVldWUgPSBnZXRRdWV1ZShfbm9kZSk7XG4gICAgaWYgKCFxdWV1ZSkgcmV0dXJuIG51bGw7XG5cbiAgICByZXR1cm4gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHtcbiAgICAgICAgZ2V0IHRpbWVzdGFtcCgpIHtcbiAgICAgICAgICAgIHJldHVybiBxdWV1ZS5ub2RlLmdldFRpbWVzdGFtcChvcHRpb25zPy5pZ25vcmVGaWx0ZXJzKSE7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCB2b2x1bWUoKSB7XG4gICAgICAgICAgICByZXR1cm4gcXVldWUubm9kZS52b2x1bWU7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBwYXVzZWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gcXVldWUubm9kZS5pc1BhdXNlZCgpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgdHJhY2soKSB7XG4gICAgICAgICAgICByZXR1cm4gcXVldWUuY3VycmVudFRyYWNrO1xuICAgICAgICB9LFxuICAgICAgICBwYXVzZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBxdWV1ZS5ub2RlLnBhdXNlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc3VtZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBxdWV1ZS5ub2RlLnJlc3VtZSgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXRWb2x1bWUodm9sOiBudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBxdWV1ZS5ub2RlLnNldFZvbHVtZSh2b2wpO1xuICAgICAgICB9LFxuICAgICAgICBhc3luYyBzZXRQb3NpdGlvbih0aW1lOiBudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBxdWV1ZS5ub2RlLnNlZWsodGltZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbiIsICJpbXBvcnQgeyBPbkFmdGVyQ3JlYXRlU3RyZWFtSGFuZGxlciB9IGZyb20gJy4uLy4uL3F1ZXVlJztcbmltcG9ydCB7IGdldEdsb2JhbFJlZ2lzdHJ5IH0gZnJvbSAnLi4vLi4vdXRpbHMvX19pbnRlcm5hbF9fJztcblxuLyoqXG4gKiBHbG9iYWwgb25BZnRlckNyZWF0ZVN0cmVhbSBoYW5kbGVyXG4gKiBAcGFyYW0gaGFuZGxlciBUaGUgaGFuZGxlciBjYWxsYmFja1xuICovXG5leHBvcnQgZnVuY3Rpb24gb25BZnRlckNyZWF0ZVN0cmVhbShoYW5kbGVyOiBPbkFmdGVyQ3JlYXRlU3RyZWFtSGFuZGxlcikge1xuICAgIGdldEdsb2JhbFJlZ2lzdHJ5KCkuc2V0KCdAW29uQWZ0ZXJDcmVhdGVTdHJlYW1dJywgaGFuZGxlcik7XG59XG4iLCAiaW1wb3J0IHsgT25CZWZvcmVDcmVhdGVTdHJlYW1IYW5kbGVyIH0gZnJvbSAnLi4vLi4vcXVldWUnO1xuaW1wb3J0IHsgZ2V0R2xvYmFsUmVnaXN0cnkgfSBmcm9tICcuLi8uLi91dGlscy9fX2ludGVybmFsX18nO1xuXG4vKipcbiAqIEdsb2JhbCBvbkJlZm9yZUNyZWF0ZVN0cmVhbSBoYW5kbGVyXG4gKiBAcGFyYW0gaGFuZGxlciBUaGUgaGFuZGxlciBjYWxsYmFja1xuICovXG5leHBvcnQgZnVuY3Rpb24gb25CZWZvcmVDcmVhdGVTdHJlYW0oaGFuZGxlcjogT25CZWZvcmVDcmVhdGVTdHJlYW1IYW5kbGVyKSB7XG4gICAgZ2V0R2xvYmFsUmVnaXN0cnkoKS5zZXQoJ0Bbb25CZWZvcmVDcmVhdGVTdHJlYW1dJywgaGFuZGxlcik7XG59XG4iLCAiaW1wb3J0IHsgVHlwZVV0aWwgfSBmcm9tICcuLi91dGlscy9UeXBlVXRpbCc7XG5pbXBvcnQgeyBOb2RlUmVzb2x2YWJsZSB9IGZyb20gJy4uL3F1ZXVlJztcbmltcG9ydCB7IGdldFF1ZXVlLCB1c2VIb29rc0NvbnRleHQgfSBmcm9tICcuL2NvbW1vbic7XG5cbnR5cGUgU2V0dGVyRk4gPSAocHJldmlvdXM6IG51bWJlcikgPT4gbnVtYmVyO1xudHlwZSBWb2x1bWVEaXNwYXRjaCA9IHJlYWRvbmx5IFsoKSA9PiBudW1iZXIsICh2b2x1bWU6IG51bWJlciB8IFNldHRlckZOKSA9PiBib29sZWFuIHwgdW5kZWZpbmVkXTtcblxuLyoqXG4gKiBGZXRjaCBvciBtYW5pcHVsYXRlIHBsYXllciB2b2x1bWVcbiAqIEBwYXJhbSBub2RlIEd1aWxkIHF1ZXVlIG5vZGUgcmVzb2x2YWJsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlVm9sdW1lKCk6IFZvbHVtZURpc3BhdGNoO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVZvbHVtZShub2RlOiBOb2RlUmVzb2x2YWJsZSk6IFZvbHVtZURpc3BhdGNoO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVZvbHVtZShub2RlPzogTm9kZVJlc29sdmFibGUpOiBWb2x1bWVEaXNwYXRjaCB7XG4gICAgY29uc3QgX25vZGUgPSBub2RlID8/IHVzZUhvb2tzQ29udGV4dCgndXNlVm9sdW1lJykuZ3VpbGQ7XG4gICAgY29uc3QgcXVldWUgPSBnZXRRdWV1ZShfbm9kZSk7XG4gICAgY29uc3Qgc2V0dGVyID0gKHZvbHVtZTogbnVtYmVyIHwgU2V0dGVyRk4pID0+IHtcbiAgICAgICAgaWYgKHF1ZXVlKSB7XG4gICAgICAgICAgICBpZiAoVHlwZVV0aWwuaXNGdW5jdGlvbih2b2x1bWUpKSByZXR1cm4gcXVldWUubm9kZS5zZXRWb2x1bWUodm9sdW1lKHF1ZXVlLm5vZGUudm9sdW1lKSk7XG4gICAgICAgICAgICByZXR1cm4gcXVldWUubm9kZS5zZXRWb2x1bWUodm9sdW1lKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBnZXR0ZXIgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBxdWV1ZT8ubm9kZS52b2x1bWUgYXMgbnVtYmVyO1xuICAgIH07XG5cbiAgICByZXR1cm4gW2dldHRlciwgc2V0dGVyXSBhcyBjb25zdDtcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxvQkFBQUE7QUFBQSxFQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQyxrQkFBc0M7OztBQ0V0QyxtQkFBNkI7OztBQ0E3QixzQkFBMkI7OztBQ0YzQixxQkFBMEY7OztBQ0FuRixJQUFNLFlBQU4sTUFBTSxVQUFTO0FBQUEsRUFDVixjQUFjO0FBQ2xCLFdBQU87QUFBQSxFQUNYO0FBQUE7QUFBQSxFQUdBLE9BQWMsV0FBVyxHQUEyQjtBQUNoRCxXQUFPLE9BQU8sTUFBTTtBQUFBLEVBQ3hCO0FBQUEsRUFFQSxPQUFjLFNBQVMsR0FBeUI7QUFDNUMsV0FBTyxPQUFPLE1BQU0s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TUFBTSxJQUFNLEVBQUksQ0FBQztBQUFBLEVBQzFGLFlBQVksVUFBVSxDQUFDLE1BQU0sTUFBTSxNQUFNLElBQU0sS0FBSyxNQUFNLElBQU0sSUFBTSxJQUFNLElBQUksQ0FBQztBQUFBLEVBQ2pGLFlBQVksVUFBVSxDQUFDLEtBQUssTUFBTSxLQUFLLE1BQU0sTUFBTSxLQUFLLEtBQUssS0FBSyxNQUFNLElBQUksQ0FBQztBQUFBLEVBQzdFLFdBQVcsVUFBVSxDQUFDLE1BQU0sTUFBTSxLQUFLLEtBQUssYUFBYyxNQUFNLE1BQU0sTUFBTSxhQUFjLFdBQVksQ0FBQztBQUFBLEVBQ3ZHLE1BQU0sVUFBVSxDQUFDLE1BQU0sYUFBYyxHQUFLLEtBQUssS0FBSyxLQUFLLEdBQUssS0FBSyxLQUFLLEdBQUcsQ0FBQztBQUFBLEVBQzVFLE9BQU8sVUFBVSxDQUFDLEtBQUssS0FBSyxhQUFjLGFBQWMsYUFBYyxhQUFjLGFBQWMsYUFBYyxLQUFLLEdBQUcsQ0FBQztBQUFBLEVBQ3pILEtBQUssVUFBVSxDQUFDLE1BQU0sS0FBSyxLQUFLLEdBQUssS0FBSyxhQUFjLE1BQU0sTUFBTSxNQUFNLElBQUksQ0FBQztBQUFBLEVBQy9FLFFBQVEsVUFBVSxDQUFDLGFBQWMsYUFBYyxhQUFjLE1BQU0sYUFBYyxLQUFLLEtBQUssYUFBYyxhQUFjLFdBQVksQ0FBQztBQUFBLEVBQ3BJLE1BQU0sVUFBVSxDQUFDLEdBQUssS0FBSyxNQUFNLElBQU0sTUFBTSxHQUFLLEtBQUssTUFBTSxNQUFNLElBQUksQ0FBQztBQUFBLEVBQ3hFLEtBQUssVUFBVSxDQUFDLE1BQU0sTUFBTSxJQUFNLGFBQWMsR0FBSyxLQUFLLEtBQUssS0FBSyxNQUFNLEdBQUcsQ0FBQztBQUFBLEVBQzlFLE1BQU0sVUFBVSxDQUFDLEtBQUssS0FBSyxhQUFjLE1BQU0sYUFBYyxHQUFLLEdBQUssS0FBSyxNQUFNLEVBQUksQ0FBQztBQUFBLEVBQ3ZGLFVBQVUsVUFBVSxDQUFDLEdBQUssR0FBSyxLQUFLLGFBQWMsSUFBTSxNQUFNLE1BQU0sYUFBYyxLQUFL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QUMvQixZQUFJLENBQUM7QUFBTSxpQkFBTztBQUVsQixlQUFPLENBQUMsYUFBYSxLQUFLLE9BQU8sSUFBSSxjQUFjLEtBQUssT0FBTyxJQUFJLGFBQWEsS0FBSyxRQUFRLElBQUksY0FBYyxLQUFLLFNBQVUsU0FBUyxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsS0FBSyxJQUFJO0FBQUEsTUFDM0ssR0FBRztBQUFBLE1BQ0g7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0EsS0FBSyxXQUFXLE1BQ1gsSUFBSSxDQUFDLE1BQU07QUFDUixlQUFPLEVBQUU7QUFBQSxNQUNiLENBQUMsRUFDQSxLQUFLLElBQUksS0FBSztBQUFBLE1BQ25CO0FBQUEsVUFDQSwrQ0FBeUI7QUFBQSxJQUM3QjtBQUVBLFdBQU8sV0FBVyxLQUFLLElBQUk7QUFBQSxFQUMvQjtBQUFBLEVBRUEsRUFBUyxPQUFPLFFBQVEsSUFBSTtBQUN4QixXQUFPLEtBQUssTUFBTSxNQUFNLE9BQU87QUFBQSxFQUNuQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNTyxlQUFlLE1BQXdCO0FBQzFDLFdBQU8sSUFBSSxTQUFTLE1BQU0sSUFBSTtBQUFBLEVBQ2xDO0FBQ0o7QUE5bkJJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU4wRDtBQUFBO0FBQUE7QUFBQTtBQUFqRCxRQVVjLFVBQWtCO0FBVmhDLFFBV0ssZ0JBQWdCO0FBWDNCLElBQU0sU0FBTjs7O0FsQ2xCUCxJQUFBTSxvQkFXTztBQUNQLElBQUFDLHVCQUE4RTtBQUd2RSxJQUFNLFVBQWtCO0FBRS9CLElBQUksQ0FBQyxnQkFBQUMsUUFBVyxXQUFXLElBQUksR0FBRztBQUM5QixVQUFRLFlBQVksZUFBZSxnQkFBQUEsT0FBVSx5Q0FBeUMsT0FBTyxvQ0FBb0M7QUFDckk7IiwKICAibmFtZXMiOiBbIkd1aWxkUXVldWUiLCAiaW1wb3J0X2Rpc2NvcmQiLCAidGFyZ2V0IiwgIlNlcmlhbGl6ZWRUeXBlIiwgIlF1ZXVlUmVwZWF0TW9kZSIsICJ2ZXJzaW9uIiwgImltcG9ydF91dGlscyIsICJ0YXJnZXQiLCAiaW1wb3J0X3V0aWxzIiwgImltcG9ydF9kaXNjb3JkIiwgImltcG9ydF91dGlscyIsICJpbXBvcnRfZGlzY29yZF92b2lwIiwgImltcG9ydF91dGlscyIsICJpbXBvcnRfZGlzY29yZF92b2lwIiwgImltcG9ydF91dGlscyIsICJpbXBvcnRfZGlzY29yZF92b2lwIiwgInRhcmdldCIsICJxdWVyeSIsICJpbXBvcnRfcHJvbWlzZXMiLCAiaW1wb3J0X2Rpc2NvcmQiLCAicHJpc20iLCAid2FpdEZvciIsICJvcHVzIiwgImltcG9ydF9lcXVhbGl6ZXIiLCAicHJpc20iLCAiVHJhY2tTa2lwUmVhc29uIiwgInRhcmdldCIsICJHdWlsZFF1ZXVlIiwgImltcG9ydF91dGlscyIsICJHdWlsZFF1ZXVlIiwgImltcG9ydF9wcm9taXNlcyIsICJ2ZXJzaW9uIiwgImltcG9ydF9kaXNjb3JkX3ZvaXAiLCAiaW1wb3J0X3V0aWxzIiwgImltcG9ydF9mZm1wZWciLCAiaW1wb3J0X2Rpc2NvcmQiLCAiaW1wb3J0X2Rpc2NvcmRfdm9pcCIsICJpbXBvcnRfZGlzY29yZCIsICJtb2R1bGUiLCAiaXAiLCAiaGFuZGxlciIsICJoYW5kbGVyIiwgImRqc1ZlcnNpb24iLCAiaGFuZGxlciIsICJxdWVyeSIsICJyZXMiLCAicmVzdWx0IiwgImRWb2ljZVZlcnNpb24iLCAiaW1wb3J0X2VxdWFsaXplciIsICJpbXBvcnRfZGlzY29yZF92b2lwIiwgImRqc1ZlcnNpb24iXQp9Cg==