import { Track, BaseExtractor, ExtractorStreamable, SearchQueryType, ExtractorSearchContext, ExtractorInfo, Playlist, GuildQueueHistory } from 'discord-player';
import Innertube, { InnerTubeClient, OAuth2Tokens } from 'youtubei.js';
import { DownloadOptions } from 'youtubei.js/dist/src/types';
import { Readable } from 'node:stream';
import { Video } from 'youtubei.js/dist/src/parser/nodes';
import { AsyncLocalStorage } from 'node:async_hooks';
import * as youtubei_js_agnostic from 'youtubei.js/agnostic';

interface RotatorShardOptions {
    authentications: string[];
    rotationStrategy: "shard";
    currentShard: number;
}
interface RotatorRandomOptions {
    authentications: string[];
    rotationStrategy: "random";
}
type RotatorConfig = RotatorShardOptions | RotatorRandomOptions;
interface StreamOptions {
    useClient?: InnerTubeClient;
}
interface YoutubeiOptions {
    authentication?: string;
    overrideDownloadOptions?: DownloadOptions;
    createStream?: (q: Track, extractor: BaseExtractor<object>) => Promise<string | Readable>;
    signOutOnDeactive?: boolean;
    streamOptions?: StreamOptions;
    rotator?: RotatorConfig;
    overrideBridgeMode?: "ytmusic" | "yt";
    disablePlayer?: boolean;
}
interface AsyncTrackingContext {
    useClient: InnerTubeClient;
}
declare class YoutubeiExtractor extends BaseExtractor<YoutubeiOptions> {
    #private;
    static identifier: string;
    innerTube: Innertube;
    _stream: (q: Track, extractor: BaseExtractor<object>) => Promise<ExtractorStreamable>;
    static instance?: YoutubeiExtractor;
    priority: number;
    static ytContext: AsyncLocalStorage<AsyncTrackingContext>;
    rotatorOnEachReq: boolean;
    static setClientMode(client: InnerTubeClient): void;
    static getStreamingContext(): AsyncTrackingContext;
    activate(): Promise<void>;
    deactivate(): Promise<void>;
    validate(query: string, type?: SearchQueryType | null | undefined): Promise<boolean>;
    bridge(track: Track, ext: BaseExtractor | null): Promise<ExtractorStreamable | null>;
    bridgeFromYTMusic(query: string, track: Track): Promise<ExtractorStreamable | null>;
    bridgeFromYT(query: string, track: Track): Promise<ExtractorStreamable | null>;
    handle(query: string, context: ExtractorSearchContext): Promise<ExtractorInfo>;
    buildTrack(vid: Video, context: ExtractorSearchContext, pl?: Playlist): Track<any>;
    stream(info: Track<unknown>): Promise<ExtractorStreamable>;
    getRelatedTracks(track: Track<{
        duration_ms: number;
        live: boolean;
    }>, history: GuildQueueHistory<unknown>): Promise<ExtractorInfo>;
}

declare function objectToToken(tokens: OAuth2Tokens): string;
declare function tokenToObject(token: string): OAuth2Tokens;

declare function getYoutubeiInstance(): youtubei_js_agnostic.Innertube | undefined;

declare function generateOauthTokens(): Promise<void>;

export { type AsyncTrackingContext, type RotatorConfig, type RotatorRandomOptions, type RotatorShardOptions, type StreamOptions, YoutubeiExtractor, type YoutubeiOptions, generateOauthTokens, getYoutubeiInstance, objectToToken, tokenToObject };
