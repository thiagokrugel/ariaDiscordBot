"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReadableStream = void 0;
const stream_1 = require("stream");
const undici_1 = require("undici");
const utils_1 = require("./utils");
/**
 * Returns a YouTube stream.
 *
 * - Install "m3u8stream" using `npm install m3u8stream` for livestream support.
 */
const getReadableStream = (stream_2, ...args_1) => __awaiter(void 0, [stream_2, ...args_1], void 0, function* (stream, options = {}) {
    if (typeof stream !== "object") {
        throw new Error(utils_1.constants.errors.type("streams", "object", typeof stream));
    }
    if (typeof options !== "object") {
        throw new Error(utils_1.constants.errors.type("options", "object", typeof options));
    }
    const commonRequestOptions = {
        headers: {
            "User-Agent": utils_1.constants.requestOptions.userAgent,
        },
        maxRedirections: utils_1.constants.requestOptions.maxRedirections,
    };
    options = (0, utils_1.mergeObj)({
        requestOptions: commonRequestOptions,
        m3u8streamRequestOptions: commonRequestOptions,
    }, options);
    if ((0, utils_1.isDashContentURL)(stream.url) || (0, utils_1.isHlsContentURL)(stream.url)) {
        const m3u8stream = (0, utils_1.requireOrThrow)("m3u8stream");
        let begin = options.begin;
        if (typeof begin === "undefined" && (0, utils_1.isLiveContentURL)(stream.url)) {
            begin = Date.now();
        }
        return m3u8stream(stream.url, {
            begin,
            requestOptions: options.m3u8streamRequestOptions,
        });
    }
    let contentLength = typeof stream.contentLength === "string"
        ? parseInt(stream.contentLength)
        : stream.contentLength;
    let streamURL = stream.url;
    if (typeof options.begin === "number") {
        streamURL += `&begin=${options.begin}`;
    }
    const output = new stream_1.PassThrough();
    let received = 0;
    const requestData = () => __awaiter(void 0, void 0, void 0, function* () {
        (0, utils_1.mergeObj)(options.requestOptions, {
            headers: {
                range: `bytes=${received}-${contentLength !== null && contentLength !== void 0 ? contentLength : ""}`,
            },
        });
        const resp = yield (0, undici_1.request)(streamURL, options.requestOptions);
        if (typeof resp.headers["content-length"] === "string") {
            contentLength = parseInt(resp.headers["content-length"]);
        }
        resp.body.pause();
        resp.body.on("data", (data) => {
            received += data.length;
        });
        resp.body.pipe(output, { end: false });
        resp.body.once("end", () => {
            if (output.destroyed)
                return;
            if (received < (contentLength !== null && contentLength !== void 0 ? contentLength : -1)) {
                requestData();
                return;
            }
            output.push(null);
        });
    });
    requestData();
    return output;
});
exports.getReadableStream = getReadableStream;
