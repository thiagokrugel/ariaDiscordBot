"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareStreamInfo = exports.extractStreamInfo = void 0;
const undici_1 = require("undici");
const cookies_1 = require("./cookies");
const utils_1 = require("./utils");
/**
 * Get only stream information about a YouTube video.
 *
 * Note: This might break often.
 */
const extractStreamInfo = (url_1, ...args_1) => __awaiter(void 0, [url_1, ...args_1], void 0, function* (url, options = {}) {
    if (typeof url !== "string") {
        throw new Error(utils_1.constants.errors.type("url", "string", typeof url));
    }
    if (typeof options !== "object") {
        throw new Error(utils_1.constants.errors.type("options", "object", typeof options));
    }
    options = (0, utils_1.mergeObj)({
        requestOptions: {
            headers: {
                "User-Agent": utils_1.constants.requestOptions.userAgent,
                Cookie: cookies_1.cookieJar.cookieHeaderValue(),
            },
            maxRedirections: utils_1.constants.requestOptions.maxRedirections,
        },
    }, options);
    if (!url.startsWith("http")) {
        url = utils_1.constants.urls.video.base(url);
    }
    let data;
    try {
        const resp = yield (0, undici_1.request)(url, options.requestOptions);
        (0, utils_1.assertUndiciOkResponse)(resp);
        data = yield resp.body.text();
        cookies_1.cookieJar.utilizeResponseHeaders(resp.headers);
    }
    catch (err) {
        throw new Error(`Failed to fetch url "${url}". (${err})`);
    }
    let streamingData;
    try {
        const streamingDataRaw = (0, utils_1.contentBetweenEnds)(data, '"streamingData":', [
            ['},"playbackTracking":{', "}"],
            ['}]},"', "}]}"],
        ]);
        streamingData = JSON.parse(streamingDataRaw);
    }
    catch (err) {
        throw new Error(`Failed to parse data from webpage. (${err})`);
    }
    const stream = streamingData;
    (0, exports.prepareStreamInfo)(data, stream);
    return stream;
});
exports.extractStreamInfo = extractStreamInfo;
const prepareStreamInfo = (data, stream) => {
    try {
        const playerJsURL = (0, utils_1.contentBetween)(data, '"PLAYER_JS_URL":"', '"');
        stream.player = {
            url: utils_1.constants.urls.base + playerJsURL,
        };
    }
    catch (err) { }
};
exports.prepareStreamInfo = prepareStreamInfo;
exports.default = exports.extractStreamInfo;
