"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cookieJar = exports.CookieJar = void 0;
class CookieJar {
    constructor() {
        this.cookieMap = {};
        this.disabled = false;
    }
    cookieHeaderValue() {
        if (this.disabled)
            return;
        return CookieJar.stringifyCookieMap(this.cookieMap);
    }
    utilizeResponseHeaders(headers) {
        const setCookie = headers["set-cookie"];
        if (!setCookie)
            return;
        try {
            CookieJar.parseSetCookie(setCookie, this.cookieMap);
        }
        catch (_) { }
    }
    static stringifyCookieMap(cookies) {
        return Object.entries(cookies)
            .map(([k, v]) => `${k}=${encodeURIComponent(v)}`)
            .join("; ");
    }
    static parseCookieString(cookie, cookieMap = {}) {
        return cookie.split(";").reduce((pv, cv) => {
            const [k, v] = cv.trim().split("=");
            if (!k || !v || CookieJar.shouldIgnoreCookie(k, v)) {
                return pv;
            }
            pv[k] = decodeURIComponent(v);
            return pv;
        }, cookieMap);
    }
    static parseSetCookie(cookies, cookieMap = {}) {
        if (Array.isArray(cookies)) {
            for (const x of cookies) {
                CookieJar.parseCookieString(x, cookieMap);
            }
            return cookieMap;
        }
        return CookieJar.parseCookieString(cookies, cookieMap);
    }
    static shouldIgnoreCookie(key, value) {
        return (value === "EXPIRED" ||
            CookieJar.ignoredCookieKeys.includes(key.toLowerCase()));
    }
}
exports.CookieJar = CookieJar;
CookieJar.ignoredCookieKeys = [
    "expires",
    "max-age",
    "secure",
    "httponly",
    "samesite",
    "path",
    "domain",
    "gps",
    "priority",
    "login_info",
];
exports.cookieJar = new CookieJar();
